var searchIndex = {};
searchIndex['mioco'] = {"items":[[0,"","mioco","# Mioco",null,null],[0,"mio","","",null,null],[0,"util","mioco::mio","Utilities for non-blocking IO programs",null,null],[11,"with_capacity","mio_orig::util::mpmc_bounded_queue","",0,{"inputs":[{"name":"queue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","",0,{"inputs":[{"name":"queue"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop","","",0,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"cmp","mio_orig::event","",1,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"eq","","",1,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"edge","","",1,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"empty","","",1,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"level","","",1,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"oneshot","","",1,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"all","","",1,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"is_edge","","",1,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"is_level","","",1,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"is_oneshot","","",1,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"bits","","",1,{"inputs":[{"name":"pollopt"}],"output":{"name":"usize"}}],[11,"contains","","",1,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"insert","","",1,null],[11,"remove","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitxor","","",1,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitand","","",1,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"sub","","",1,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"not","","",1,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"fmt","","",1,{"inputs":[{"name":"pollopt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",2,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"eq","","",2,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"none","","",2,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"readable","","",2,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"writable","","",2,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"error","","",2,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"hup","","",2,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"all","","",2,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"is_readable","","",2,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"is_writable","","",2,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"is_error","","",2,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"is_hup","","",2,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"insert","","",2,null],[11,"remove","","",2,null],[11,"bits","","",2,{"inputs":[{"name":"eventset"}],"output":{"name":"usize"}}],[11,"contains","","",2,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"bitor","","",2,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"bitxor","","",2,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"bitand","","",2,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"sub","","",2,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"not","","",2,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"fmt","","",2,{"inputs":[{"name":"eventset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"ioevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"ioevent"}],"output":{"name":"ioevent"}}],[11,"new","","Create a new IoEvent.",3,{"inputs":[{"name":"ioevent"},{"name":"eventset"},{"name":"token"}],"output":{"name":"ioevent"}}],[11,"fmt","mio_orig::event_loop","",4,{"inputs":[{"name":"eventloopconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"eventloopconfig"}],"output":{"name":"eventloopconfig"}}],[11,"default","","",4,{"inputs":[{"name":"eventloopconfig"}],"output":{"name":"eventloopconfig"}}],[11,"fmt","","",5,{"inputs":[{"name":"eventloop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a new event loop using default configuration settings. The\nevent loop will not be running yet.",5,{"inputs":[{"name":"eventloop"}],"output":{"name":"result"}}],[11,"configured","","",5,{"inputs":[{"name":"eventloop"},{"name":"eventloopconfig"}],"output":{"name":"result"}}],[11,"channel","","Returns a sender that allows sending messages to the event loop in a\nthread-safe way, waking up the event loop if needed.",5,{"inputs":[{"name":"eventloop"}],"output":{"name":"sender"}}],[11,"timeout_ms","","Schedules a timeout after the requested time interval. When the\nduration has been reached,\n[Handler::timeout](trait.Handler.html#method.timeout) will be invoked\npassing in the supplied token.",5,null],[11,"clear_timeout","","If the supplied timeout has not been triggered, cancel it such that it\nwill not be triggered in the future.",5,{"inputs":[{"name":"eventloop"},{"name":"timeout"}],"output":{"name":"bool"}}],[11,"shutdown","","Tells the event loop to exit after it is done handling all events in the\ncurrent iteration.",5,null],[11,"is_running","","Indicates whether the event loop is currently running. If it's not it has either\nstopped or is scheduled to stop on the next tick.",5,{"inputs":[{"name":"eventloop"}],"output":{"name":"bool"}}],[11,"register","","Registers an IO handle with the event loop.",5,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"}],"output":{"name":"result"}}],[11,"register_opt","","Registers an IO handle with the event loop.",5,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Re-Registers an IO handle with the event loop.",5,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"run","","Keep spinning the event loop indefinitely, and notify the handler whenever\nany of the registered handles are ready.",5,{"inputs":[{"name":"eventloop"},{"name":"h"}],"output":{"name":"result"}}],[11,"deregister","","Deregisters an IO handle with the event loop.",5,{"inputs":[{"name":"eventloop"},{"name":"e"}],"output":{"name":"result"}}],[11,"run_once","","Spin the event loop once, with a timeout of one second, and notify the\nhandler if any of the registered handles become ready during that\ntime.",5,{"inputs":[{"name":"eventloop"},{"name":"h"}],"output":{"name":"result"}}],[11,"drop","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"fmt","","",6,{"inputs":[{"name":"sender"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","",6,{"inputs":[{"name":"sender"},{"name":"m"}],"output":{"name":"result"}}],[11,"fmt","mio_orig::net::tcp","",7,{"inputs":[{"name":"tcpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 socket",7,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 socket",7,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"connect","","",7,{"inputs":[{"name":"tcpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","",7,{"inputs":[{"name":"tcpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"listen","","",7,{"inputs":[{"name":"tcpsocket"},{"name":"usize"}],"output":{"name":"result"}}],[11,"peer_addr","","",7,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"local_addr","","",7,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","",7,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"set_reuseaddr","","",7,{"inputs":[{"name":"tcpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_socket_error","","",7,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"set_nodelay","","",7,{"inputs":[{"name":"tcpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",7,{"inputs":[{"name":"tcpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"register","","",7,{"inputs":[{"name":"tcpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",7,{"inputs":[{"name":"tcpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",7,{"inputs":[{"name":"tcpsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",7,{"inputs":[{"name":"tcpsocket"},{"name":"tcpsocket"}],"output":{"name":"tcpsocket"}}],[11,"fmt","","",8,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"connect","","",8,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"peer_addr","","",8,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","",8,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"try_clone","","",8,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",8,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","",8,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",8,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"take_socket_error","","",8,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",8,null],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"register","","",8,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",8,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",8,{"inputs":[{"name":"tcpstream"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",8,{"inputs":[{"name":"tcpstream"},{"name":"tcpsocket"}],"output":{"name":"tcpstream"}}],[11,"fmt","","",10,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",10,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",10,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"local_addr","","",10,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","",10,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"from","","",10,{"inputs":[{"name":"tcplistener"},{"name":"tcpsocket"}],"output":{"name":"tcplistener"}}],[11,"register","","",10,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",10,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",10,{"inputs":[{"name":"tcplistener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",10,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",7,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",7,{"inputs":[{"name":"tcpsocket"},{"name":"i32"}],"output":{"name":"tcpsocket"}}],[11,"as_raw_fd","","",8,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",8,{"inputs":[{"name":"tcpstream"},{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"as_raw_fd","","",10,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",10,{"inputs":[{"name":"tcplistener"},{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"fmt","mio_orig::net::udp","",11,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",11,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",11,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"bound","","",11,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","",11,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","",11,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","",11,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"send_to","","",11,{"inputs":[{"name":"udpsocket"},{"name":"b"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"recv_from","","",11,{"inputs":[{"name":"udpsocket"},{"name":"b"}],"output":{"name":"result"}}],[11,"set_broadcast","","",11,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",11,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","",11,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",11,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","",11,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"register","","",11,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",11,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",11,{"inputs":[{"name":"udpsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"udpsocket"},{"name":"udpsocket"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",11,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",11,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"fmt","mio_orig::net::unix","",12,{"inputs":[{"name":"unixsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stream","","Returns a new, unbound, non-blocking Unix domain socket",12,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"connect","","Connect the socket to the specified address",12,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"bind","","Bind the socket to the specified address",12,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"listen","","Listen for incoming requests",12,{"inputs":[{"name":"unixsocket"},{"name":"usize"}],"output":{"name":"result"}}],[11,"try_clone","","",12,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"register","","",12,{"inputs":[{"name":"unixsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",12,{"inputs":[{"name":"unixsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",12,{"inputs":[{"name":"unixsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"unixsocket"},{"name":"unixsocket"}],"output":{"name":"unixsocket"}}],[11,"fmt","","",13,{"inputs":[{"name":"unixstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","",13,{"inputs":[{"name":"unixstream"},{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","",13,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"read","","",13,null],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"register","","",13,{"inputs":[{"name":"unixstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",13,{"inputs":[{"name":"unixstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",13,{"inputs":[{"name":"unixstream"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"unixstream"},{"name":"unixsocket"}],"output":{"name":"unixstream"}}],[11,"fmt","","",14,{"inputs":[{"name":"unixlistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",14,{"inputs":[{"name":"unixlistener"},{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","",14,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"try_clone","","",14,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"register","","",14,{"inputs":[{"name":"unixlistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",14,{"inputs":[{"name":"unixlistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",14,{"inputs":[{"name":"unixlistener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",14,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"from","","",14,{"inputs":[{"name":"unixlistener"},{"name":"unixsocket"}],"output":{"name":"unixlistener"}}],[11,"fmt","","",15,{"inputs":[{"name":"pipereader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",15,null],[11,"register","","",15,{"inputs":[{"name":"pipereader"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",15,{"inputs":[{"name":"pipereader"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",15,{"inputs":[{"name":"pipereader"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",15,{"inputs":[{"name":"pipereader"},{"name":"io"}],"output":{"name":"pipereader"}}],[11,"fmt","","",16,{"inputs":[{"name":"pipewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",16,null],[11,"flush","","",16,{"inputs":[{"name":"pipewriter"}],"output":{"name":"result"}}],[11,"register","","",16,{"inputs":[{"name":"pipewriter"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",16,{"inputs":[{"name":"pipewriter"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",16,{"inputs":[{"name":"pipewriter"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",16,{"inputs":[{"name":"pipewriter"},{"name":"io"}],"output":{"name":"pipewriter"}}],[11,"as_raw_fd","","",12,{"inputs":[{"name":"unixsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",12,{"inputs":[{"name":"unixsocket"},{"name":"i32"}],"output":{"name":"unixsocket"}}],[11,"as_raw_fd","","",13,{"inputs":[{"name":"unixstream"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",13,{"inputs":[{"name":"unixstream"},{"name":"i32"}],"output":{"name":"unixstream"}}],[11,"as_raw_fd","","",14,{"inputs":[{"name":"unixlistener"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",14,{"inputs":[{"name":"unixlistener"},{"name":"i32"}],"output":{"name":"unixlistener"}}],[11,"as_raw_fd","","",15,{"inputs":[{"name":"pipereader"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",15,{"inputs":[{"name":"pipereader"},{"name":"i32"}],"output":{"name":"pipereader"}}],[11,"as_raw_fd","","",16,{"inputs":[{"name":"pipewriter"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",16,{"inputs":[{"name":"pipewriter"},{"name":"i32"}],"output":{"name":"pipewriter"}}],[11,"from_str","mio_orig::net","",17,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_capacity","mio_orig::notify","",18,{"inputs":[{"name":"notify"},{"name":"usize"}],"output":{"name":"result"}}],[11,"check","","",18,{"inputs":[{"name":"notify"},{"name":"usize"},{"name":"bool"}],"output":{"name":"usize"}}],[11,"notify","","",18,{"inputs":[{"name":"notify"},{"name":"m"}],"output":{"name":"result"}}],[11,"poll","","",18,{"inputs":[{"name":"notify"}],"output":{"name":"option"}}],[11,"cleanup","","",18,null],[11,"close","","",18,null],[11,"clone","","",18,{"inputs":[{"name":"notify"}],"output":{"name":"notify"}}],[11,"fmt","","",18,{"inputs":[{"name":"notify"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"register","","",18,{"inputs":[{"name":"notify"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",18,{"inputs":[{"name":"notify"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",18,{"inputs":[{"name":"notify"},{"name":"selector"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"notifyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","mio_orig::poll","",20,{"inputs":[{"name":"poll"}],"output":{"name":"result"}}],[11,"register","","",20,{"inputs":[{"name":"poll"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",20,{"inputs":[{"name":"poll"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",20,{"inputs":[{"name":"poll"},{"name":"e"}],"output":{"name":"result"}}],[11,"poll","","",20,{"inputs":[{"name":"poll"},{"name":"usize"}],"output":{"name":"result"}}],[11,"event","","",20,{"inputs":[{"name":"poll"},{"name":"usize"}],"output":{"name":"ioevent"}}],[11,"fmt","","",20,{"inputs":[{"name":"poll"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","mio_orig::sys::unix::epoll","",21,{"inputs":[{"name":"selector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",21,{"inputs":[{"name":"selector"}],"output":{"name":"result"}}],[11,"select","","Wait for events from the OS",21,{"inputs":[{"name":"selector"},{"name":"events"},{"name":"usize"}],"output":{"name":"result"}}],[11,"register","","Register event interests for the given IO handle with the OS",21,{"inputs":[{"name":"selector"},{"name":"i32"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Register event interests for the given IO handle with the OS",21,{"inputs":[{"name":"selector"},{"name":"i32"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","Deregister event interests for the given IO handle with the OS",21,{"inputs":[{"name":"selector"},{"name":"i32"}],"output":{"name":"result"}}],[11,"drop","","",21,null],[11,"new","","",22,{"inputs":[{"name":"events"}],"output":{"name":"events"}}],[11,"len","","",22,{"inputs":[{"name":"events"}],"output":{"name":"usize"}}],[11,"get","","",22,{"inputs":[{"name":"events"},{"name":"usize"}],"output":{"name":"ioevent"}}],[11,"new","mio_orig::sys::unix::awakener::pipe","",23,{"inputs":[{"name":"awakener"}],"output":{"name":"result"}}],[11,"wakeup","","",23,{"inputs":[{"name":"awakener"}],"output":{"name":"result"}}],[11,"cleanup","","",23,null],[11,"register","","",23,{"inputs":[{"name":"awakener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",23,{"inputs":[{"name":"awakener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",23,{"inputs":[{"name":"awakener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"fmt","mio_orig::sys::unix::io","",24,{"inputs":[{"name":"io"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw_fd","","",24,{"inputs":[{"name":"io"},{"name":"i32"}],"output":{"name":"io"}}],[11,"from","","",24,{"inputs":[{"name":"io"},{"name":"i32"}],"output":{"name":"io"}}],[11,"from_raw_fd","","",24,{"inputs":[{"name":"io"},{"name":"i32"}],"output":{"name":"io"}}],[11,"as_raw_fd","","",24,{"inputs":[{"name":"io"}],"output":{"name":"i32"}}],[11,"register","","",24,{"inputs":[{"name":"io"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",24,{"inputs":[{"name":"io"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",24,{"inputs":[{"name":"io"},{"name":"selector"}],"output":{"name":"result"}}],[11,"read","","",24,null],[11,"write","","",24,null],[11,"flush","","",24,{"inputs":[{"name":"io"}],"output":{"name":"result"}}],[11,"drop","","",24,null],[11,"fmt","mio_orig::sys::unix::tcp","",25,{"inputs":[{"name":"tcpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 socket",25,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 socket",25,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"connect","","",25,{"inputs":[{"name":"tcpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","",25,{"inputs":[{"name":"tcpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"listen","","",25,{"inputs":[{"name":"tcpsocket"},{"name":"usize"}],"output":{"name":"result"}}],[11,"accept","","",25,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"peer_addr","","",25,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"local_addr","","",25,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","",25,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"shutdown","","",25,{"inputs":[{"name":"tcpsocket"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_reuseaddr","","",25,{"inputs":[{"name":"tcpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_socket_error","","",25,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"set_nodelay","","",25,{"inputs":[{"name":"tcpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",25,{"inputs":[{"name":"tcpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read","","",25,null],[11,"write","","",25,null],[11,"flush","","",25,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"register","","",25,{"inputs":[{"name":"tcpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",25,{"inputs":[{"name":"tcpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",25,{"inputs":[{"name":"tcpsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",25,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"from","","",25,{"inputs":[{"name":"tcpsocket"},{"name":"io"}],"output":{"name":"tcpsocket"}}],[11,"from_raw_fd","","",25,{"inputs":[{"name":"tcpsocket"},{"name":"i32"}],"output":{"name":"tcpsocket"}}],[11,"as_raw_fd","","",25,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"i32"}}],[11,"fmt","mio_orig::sys::unix::udp","",26,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",26,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",26,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"bind","","",26,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","",26,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","",26,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"send_to","","",26,{"inputs":[{"name":"udpsocket"},{"name":"b"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"recv_from","","",26,{"inputs":[{"name":"udpsocket"},{"name":"b"}],"output":{"name":"result"}}],[11,"set_broadcast","","",26,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",26,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","",26,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",26,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","",26,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"register","","",26,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",26,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",26,{"inputs":[{"name":"udpsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",26,{"inputs":[{"name":"udpsocket"},{"name":"io"}],"output":{"name":"udpsocket"}}],[11,"from_raw_fd","","",26,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",26,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"fmt","mio_orig::sys::unix::uds","",27,{"inputs":[{"name":"unixsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stream","","Returns a new, unbound, non-blocking Unix domain socket",27,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"connect","","Connect the socket to the specified address",27,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"listen","","Listen for incoming requests",27,{"inputs":[{"name":"unixsocket"},{"name":"usize"}],"output":{"name":"result"}}],[11,"accept","","",27,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"bind","","Bind the socket to the specified address",27,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","",27,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"read","","",27,null],[11,"write","","",27,null],[11,"flush","","",27,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"register","","",27,{"inputs":[{"name":"unixsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",27,{"inputs":[{"name":"unixsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",27,{"inputs":[{"name":"unixsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",27,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"from","","",27,{"inputs":[{"name":"unixsocket"},{"name":"io"}],"output":{"name":"unixsocket"}}],[11,"from_raw_fd","","",27,{"inputs":[{"name":"unixsocket"},{"name":"i32"}],"output":{"name":"unixsocket"}}],[11,"as_raw_fd","","",27,{"inputs":[{"name":"unixsocket"}],"output":{"name":"i32"}}],[11,"fmt","mio_orig::timer","",28,{"inputs":[{"name":"timer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"timeout"}],"output":{"name":"timeout"}}],[11,"new","","",28,{"inputs":[{"name":"timer"},{"name":"u64"},{"name":"usize"},{"name":"usize"}],"output":{"name":"timer"}}],[11,"next_tick_in_ms","","",28,{"inputs":[{"name":"timer"}],"output":{"name":"u64"}}],[11,"setup","","",28,null],[11,"timeout_ms","","",28,{"inputs":[{"name":"timer"},{"name":"t"},{"name":"u64"}],"output":{"name":"result"}}],[11,"timeout_at_ms","","",28,{"inputs":[{"name":"timer"},{"name":"t"},{"name":"u64"}],"output":{"name":"result"}}],[11,"clear","","",28,{"inputs":[{"name":"timer"},{"name":"timeout"}],"output":{"name":"bool"}}],[11,"now","","",28,{"inputs":[{"name":"timer"}],"output":{"name":"u64"}}],[11,"tick_to","","",28,{"inputs":[{"name":"timer"},{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",30,{"inputs":[{"name":"entrylinks"}],"output":{"name":"entrylinks"}}],[11,"fmt","","",31,{"inputs":[{"name":"timererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"timererrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","mio_orig::token","",33,null],[11,"eq","","",33,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"as_usize","","",33,{"inputs":[{"name":"token"}],"output":{"name":"usize"}}],[11,"from_usize","","",33,{"inputs":[{"name":"token"},{"name":"usize"}],"output":{"name":"token"}}],[11,"as_usize","","",33,{"inputs":[{"name":"token"}],"output":{"name":"usize"}}],[6,"Slab","mioco::mio::util","",null,null],[3,"Queue","","",null,null],[0,"prelude","mioco::mio","",null,null],[8,"TryRead","mioco::mio::prelude","",null,null],[11,"try_read_buf","","",34,{"inputs":[{"name":"tryread"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_read","","",34,null],[3,"EventLoop","","Single threaded IO event loop.",null,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","","",35,{"inputs":[{"name":"trywrite"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_write","","",35,null],[0,"buf","mioco::mio","",null,null],[11,"from_slice","bytes::buf::byte","Create a new `ByteBuf` by copying the contents of the given slice.",36,null],[11,"mut_with_capacity","","",36,{"inputs":[{"name":"bytebuf"},{"name":"usize"}],"output":{"name":"mutbytebuf"}}],[11,"none","","",36,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytebuf"}}],[11,"from_mem_ref","","",36,{"inputs":[{"name":"bytebuf"},{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bytebuf"}}],[11,"capacity","","",36,{"inputs":[{"name":"bytebuf"}],"output":{"name":"usize"}}],[11,"flip","","",36,{"inputs":[{"name":"bytebuf"}],"output":{"name":"mutbytebuf"}}],[11,"resume","","Flips the buffer back to mutable, resetting the write position\nto the byte after the previous write.",36,{"inputs":[{"name":"bytebuf"}],"output":{"name":"mutbytebuf"}}],[11,"read_slice","","",36,null],[11,"to_seq_byte_str","","",36,{"inputs":[{"name":"bytebuf"}],"output":{"name":"seqbytestr"}}],[11,"to_bytes","","",36,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytes"}}],[11,"mark","","Marks the current read location.",36,null],[11,"reset","","Resets the read position to the previously marked position.",36,null],[11,"allocate","bytes::alloc::heap","",37,{"inputs":[{"name":"heap"},{"name":"usize"}],"output":{"name":"memref"}}],[11,"deallocate","","",37,null],[11,"allocate","","",37,{"inputs":[{"name":"heap"},{"name":"usize"}],"output":{"name":"memref"}}],[11,"deallocate","","",37,null],[11,"new","bytes::alloc","",38,null],[11,"none","","",38,{"inputs":[{"name":"memref"}],"output":{"name":"memref"}}],[11,"is_none","","",38,{"inputs":[{"name":"memref"}],"output":{"name":"bool"}}],[11,"ptr","","",38,null],[11,"bytes","","",38,null],[11,"bytes_mut","","",38,null],[11,"clone","","",38,{"inputs":[{"name":"memref"}],"output":{"name":"memref"}}],[11,"drop","","",38,null],[11,"new","","",39,null],[11,"remaining","bytes::buf::byte","",36,{"inputs":[{"name":"bytebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",36,null],[11,"advance","","",36,null],[11,"read_slice","","",36,null],[11,"from_mem_ref","","",40,{"inputs":[{"name":"robytebuf"},{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"robytebuf"}}],[11,"to_seq_byte_str","","",40,{"inputs":[{"name":"robytebuf"}],"output":{"name":"seqbytestr"}}],[11,"to_bytes","","",40,{"inputs":[{"name":"robytebuf"}],"output":{"name":"bytes"}}],[11,"mark","","Marks the current read location.",40,null],[11,"reset","","Resets the read position to the previously marked position.",40,null],[11,"remaining","","",40,{"inputs":[{"name":"robytebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",40,null],[11,"advance","","",40,null],[11,"read_slice","","",40,null],[11,"capacity","","",41,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"usize"}}],[11,"flip","","",41,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"bytebuf"}}],[11,"clear","","",41,null],[11,"write_slice","","",41,null],[11,"bytes","","",41,null],[11,"remaining","","",41,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"usize"}}],[11,"advance","","",41,null],[11,"mut_bytes","","",41,null],[11,"new","bytes::buf::ring","Allocates a new `RingBuf` with the specified capacity.",42,{"inputs":[{"name":"ringbuf"},{"name":"usize"}],"output":{"name":"ringbuf"}}],[11,"is_full","","Returns `true` if the buf cannot accept any further writes.",42,{"inputs":[{"name":"ringbuf"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns `true` if the buf cannot accept any further reads.",42,{"inputs":[{"name":"ringbuf"}],"output":{"name":"bool"}}],[11,"capacity","","Returns the number of bytes that the buf can hold.",42,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"mark","","Marks the current read location.",42,null],[11,"reset","","Resets the read position to the previously marked position.",42,null],[11,"clone","","",42,{"inputs":[{"name":"ringbuf"}],"output":{"name":"ringbuf"}}],[11,"fmt","","",42,{"inputs":[{"name":"ringbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"remaining","","",42,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"bytes","","",42,null],[11,"advance","","",42,null],[11,"remaining","","",42,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"advance","","",42,null],[11,"mut_bytes","","",42,null],[11,"read","","",42,null],[11,"write","","",42,null],[11,"flush","","",42,{"inputs":[{"name":"ringbuf"}],"output":{"name":"result"}}],[11,"wrap","bytes::buf::slice","",43,null],[11,"remaining","","",43,{"inputs":[{"name":"slicebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",43,null],[11,"advance","","",43,null],[11,"wrap","","",44,null],[11,"remaining","","",44,{"inputs":[{"name":"mutslicebuf"}],"output":{"name":"usize"}}],[11,"advance","","",44,null],[11,"mut_bytes","","",44,null],[11,"fmt","bytes::buf::take","",45,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",45,{"inputs":[{"name":"take"},{"name":"t"},{"name":"usize"}],"output":{"name":"take"}}],[11,"into_inner","","",45,{"inputs":[{"name":"take"}],"output":{"name":"t"}}],[11,"get_ref","","",45,{"inputs":[{"name":"take"}],"output":{"name":"t"}}],[11,"get_mut","","",45,{"inputs":[{"name":"take"}],"output":{"name":"t"}}],[11,"limit","","",45,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"set_limit","","",45,null],[11,"remaining","","",45,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"bytes","","",45,null],[11,"advance","","",45,null],[11,"read","","",45,null],[11,"remaining","","",45,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"mut_bytes","","",45,null],[11,"advance","","",45,null],[11,"remaining","alloc::boxed","",46,{"inputs":[{"name":"box"}],"output":{"name":"usize"}}],[11,"bytes","","",46,null],[11,"advance","","",46,null],[11,"read_slice","","",46,null],[11,"fmt","","",46,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"remaining","std::io::cursor","",47,{"inputs":[{"name":"cursor"}],"output":{"name":"usize"}}],[11,"bytes","","",47,null],[11,"advance","","",47,null],[11,"remaining","collections::vec","",48,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"advance","","",48,null],[11,"mut_bytes","","",48,null],[11,"remaining","std::io::cursor","",47,{"inputs":[{"name":"cursor"}],"output":{"name":"usize"}}],[11,"bytes","","",47,null],[11,"advance","","",47,null],[11,"read","bytes::buf::byte","",36,null],[11,"read","","",40,null],[11,"read","bytes::str::rope","",49,null],[11,"read","alloc::boxed","",46,null],[11,"write","bytes::buf::byte","",41,null],[11,"flush","","",41,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"result"}}],[11,"from_slice","bytes::str::bytes","",50,null],[11,"of","","",50,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"empty","","",50,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"downcast_ref","","If the underlying `ByteStr` is of type `B`, returns a reference to it\notherwise None.",50,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"try_unwrap","","If the underlying `ByteStr` is of type `B`, returns the unwraped value,\notherwise, returns the original `Bytes` as `Err`.",50,{"inputs":[{"name":"bytes"}],"output":{"name":"result"}}],[11,"buf","","",50,{"inputs":[{"name":"bytes"}],"output":{"name":"box"}}],[11,"concat","","",50,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",50,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"slice","","",50,{"inputs":[{"name":"bytes"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_at","","",50,null],[11,"to_bytes","","",50,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"index","","",50,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"fmt","","",50,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"drop","","",50,null],[11,"from_slice","bytes::str::rope","",51,null],[11,"of","","Returns a Rope consisting of the supplied Bytes as a single segment.",51,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"rope"}}],[11,"len","","",51,{"inputs":[{"name":"rope"}],"output":{"name":"usize"}}],[11,"is_empty","","",51,{"inputs":[{"name":"rope"}],"output":{"name":"bool"}}],[11,"buf","","",51,{"inputs":[{"name":"rope"}],"output":{"name":"ropebuf"}}],[11,"concat","","",51,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",51,{"inputs":[{"name":"rope"}],"output":{"name":"usize"}}],[11,"slice","","",51,{"inputs":[{"name":"rope"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",51,{"inputs":[{"name":"rope"}],"output":{"name":"bytes"}}],[11,"index","","",51,{"inputs":[{"name":"rope"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",51,{"inputs":[{"name":"rope"}],"output":{"name":"rope"}}],[11,"remaining","","",49,{"inputs":[{"name":"ropebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",49,null],[11,"advance","","",49,null],[11,"next","","",52,{"inputs":[{"name":"pieceiter"}],"output":{"name":"option"}}],[11,"from_slice","bytes::str::seq","Create a new `SeqByteStr` from a byte slice.",53,null],[11,"from_mem_ref","","Creates a new `SeqByteStr` from a `MemRef`, an offset, and a length.",53,{"inputs":[{"name":"seqbytestr"},{"name":"memref"},{"name":"u32"},{"name":"u32"}],"output":{"name":"seqbytestr"}}],[11,"buf","","",53,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"robytebuf"}}],[11,"concat","","",53,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",53,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"usize"}}],[11,"slice","","",53,{"inputs":[{"name":"seqbytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",53,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"bytes"}}],[11,"index","","",53,{"inputs":[{"name":"seqbytestr"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",53,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"seqbytestr"}}],[11,"clone","bytes::str::small","",54,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestr"}}],[11,"zero","","",54,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestr"}}],[11,"from_slice","","",54,null],[11,"as_slice","","",54,null],[11,"buf","","",54,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestrbuf"}}],[11,"concat","","",54,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",54,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"usize"}}],[11,"slice","","",54,{"inputs":[{"name":"smallbytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",54,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"bytes"}}],[11,"index","","",54,{"inputs":[{"name":"smallbytestr"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",55,{"inputs":[{"name":"smallbytestrbuf"}],"output":{"name":"smallbytestrbuf"}}],[11,"remaining","","",55,{"inputs":[{"name":"smallbytestrbuf"}],"output":{"name":"usize"}}],[11,"bytes","","",55,null],[11,"advance","","",55,null],[11,"eq","bytes::str::seq","",53,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","bytes::str::small","",54,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","bytes::str::bytes","",50,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","bytes::str::rope","",51,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bool"}}],[11,"fmt","bytes","",56,{"inputs":[{"name":"buferror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"buferror"}],"output":{"name":"buferror"}}],[3,"ByteBuf","mioco::mio::buf","A `Buf` backed by a contiguous region of memory.",null,null],[8,"MutBuf","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be written to the MutBuf",57,{"inputs":[{"name":"mutbuf"}],"output":{"name":"usize"}}],[10,"advance","","Advance the internal cursor of the MutBuf",57,null],[11,"has_remaining","","Returns true iff there is any more space for bytes to be written",57,{"inputs":[{"name":"mutbuf"}],"output":{"name":"bool"}}],[10,"mut_bytes","","Returns a mutable slice starting at the current MutBuf position and of\nlength between 0 and `MutBuf::remaining()`.",57,null],[11,"write_slice","","Write bytes from the given slice into the `MutBuf` and advance the\ncursor by the number of bytes written.\nReturns the number of bytes written.",57,null],[11,"write_byte","","Write a single byte to the `MuBuf`",57,{"inputs":[{"name":"mutbuf"},{"name":"u8"}],"output":{"name":"bool"}}],[3,"RingBuf","","Buf backed by a continous chunk of memory. Maintains a read cursor and a\nwrite cursor. When reads and writes reach the end of the allocated buffer,\nwraps around to the start.",null,null],[8,"Buf","","A trait for values that provide sequential read access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",58,{"inputs":[{"name":"buf"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current Buf position and of length\nbetween 0 and `Buf::remaining()`.",58,null],[10,"advance","","Advance the internal cursor of the Buf",58,null],[11,"has_remaining","","Returns true if there are any more bytes to consume",58,{"inputs":[{"name":"buf"}],"output":{"name":"bool"}}],[11,"read_slice","","Read bytes from the `Buf` into the given slice and advance the cursor by\nthe number of bytes read.\nReturns the number of bytes read.",58,null],[11,"read_byte","","Read a single byte from the `Buf`",58,{"inputs":[{"name":"buf"}],"output":{"name":"option"}}],[3,"SliceBuf","","",null,null],[3,"MutByteBuf","","",null,null],[3,"MutSliceBuf","","",null,null],[0,"tcp","mioco::mio","",null,null],[3,"TcpSocket","mioco::mio::tcp","",null,null],[3,"TcpStream","","",null,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",9,null],[13,"Write","","Further  transmissions will be disallowed.",9,null],[13,"Both","","Further receptions and transmissions will be disallowed.",9,null],[3,"TcpListener","","",null,null],[8,"TryAccept","mioco::mio","",null,null],[16,"Output","","",59,null],[10,"accept","","",59,{"inputs":[{"name":"tryaccept"}],"output":{"name":"result"}}],[8,"TryWrite","","",null,null],[11,"try_write_buf","","",35,{"inputs":[{"name":"trywrite"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_write","","",35,null],[3,"EventSet","","",null,null],[3,"Io","","",null,null],[6,"TimerResult","","",null,null],[0,"udp","","",null,null],[3,"UdpSocket","mioco::mio::udp","",null,null],[8,"TryRead","mioco::mio","",null,null],[11,"try_read_buf","","",34,{"inputs":[{"name":"tryread"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_read","","",34,null],[4,"NotifyError","","",null,null],[13,"Io","","",19,null],[13,"Full","","",19,null],[13,"Closed","","",19,null],[3,"EventLoopConfig","","Configure EventLoop runtime details",null,null],[12,"io_poll_timeout_ms","","",4,null],[12,"notify_capacity","","",4,null],[12,"messages_per_tick","","",4,null],[12,"timer_tick_ms","","",4,null],[12,"timer_wheel_size","","",4,null],[12,"timer_capacity","","",4,null],[3,"TimerError","","",null,null],[3,"Token","","",null,null],[3,"Selector","","",null,null],[4,"IpAddr","","An IP address, either a IPv4 or IPv6 address.",null,null],[13,"V4","","",17,null],[13,"V6","","",17,null],[11,"new","std::net::ip","Creates a new IPv4 address from four eight-bit octets.",60,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",60,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address 0.0.0.0.",60,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",60,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",60,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",60,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",60,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",60,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address.",60,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",60,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",60,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",60,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"from","alloc::boxed","",46,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",46,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",46,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",46,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",61,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",62,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","core::num","",63,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","core::num::dec2flt","",64,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","collections::string","",65,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",66,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"is","mioco","Returns true if the boxed type is the same as `T`",67,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",67,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",67,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",67,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",67,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",67,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",67,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",67,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",67,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",67,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",67,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",67,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"next","std::ascii","",68,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"shl","core::num","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",69,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",69,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",69,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",69,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",69,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",69,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",69,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",69,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",69,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",69,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",69,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",69,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"clone","std::thread::local","",70,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[11,"eq","","",70,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"with","","Acquires a reference to the value in this TLS key.",71,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",71,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[11,"new","std::thread::local::imp","",72,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",72,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",73,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",73,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",73,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[11,"new","std::thread::scoped_tls::imp","",74,{"inputs":[{"name":"keyinner"}],"output":{"name":"keyinner"}}],[11,"set","","",74,null],[11,"get","","",74,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",75,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",75,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",75,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",75,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",76,null],[11,"name","","Gets the thread's name.",76,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"fmt","","",76,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",76,{"inputs":[{"name":"thread"},{"name":"option"}],"output":{"name":"thread"}}],[11,"thread","","Extracts a handle to the underlying thread",77,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",77,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"clone","std::collections::hash::table","",78,{"inputs":[{"name":"rawbucket"}],"output":{"name":"rawbucket"}}],[11,"clone","","",79,{"inputs":[{"name":"bucket"}],"output":{"name":"bucket"}}],[11,"clone","","",80,{"inputs":[{"name":"safehash"}],"output":{"name":"safehash"}}],[11,"eq","","",80,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",80,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"table","","Borrow a reference to the table.",81,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",81,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",81,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",82,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",82,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",79,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",79,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",79,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",79,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",79,{"inputs":[{"name":"bucket"},{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",79,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",79,null],[11,"next","","",82,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",82,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",82,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",82,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",81,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",81,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",81,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",81,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",81,null],[11,"take","","Removes this bucket's key and value from the hashtable.",81,null],[11,"replace","","",81,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",81,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",81,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",81,null],[11,"expect_full","","",83,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",84,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",84,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",85,{"inputs":[{"name":"rawtable"},{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable's capacity, similar to a vector's.",85,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",85,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"iter","","",85,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",85,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",85,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",85,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"clone","","",86,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[11,"next","","",86,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[11,"next","","",87,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"len","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",89,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"len","","",89,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",90,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"len","","",90,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",91,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"len","","",91,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",91,null],[11,"clone","","",85,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",85,null],[11,"clone","std::collections::hash::map","",92,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"clone","","",93,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty HashMap.",93,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",93,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Creates an empty hashmap which will use the given hasher to hash keys.",93,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",93,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",93,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",93,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",93,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",93,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",93,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",93,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",93,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",93,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",93,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",93,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",93,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",93,null],[11,"get","","Returns a reference to the value corresponding to the key.",93,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",93,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",93,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",93,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",93,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",93,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",93,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",93,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"index","","",93,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",94,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",95,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",96,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",93,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"next","","",94,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"len","","",94,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",97,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"len","","",97,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",98,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"len","","",98,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",95,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"len","","",95,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",96,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"len","","",96,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",99,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"len","","",99,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",100,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",100,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",101,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",101,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",101,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",101,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",101,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",102,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",93,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",93,null],[11,"extend","","",93,null],[11,"clone","","",103,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",103,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"hasher","","",103,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",103,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"get","","",93,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"take","","",93,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"replace","","",93,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"clone","std::collections::hash::set","",104,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty HashSet.",104,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",104,{"inputs":[{"name":"hashset"},{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hash_state","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",104,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",104,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",104,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",104,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",104,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",104,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",104,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",104,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",104,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",104,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",104,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",104,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",104,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",104,null],[11,"contains","","Returns `true` if the set contains a value.",104,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",104,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",104,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",104,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",104,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",104,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",104,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",104,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",104,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",104,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",104,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",104,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",104,null],[11,"extend","","",104,null],[11,"default","","",104,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",104,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",105,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",105,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"len","","",105,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",106,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"len","","",106,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",107,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"len","","",107,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",108,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",108,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"clone","","",109,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",109,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"clone","","",110,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",110,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"clone","","",111,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",111,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"hasher","std::collections::hash::state","",112,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",112,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",112,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"clone","collections::binary_heap","",113,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",113,null],[11,"default","","",113,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",113,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",113,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",113,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",113,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",113,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",113,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",113,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",113,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",113,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",113,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",113,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",113,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",113,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",113,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",113,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",113,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",113,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",113,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",113,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",113,null],[11,"drop","","",114,null],[11,"clone","","",115,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",115,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next_back","","",115,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",116,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"next_back","","",116,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",117,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"next_back","","",117,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",113,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",48,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",113,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",113,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",113,null],[11,"extend","","",113,null],[11,"clone","collections::vec_deque","",118,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",118,null],[11,"default","","",118,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",118,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",118,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",118,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",118,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",118,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",118,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",118,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",118,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",118,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",118,null],[11,"iter","","Returns a front-to-back iterator.",118,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",118,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",118,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",118,null],[11,"len","","Returns the number of elements in the `VecDeque`.",118,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",118,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items from start to end. The element\nrange is removed even if the iterator is not consumed until the end.",118,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",118,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",118,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",118,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",118,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",118,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",118,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",118,null],[11,"push_back","","Appends an element to the back of a buffer",118,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",118,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",118,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_back_remove","","deprecated",118,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",118,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","deprecated",118,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",118,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",118,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",118,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",118,null],[11,"retain","","Retains only the elements specified by the predicate.",118,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",118,null],[11,"clone","","",119,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",119,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"next_back","","",119,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",120,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"next_back","","",120,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",121,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",121,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"next_back","","",121,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",122,null],[11,"next","","",122,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next_back","","",122,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",118,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",118,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",118,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",118,null],[11,"index","","",118,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",118,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",118,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",118,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",118,null],[11,"extend","","",118,null],[11,"fmt","","",118,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","collections::linked_list","",123,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",124,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",125,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",125,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",126,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",126,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",126,null],[11,"iter","","Provides a forward iterator.",126,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",126,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",126,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",126,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",126,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",126,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",126,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",126,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",126,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",126,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",126,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",126,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",126,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",126,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",126,null],[11,"next","","",123,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"next_back","","",123,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",127,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"next_back","","",127,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",127,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",127,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",124,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next_back","","",124,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",126,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",126,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",126,null],[11,"extend","","",126,null],[11,"eq","","",126,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",126,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",126,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",126,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",126,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",126,null],[11,"drop","std::dynamic_lib","",128,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",128,{"inputs":[{"name":"dynamiclibrary"},{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",128,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",128,null],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",128,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",128,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",128,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","std::env","",129,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"next","","",130,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"clone","","",131,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"eq","","",131,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"fmt","","",131,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",131,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[11,"next","","",132,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",132,null],[11,"fmt","","",133,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",133,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",134,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",134,null],[11,"len","","",134,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",135,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",135,null],[11,"len","","",135,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"clone","std::ffi::c_str","",136,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[11,"hash","","",136,null],[11,"cmp","","",136,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",136,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",136,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",136,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",136,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",136,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",136,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"hash","","",137,null],[11,"fmt","","",138,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",138,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"fmt","","",139,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",139,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"intostringerror"}],"output":{"name":"intostringerror"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",136,{"inputs":[{"name":"cstring"},{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",136,{"inputs":[{"name":"cstring"},{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_ptr","","Retakes ownership of a CString that was transferred to C.",136,null],[11,"from_raw","","Retakes ownership of a CString that was transferred to C.",136,null],[11,"into_ptr","","Transfers ownership of the string to a C caller.",136,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",136,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",136,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the underlying byte buffer.",136,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",136,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",136,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",136,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",137,null],[11,"as_ptr","","Returns the inner pointer to this C string.",137,null],[11,"to_bytes","","Converts this C string to a byte slice.",137,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",137,null],[11,"to_str","","Yields a `&str` slice if the `CStr` contains valid UTF-8.",137,{"inputs":[{"name":"cstr"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow<str>`.",137,{"inputs":[{"name":"cstr"}],"output":{"name":"cow"}}],[11,"deref","","",136,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"fmt","","",136,{"inputs":[{"name":"cstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"cstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",136,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",138,{"inputs":[{"name":"nulerror"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",138,{"inputs":[{"name":"nulerror"}],"output":{"name":"vec"}}],[11,"description","","",138,{"inputs":[{"name":"nulerror"}],"output":{"name":"str"}}],[11,"fmt","","",138,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",140,{"inputs":[{"name":"error"},{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",139,{"inputs":[{"name":"intostringerror"}],"output":{"name":"cstring"}}],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",139,{"inputs":[{"name":"intostringerror"}],"output":{"name":"utf8error"}}],[11,"description","","",139,{"inputs":[{"name":"intostringerror"}],"output":{"name":"str"}}],[11,"fmt","","",139,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",137,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",137,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",137,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",137,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"clone","std::ffi::os_str","",141,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",141,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"from_bytes","","Constructs an `OsString` from a byte sequence.",141,{"inputs":[{"name":"osstring"},{"name":"b"}],"output":{"name":"option"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",141,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",141,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given `&OsStr` slice.",141,null],[11,"from","","",141,{"inputs":[{"name":"osstring"},{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",141,{"inputs":[{"name":"osstring"},{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",141,{"inputs":[{"name":"osstring"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"new","","Coerces into an `OsStr` slice.",142,{"inputs":[{"name":"osstr"},{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `OsStr` is valid unicode.",142,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow<str>`.",142,{"inputs":[{"name":"osstr"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned `OsString`.",142,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"to_bytes","","Yields this `OsStr` as a byte slice.",142,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_cstring","","Creates a `CString` containing this `OsStr` data.",142,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"deref","","",141,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"fmt","","",141,{"inputs":[{"name":"osstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",141,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",141,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",141,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",141,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",141,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",141,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",141,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",141,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",141,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",141,null],[11,"eq","","",142,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",142,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",142,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",142,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",142,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",142,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",142,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",142,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",142,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"hash","","",142,null],[11,"fmt","","",142,{"inputs":[{"name":"osstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",141,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"to_owned","","",142,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"as_ref","","",142,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_ref","","",141,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_ref","collections::string","",143,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"clone","std::fs","",144,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"clone","","",145,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",146,{"inputs":[{"name":"permissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",146,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"hash","","",147,null],[11,"eq","","",147,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",147,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"open","","Attempts to open a file in read-only mode.",148,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",148,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",148,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",148,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",148,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",148,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",148,null],[11,"read_to_end","","",148,{"inputs":[{"name":"file"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",148,null],[11,"flush","","",148,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",148,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank net set of options ready for configuration.",145,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",145,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",145,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",145,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",145,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",145,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",145,{"inputs":[{"name":"openoptions"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",144,{"inputs":[{"name":"metadata"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",144,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",144,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",144,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",144,{"inputs":[{"name":"metadata"}],"output":{"name":"permissions"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",146,{"inputs":[{"name":"permissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",146,null],[11,"is_dir","","Test whether this file type represents a directory.",147,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",147,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",147,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"next","","",149,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",150,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",150,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",150,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",150,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"next","","",151,{"inputs":[{"name":"walkdir"}],"output":{"name":"option"}}],[11,"metadata","std::path","",152,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","",152,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","",152,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","",152,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","",152,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","",152,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","",152,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","",152,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"new","std::fs","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",153,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",153,{"inputs":[{"name":"dirbuilder"},{"name":"bool"}],"output":{"name":"dirbuilder"}}],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",153,{"inputs":[{"name":"dirbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",154,{"inputs":[{"name":"bufreader"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",154,{"inputs":[{"name":"bufreader"},{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",154,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",154,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",154,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read","","",154,null],[11,"fill_buf","","",154,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",154,null],[11,"fmt","","",154,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",154,{"inputs":[{"name":"bufreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",156,{"inputs":[{"name":"bufwriter"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",156,{"inputs":[{"name":"bufwriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",156,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",156,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",156,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"write","","",156,null],[11,"flush","","",156,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"bufwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",156,{"inputs":[{"name":"bufwriter"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",156,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",155,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",155,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"w"}}],[11,"from","std::io::error","",140,{"inputs":[{"name":"error"},{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",155,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"str"}}],[11,"fmt","","",155,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",157,{"inputs":[{"name":"linewriter"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",157,{"inputs":[{"name":"linewriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",157,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",157,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",157,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"write","","",157,null],[11,"flush","","",157,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"linewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",158,null],[11,"fmt","std::io::cursor","",47,{"inputs":[{"name":"cursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",47,{"inputs":[{"name":"cursor"},{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",47,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",47,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",47,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",47,{"inputs":[{"name":"cursor"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",47,null],[11,"seek","","",47,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",47,null],[11,"fill_buf","","",47,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",47,null],[11,"write","","",47,null],[11,"flush","","",47,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",47,null],[11,"flush","","",47,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",47,null],[11,"flush","","",47,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"fmt","std::io::error","",140,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"custom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",160,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",160,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",140,{"inputs":[{"name":"error"},{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",140,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",140,{"inputs":[{"name":"error"},{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",140,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",140,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",140,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",140,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",140,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"fmt","","",161,{"inputs":[{"name":"repr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",140,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",140,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"read","alloc::boxed","",46,null],[11,"read_to_end","","",46,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",46,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",46,null],[11,"write","","",46,null],[11,"flush","","",46,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","","",46,null],[11,"write_fmt","","",46,{"inputs":[{"name":"box"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",46,{"inputs":[{"name":"box"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",46,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"consume","","",46,null],[11,"read_until","","",46,{"inputs":[{"name":"box"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",46,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","collections::vec","",48,null],[11,"write_all","","",48,null],[11,"flush","","",48,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"new","std::io::lazy","",162,null],[11,"get","","",162,{"inputs":[{"name":"lazy"}],"output":{"name":"option"}}],[11,"read","std::io::util","",163,null],[11,"fill_buf","","",163,{"inputs":[{"name":"empty"}],"output":{"name":"result"}}],[11,"consume","","",163,null],[11,"read","","",164,null],[11,"write","","",165,null],[11,"flush","","",165,{"inputs":[{"name":"sink"}],"output":{"name":"result"}}],[11,"read","std::io::stdio","",166,null],[11,"write","","",167,null],[11,"flush","","",167,{"inputs":[{"name":"stdoutraw"}],"output":{"name":"result"}}],[11,"write","","",168,null],[11,"flush","","",168,{"inputs":[{"name":"stderrraw"}],"output":{"name":"result"}}],[11,"write","","",169,null],[11,"flush","","",169,{"inputs":[{"name":"maybe"}],"output":{"name":"result"}}],[11,"read","","",169,null],[11,"lock","","Locks this handle to the standard input stream, returning a readable\nguard.",170,{"inputs":[{"name":"stdin"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",170,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",170,null],[11,"read_to_end","","",170,{"inputs":[{"name":"stdin"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",170,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",170,null],[11,"read","","",171,null],[11,"read_to_end","","",171,{"inputs":[{"name":"stdinlock"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",171,{"inputs":[{"name":"stdinlock"}],"output":{"name":"result"}}],[11,"consume","","",171,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",172,{"inputs":[{"name":"stdout"}],"output":{"name":"stdoutlock"}}],[11,"write","","",172,null],[11,"flush","","",172,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write_all","","",172,null],[11,"write_fmt","","",172,{"inputs":[{"name":"stdout"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",173,null],[11,"flush","","",173,{"inputs":[{"name":"stdoutlock"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",174,{"inputs":[{"name":"stderr"}],"output":{"name":"stderrlock"}}],[11,"write","","",174,null],[11,"flush","","",174,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write_all","","",174,null],[11,"write_fmt","","",174,{"inputs":[{"name":"stderr"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",175,null],[11,"flush","","",175,{"inputs":[{"name":"stderrlock"}],"output":{"name":"result"}}],[11,"fmt","std::io","",176,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",176,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",176,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",177,null],[11,"flush","","",177,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",178,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",179,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",179,null],[11,"fill_buf","","",179,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",179,null],[11,"read","","",180,null],[11,"next","","",181,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",182,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",183,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",182,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",182,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",182,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",184,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",185,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"cmp","std::net::ip","",186,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",186,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",186,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",186,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",186,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",186,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",186,null],[11,"fmt","","",186,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",186,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"clone","","",186,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",187,{"inputs":[{"name":"ipv6multicastscope"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",187,null],[11,"clone","","",187,{"inputs":[{"name":"ipv6multicastscope"}],"output":{"name":"ipv6multicastscope"}}],[11,"eq","","",187,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"ne","","",187,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"fmt","","",186,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",60,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",60,null],[11,"partial_cmp","","",60,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"cmp","","",60,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","",60,{"inputs":[{"name":"ipv4addr"},{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",188,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",188,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address ::.",188,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1).",188,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",188,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",188,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",188,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",188,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",188,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",188,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address.",188,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",188,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"fmt","","",188,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",188,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",188,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",188,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",188,null],[11,"partial_cmp","","",188,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"cmp","","",188,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"fmt","std::net::addr","",189,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",189,null],[11,"eq","","",189,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"clone","","",189,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",189,{"inputs":[{"name":"socketaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",189,{"inputs":[{"name":"socketaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Returns the port number associated with this socket address.",189,{"inputs":[{"name":"socketaddr"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",190,{"inputs":[{"name":"socketaddrv4"},{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",190,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"ipv4addr"}}],[11,"port","","Returns the port number associated with this socket address.",190,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",191,{"inputs":[{"name":"socketaddrv6"},{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",191,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"ipv6addr"}}],[11,"port","","Returns the port number associated with this socket address.",191,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u16"}}],[11,"flowinfo","","Returns scope ID associated with this address, corresponding to the\n`sin6_flowinfo` field in C.",191,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"scope_id","","Returns scope ID associated with this address, corresponding to the\n`sin6_scope_id` field in C.",191,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"fmt","","",189,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",190,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",190,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",191,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",191,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",190,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",191,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",190,{"inputs":[{"name":"socketaddrv4"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",191,{"inputs":[{"name":"socketaddrv6"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",190,null],[11,"hash","","",191,null],[11,"to_socket_addrs","","",189,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",190,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",191,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"result"}}],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",192,{"inputs":[{"name":"tcpstream"},{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",192,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",192,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",192,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",192,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",192,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",192,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",192,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",192,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",192,null],[11,"read_to_end","","",192,{"inputs":[{"name":"tcpstream"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",192,null],[11,"flush","","",192,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",192,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",193,{"inputs":[{"name":"tcplistener"},{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",193,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",193,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",193,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",193,{"inputs":[{"name":"tcplistener"}],"output":{"name":"incoming"}}],[11,"next","","",194,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"fmt","","",193,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",195,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",195,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",195,null],[11,"local_addr","","Returns the socket address that this socket was created from.",195,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",195,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",195,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",195,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",195,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",195,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","std::net::ip","",186,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",60,{"inputs":[{"name":"ipv4addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",188,{"inputs":[{"name":"ipv6addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",190,{"inputs":[{"name":"socketaddrv4"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",191,{"inputs":[{"name":"socketaddrv6"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",189,{"inputs":[{"name":"socketaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",196,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",196,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",196,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"addrparseerror"}}],[11,"fmt","","",196,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",196,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",196,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"str"}}],[11,"fmt","std::net","",197,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",197,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",197,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",197,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"next","","",198,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"clone","std::os::linux::raw::arch","",199,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"as_raw_fd","std::fs","",148,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",148,{"inputs":[{"name":"file"},{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",148,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::tcp","",192,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",193,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::udp","",195,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","std::net::tcp","",192,{"inputs":[{"name":"tcpstream"},{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",193,{"inputs":[{"name":"tcplistener"},{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",195,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",192,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",193,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"into_raw_fd","std::net::udp","",195,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_vec","std::ffi::os_str","",141,{"inputs":[{"name":"osstring"},{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",141,{"inputs":[{"name":"osstring"}],"output":{"name":"vec"}}],[11,"from_bytes","","",142,null],[11,"as_bytes","","",142,null],[11,"mode","std::fs","",146,{"inputs":[{"name":"permissions"}],"output":{"name":"u32"}}],[11,"set_mode","","",146,null],[11,"from_mode","","",146,{"inputs":[{"name":"permissions"},{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",145,{"inputs":[{"name":"openoptions"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"dev","","",144,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"ino","","",144,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"mode","","",144,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"nlink","","",144,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"uid","","",144,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"gid","","",144,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"rdev","","",144,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"size","","",144,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime","","",144,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",144,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime","","",144,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",144,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime","","",144,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",144,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blksize","","",144,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blocks","","",144,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"is_block_device","","",147,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_char_device","","",147,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_fifo","","",147,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_socket","","",147,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ino","","",150,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"mode","","",153,{"inputs":[{"name":"dirbuilder"},{"name":"u32"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",200,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",200,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"session_leader","","",200,{"inputs":[{"name":"command"},{"name":"bool"}],"output":{"name":"command"}}],[11,"signal","","",201,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"from_raw_fd","","",202,{"inputs":[{"name":"stdio"},{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",203,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",204,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",205,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",203,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",204,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",205,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"eq","std::path","",206,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",206,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",206,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",206,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",206,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",206,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",206,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"hash","","",206,null],[11,"fmt","","",206,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",206,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",206,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"fmt","","",207,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",207,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",207,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",207,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",207,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",207,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",207,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",207,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",207,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",208,{"inputs":[{"name":"prefixcomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",208,null],[11,"clone","","",208,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefixcomponent"}}],[11,"kind","","The parsed prefix data.",208,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",208,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"osstr"}}],[11,"eq","","",208,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",208,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",208,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"fmt","","",209,{"inputs":[{"name":"component"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",209,null],[11,"cmp","","",209,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",209,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",209,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",209,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",209,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",209,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"eq","","",209,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",209,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"clone","","",209,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice",209,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"as_ref","","",209,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"clone","","",210,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"clone","","",211,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",210,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"peek","","Examine the next component without consuming it.",210,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"as_ref","","",210,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"as_ref","","",210,{"inputs":[{"name":"components"}],"output":{"name":"osstr"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",211,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",211,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",211,{"inputs":[{"name":"iter"}],"output":{"name":"osstr"}}],[11,"next","","",211,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",211,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",210,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"next_back","","",210,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"eq","","",210,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",210,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",210,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"hash","","",212,null],[11,"clone","","",212,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",212,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",212,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",212,null],[11,"pop","","Truncate `self` to `self.parent()`.",212,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",212,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",212,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",212,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",212,{"inputs":[{"name":"pathbuf"},{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",212,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",212,{"inputs":[{"name":"pathbuf"},{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",212,{"inputs":[{"name":"pathbuf"},{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",212,null],[11,"fmt","","",212,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",152,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",152,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `Path` is valid unicode.",152,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a `Cow<str>`.",152,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",152,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",152,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",152,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"prefix","","Returns the *prefix* of a path, if any.",152,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",152,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",152,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",152,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",152,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"option"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",152,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",152,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",152,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",152,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",152,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",152,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",152,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",152,{"inputs":[{"name":"path"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path's components viewed as `OsStr` slices.",152,{"inputs":[{"name":"path"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",152,{"inputs":[{"name":"path"}],"output":{"name":"display"}}],[11,"metadata","","Gets information on the file, directory, etc at this path.",152,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","Gets information on the file, directory, etc at this path.",152,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","Returns the canonical form of a path, normalizing all components and\neliminate all symlinks.",152,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","Reads the symlink at this path.",152,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","Reads the directory at this path.",152,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","Boolean value indicator whether the underlying file exists on the local\nfilesystem. Returns false in exactly the cases where `fs::stat` fails.",152,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","Whether the underlying implementation (be it a file path, or something\nelse) points at a \"regular file\" on the FS. Will return false for paths\nto non-existent locations or directories or other non-regular files\n(named pipes, etc). Follows links when making this determination.",152,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","Whether the underlying implementation (be it a file path, or something\nelse) is pointing at a directory in the underlying FS. Will return\nfalse for paths to non-existent locations or if the item is not a\ndirectory (eg files, named pipes, etc). Follows links when making this\ndetermination.",152,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"deref","","",212,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"borrow","","",212,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"into_cow","","",212,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","","",152,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"eq","","",212,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",212,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",212,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",212,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"into","","",212,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"hash","","",152,null],[11,"as_ref","","",152,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"fmt","","",152,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",213,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",213,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",152,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",152,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",152,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",152,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",142,{"inputs":[{"name":"osstr"}],"output":{"name":"path"}}],[11,"as_ref","","",141,{"inputs":[{"name":"osstring"}],"output":{"name":"path"}}],[11,"as_ref","collections::string","",143,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",212,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"write","std::process","",203,null],[11,"flush","","",203,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"read","","",204,null],[11,"read","","",205,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",200,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",200,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",200,null],[11,"env","","Inserts or updates an environment variable mapping.",200,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",200,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",200,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",200,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).",200,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).",200,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).",200,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",200,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",200,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",200,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",200,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",214,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",214,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",214,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",202,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",202,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",202,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"fmt","","",201,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",201,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",201,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",201,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",201,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",201,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",201,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",215,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",215,{"inputs":[{"name":"child"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",215,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `Output`\ninstance.",215,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"clone","std::sync::mpsc::blocking","",216,{"inputs":[{"name":"signaltoken"}],"output":{"name":"signaltoken"}}],[11,"signal","","",216,{"inputs":[{"name":"signaltoken"}],"output":{"name":"bool"}}],[11,"cast_to_usize","","Convert to an unsafe usize value. Useful for storing in a pipe's state\nflag.",216,{"inputs":[{"name":"signaltoken"}],"output":{"name":"usize"}}],[11,"cast_from_usize","","Convert from an unsafe usize value. Useful for retrieving a pipe's state\nflag.",216,{"inputs":[{"name":"signaltoken"},{"name":"usize"}],"output":{"name":"signaltoken"}}],[11,"wait","","",217,null],[11,"new","std::sync::mpsc::oneshot","",218,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",218,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"sent","","",218,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"recv","","",218,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",218,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"upgrade","","",218,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"drop_chan","","",218,null],[11,"drop_port","","",218,null],[11,"can_recv","","",218,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",218,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",218,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop","","",218,null],[11,"eq","std::sync::mpsc::select","",219,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"ne","","",219,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new selection structure. This set is initially empty.",220,{"inputs":[{"name":"select"}],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",220,{"inputs":[{"name":"select"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",220,{"inputs":[{"name":"select"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",221,{"inputs":[{"name":"handle"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",221,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",221,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",221,null],[11,"drop","","",220,null],[11,"drop","","",221,null],[11,"next","","",222,{"inputs":[{"name":"packets"}],"output":{"name":"option"}}],[11,"new","std::sync::mpsc::shared","",223,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"postinit_lock","","",223,{"inputs":[{"name":"packet"}],"output":{"name":"mutexguard"}}],[11,"inherit_blocker","","",223,null],[11,"send","","",223,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",223,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",223,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",223,null],[11,"drop_chan","","",223,null],[11,"drop_port","","",223,null],[11,"can_recv","","",223,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",223,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",223,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"drop","","",223,null],[11,"new","std::sync::mpsc::stream","",224,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",224,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"upgrade","","",224,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"recv","","",224,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",224,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop_chan","","",224,null],[11,"drop_port","","",224,null],[11,"can_recv","","",224,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",224,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",224,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",224,null],[11,"fmt","std::sync::mpsc::sync","",225,{"inputs":[{"name":"failure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",226,{"inputs":[{"name":"packet"},{"name":"usize"}],"output":{"name":"packet"}}],[11,"send","","",226,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",226,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",226,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",226,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",226,null],[11,"drop_chan","","",226,null],[11,"drop_port","","",226,null],[11,"can_recv","","",226,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",226,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",226,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"drop","","",226,null],[11,"new","std::sync::mpsc::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",227,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue.",227,null],[11,"pop","","Pops some data from this queue.",227,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",227,null],[11,"new","std::sync::mpsc::spsc_queue","Creates a new queue.",228,{"inputs":[{"name":"queue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",228,null],[11,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",228,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",228,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"drop","","",228,null],[11,"clone","std::sync::mpsc","",229,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"eq","","",229,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",229,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",230,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",230,{"inputs":[{"name":"recverror"}],"output":{"name":"recverror"}}],[11,"eq","","",230,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"ne","","",230,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"fmt","","",231,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",231,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"tryrecverror"}}],[11,"eq","","",231,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",232,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"eq","","",232,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",232,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",233,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",233,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"drop","","",233,null],[11,"send","","Sends a value on this synchronous channel.",234,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",234,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",234,{"inputs":[{"name":"syncsender"}],"output":{"name":"syncsender"}}],[11,"drop","","",234,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",235,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",235,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",235,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[11,"next","","",236,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",237,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",235,{"inputs":[{"name":"receiver"}],"output":{"name":"intoiter"}}],[11,"drop","","",235,null],[11,"fmt","","",229,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",229,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",229,{"inputs":[{"name":"senderror"}],"output":{"name":"str"}}],[11,"cause","","",229,{"inputs":[{"name":"senderror"}],"output":{"name":"option"}}],[11,"fmt","","",232,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",232,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",232,{"inputs":[{"name":"trysenderror"}],"output":{"name":"str"}}],[11,"cause","","",232,{"inputs":[{"name":"trysenderror"}],"output":{"name":"option"}}],[11,"fmt","","",230,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",230,{"inputs":[{"name":"recverror"}],"output":{"name":"str"}}],[11,"cause","","",230,{"inputs":[{"name":"recverror"}],"output":{"name":"option"}}],[11,"fmt","","",231,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",231,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"str"}}],[11,"cause","","",231,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"option"}}],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",238,{"inputs":[{"name":"barrier"},{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads has rendezvoused here.",238,{"inputs":[{"name":"barrier"}],"output":{"name":"barrierwaitresult"}}],[11,"is_leader","","Returns whether this thread from `wait` is the \"leader thread\".",239,{"inputs":[{"name":"barrierwaitresult"}],"output":{"name":"bool"}}],[11,"clone","std::sync::condvar","",240,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"waittimeoutresult"}}],[11,"eq","","",240,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",240,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"fmt","","",240,{"inputs":[{"name":"waittimeoutresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",240,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",241,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",241,{"inputs":[{"name":"condvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",241,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",241,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",241,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",241,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",241,null],[11,"drop","","",241,null],[11,"new","","Creates a new condition variable",242,{"inputs":[{"name":"staticcondvar"}],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",242,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",242,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",242,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",242,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",242,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",242,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",242,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",243,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",243,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",243,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",243,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",243,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",243,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"drop","","",243,null],[11,"fmt","","",243,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",244,{"inputs":[{"name":"staticmutex"}],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",244,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",244,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates resources associated with this static mutex.",244,null],[11,"deref","","",245,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",245,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",245,null],[11,"new","std::sync::once","Creates a new `Once` value.",246,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",246,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock<T>` which is unlocked.",247,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",247,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",247,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",247,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",247,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",247,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",247,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",247,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"drop","","",247,null],[11,"fmt","","",247,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new rwlock.",248,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",248,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this lock with shared read access.",248,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",248,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",248,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates all resources associated with this static lock.",248,null],[11,"deref","","",249,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",250,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",250,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",249,null],[11,"drop","","",250,null],[11,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",251,{"inputs":[{"name":"semaphore"},{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",251,null],[11,"release","","Release a resource from this semaphore.",251,null],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",251,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",252,null],[11,"default","core::sync::atomic","",253,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",254,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",255,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",256,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",257,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",253,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",253,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",253,null],[11,"swap","","Stores a value into the bool, returning the old value.",253,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",253,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",253,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",253,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",253,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",253,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",254,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",254,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",254,null],[11,"swap","","Stores a value into the isize, returning the old value.",254,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",254,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",254,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",254,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",254,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",254,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",254,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",255,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",255,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",255,null],[11,"swap","","Stores a value into the usize, returning the old value.",255,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",255,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",255,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",255,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",255,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",255,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",255,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",256,null],[11,"load","","Loads a value from the pointer.",256,null],[11,"store","","Stores a value into the pointer.",256,null],[11,"swap","","Stores a value into the pointer, returning the old value.",256,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",256,null],[11,"fmt","","",255,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",254,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",253,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",256,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::time::duration","",258,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",258,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",258,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",258,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",258,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",258,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",258,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",258,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",258,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",258,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",258,{"inputs":[{"name":"duration"},{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",258,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",258,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",258,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",258,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",258,{"inputs":[{"name":"duration"}],"output":{"name":"u32"}}],[11,"add","","",258,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",258,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",258,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div","","",258,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"new","std::sys_common::condvar","Creates a new condition variable for use.",259,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","Signals one waiter on this condition variable to wake up.",259,null],[11,"notify_all","","Awakens all current waiters on this condition variable.",259,null],[11,"wait","","Waits for a signal on the specified mutex.",259,null],[11,"wait_timeout","","Waits for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",259,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","Deallocates all resources associated with this condition variable.",259,null],[11,"clone","std::sys_common::dwarf::eh","",260,{"inputs":[{"name":"ehcontext"}],"output":{"name":"ehcontext"}}],[11,"new","std::sys_common::dwarf","",261,null],[11,"read","","",261,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"t"}}],[11,"read_uleb128","","",261,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"u64"}}],[11,"read_sleb128","","",261,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"i64"}}],[11,"clone","std::sys_common::libunwind","",262,{"inputs":[{"name":"_unwind_action"}],"output":{"name":"_unwind_action"}}],[11,"clone","","",263,{"inputs":[{"name":"_unwind_reason_code"}],"output":{"name":"_unwind_reason_code"}}],[11,"new","std::sys_common::mutex","Creates a new mutex for use.",264,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","Locks the mutex blocking the current thread until it is available.",264,null],[11,"try_lock","","Attempts to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",264,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","Unlocks the mutex.",264,null],[11,"destroy","","Deallocates all resources associated with this mutex.",264,null],[11,"next","std::sys_common::net","",265,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"drop","","",265,null],[11,"connect","","",266,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",266,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"into_socket","","",266,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"set_read_timeout","","",266,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",266,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",266,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","",266,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",266,null],[11,"write","","",266,null],[11,"peer_addr","","",266,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","",266,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",266,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"duplicate","","",266,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",266,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",267,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",267,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"into_socket","","",267,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"socket_addr","","",267,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",267,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"duplicate","","",267,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"fmt","","",267,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",268,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",268,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"into_socket","","",268,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"socket_addr","","",268,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",268,null],[11,"send_to","","",268,null],[11,"duplicate","","",268,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",268,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",268,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",268,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","",268,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",268,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::poison","",269,{"inputs":[{"name":"flag"}],"output":{"name":"flag"}}],[11,"borrow","","",269,{"inputs":[{"name":"flag"}],"output":{"name":"result"}}],[11,"done","","",269,null],[11,"get","","",269,{"inputs":[{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","","",270,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",270,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",270,{"inputs":[{"name":"poisonerror"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",270,{"inputs":[{"name":"poisonerror"},{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",270,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",270,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",270,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"from","","",271,{"inputs":[{"name":"trylockerror"},{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",271,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",271,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",271,{"inputs":[{"name":"trylockerror"}],"output":{"name":"str"}}],[11,"cause","","",271,{"inputs":[{"name":"trylockerror"}],"output":{"name":"option"}}],[11,"new","std::sys_common::remutex","Creates a new reentrant mutex in an unlocked state.",272,{"inputs":[{"name":"reentrantmutex"},{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",272,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",272,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"drop","","",272,null],[11,"fmt","","",272,{"inputs":[{"name":"reentrantmutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",273,{"inputs":[{"name":"reentrantmutexguard"}],"output":{"name":"t"}}],[11,"drop","","",273,null],[11,"new","std::sys_common::rwlock","Creates a new reader-writer lock for use.",274,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","Acquires shared access to the underlying lock, blocking the current\nthread to do so.",274,null],[11,"try_read","","Attempts to acquire shared access to this lock, returning whether it\nsucceeded or not.",274,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","Acquires write access to the underlying lock, blocking the current thread\nto do so.",274,null],[11,"try_write","","Attempts to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",274,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","Unlocks previously acquired shared access to this lock.",274,null],[11,"write_unlock","","Unlocks previously acquired exclusive access to this lock.",274,null],[11,"destroy","","Destroys OS-related resources with this RWLock.",274,null],[11,"new","std::sys_common::thread_local","",275,{"inputs":[{"name":"statickey"},{"name":"option"}],"output":{"name":"statickey"}}],[11,"get","","Gets the value associated with this TLS key",275,null],[11,"set","","Sets this TLS key to a new value.",275,null],[11,"destroy","","Deallocates this OS TLS key.",275,null],[11,"new","","Creates a new managed OS TLS key.",276,{"inputs":[{"name":"key"},{"name":"option"}],"output":{"name":"key"}}],[11,"get","","See StaticKey::get",276,null],[11,"set","","See StaticKey::set",276,null],[11,"drop","","",276,null],[11,"clone","std::sys_common::wtf8","",277,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"partial_cmp","","",277,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",277,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",277,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",277,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",277,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",277,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"eq","","",277,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",277,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",277,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u32_unchecked","","Unsafely creates a new `CodePoint` without checking the value.",277,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"codepoint"}}],[11,"from_u32","","Creates a new `CodePoint` if the value is a valid code point.",277,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_char","","Creates a new `CodePoint` from a `char`.",277,{"inputs":[{"name":"codepoint"},{"name":"char"}],"output":{"name":"codepoint"}}],[11,"to_u32","","Returns the numeric value of the code point.",277,{"inputs":[{"name":"codepoint"}],"output":{"name":"u32"}}],[11,"to_char","","Optionally returns a Unicode scalar value for the code point.",277,{"inputs":[{"name":"codepoint"}],"output":{"name":"option"}}],[11,"to_char_lossy","","Returns a Unicode scalar value for the code point.",277,{"inputs":[{"name":"codepoint"}],"output":{"name":"char"}}],[11,"clone","","",278,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"partial_cmp","","",278,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"option"}}],[11,"lt","","",278,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"le","","",278,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"gt","","",278,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ge","","",278,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"cmp","","",278,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"ordering"}}],[11,"eq","","",278,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ne","","",278,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"from_str","","Creates a WTF-8 slice from a UTF-8 `&str` slice.",279,{"inputs":[{"name":"wtf8"},{"name":"str"}],"output":{"name":"wtf8"}}],[11,"len","","Returns the length, in WTF-8 bytes.",279,{"inputs":[{"name":"wtf8"}],"output":{"name":"usize"}}],[11,"ascii_byte_at","","Returns the code point at `position` if it is in the ASCII range,\nor `b'\\xFF' otherwise.",279,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"code_points","","Returns an iterator for the string’s code points.",279,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8codepoints"}}],[11,"as_str","","Tries to convert the string to UTF-8 and return a `&str` slice.",279,{"inputs":[{"name":"wtf8"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Lossily converts the string to UTF-8.\nReturns a UTF-8 `&str` slice if the contents are well-formed in UTF-8.",279,{"inputs":[{"name":"wtf8"}],"output":{"name":"cow"}}],[11,"encode_wide","","Converts the WTF-8 string to potentially ill-formed UTF-16\nand return an iterator of 16-bit code units.",279,{"inputs":[{"name":"wtf8"}],"output":{"name":"encodewide"}}],[11,"deref","","",278,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"fmt","","",278,{"inputs":[{"name":"wtf8buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new, empty WTF-8 string.",278,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"with_capacity","","Creates a new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",278,{"inputs":[{"name":"wtf8buf"},{"name":"usize"}],"output":{"name":"wtf8buf"}}],[11,"from_string","","Creates a WTF-8 string from a UTF-8 `String`.",278,{"inputs":[{"name":"wtf8buf"},{"name":"string"}],"output":{"name":"wtf8buf"}}],[11,"from_str","","Creates a WTF-8 string from a UTF-8 `&str` slice.",278,{"inputs":[{"name":"wtf8buf"},{"name":"str"}],"output":{"name":"wtf8buf"}}],[11,"from_wide","","Creates a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",278,null],[11,"as_slice","","",278,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",278,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",278,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"usize"}}],[11,"push_str","","Append a UTF-8 slice at the end of the string.",278,null],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",278,null],[11,"push_char","","Append a Unicode scalar value at the end of the string.",278,null],[11,"push","","Append a code point at the end of the string.",278,null],[11,"truncate","","Shortens a string to the specified length.",278,null],[11,"into_string","","Consumes the WTF-8 string and tries to convert it to UTF-8.",278,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"result"}}],[11,"into_string_lossy","","Consumes the WTF-8 string and converts it lossily to UTF-8.",278,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"string"}}],[11,"from_iter","","",278,{"inputs":[{"name":"wtf8buf"},{"name":"t"}],"output":{"name":"wtf8buf"}}],[11,"extend","","",278,null],[11,"partial_cmp","","",279,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"option"}}],[11,"lt","","",279,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"le","","",279,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"gt","","",279,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ge","","",279,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"eq","","",279,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ne","","",279,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"cmp","","",279,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"ordering"}}],[11,"fmt","","",279,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",279,{"inputs":[{"name":"wtf8"},{"name":"range"}],"output":{"name":"wtf8"}}],[11,"index","","",279,{"inputs":[{"name":"wtf8"},{"name":"rangefrom"}],"output":{"name":"wtf8"}}],[11,"index","","",279,{"inputs":[{"name":"wtf8"},{"name":"rangeto"}],"output":{"name":"wtf8"}}],[11,"index","","",279,{"inputs":[{"name":"wtf8"},{"name":"rangefull"}],"output":{"name":"wtf8"}}],[11,"clone","","",280,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"wtf8codepoints"}}],[11,"next","","",280,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"option"}}],[11,"size_hint","","",280,null],[11,"clone","","",281,{"inputs":[{"name":"encodewide"}],"output":{"name":"encodewide"}}],[11,"next","","",281,{"inputs":[{"name":"encodewide"}],"output":{"name":"option"}}],[11,"size_hint","","",281,null],[11,"hash","","",277,null],[11,"hash","","",278,null],[11,"hash","","",279,null],[11,"is_ascii","","",279,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",279,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"to_ascii_lowercase","","",279,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"eq_ignore_ascii_case","","",279,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",279,null],[11,"make_ascii_lowercase","","",279,null],[11,"new","std::sys::condvar","",282,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","",282,null],[11,"notify_all","","",282,null],[11,"wait","","",282,null],[11,"wait_timeout","","",282,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","",282,null],[11,"new","std::sys::fd","",283,{"inputs":[{"name":"filedesc"},{"name":"i32"}],"output":{"name":"filedesc"}}],[11,"raw","","",283,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"into_raw","","Extracts the actual filedescriptor without closing it.",283,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"read","","",283,null],[11,"write","","",283,null],[11,"set_cloexec","","",283,null],[11,"drop","","",283,null],[11,"clone","std::sys::fs","",284,{"inputs":[{"name":"fileattr"}],"output":{"name":"fileattr"}}],[11,"clone","","",285,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",286,{"inputs":[{"name":"filepermissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",286,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"ne","","",286,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"clone","","",286,{"inputs":[{"name":"filepermissions"}],"output":{"name":"filepermissions"}}],[11,"hash","","",287,null],[11,"eq","","",287,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",287,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",287,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"size","","",284,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"perm","","",284,{"inputs":[{"name":"fileattr"}],"output":{"name":"filepermissions"}}],[11,"file_type","","",284,{"inputs":[{"name":"fileattr"}],"output":{"name":"filetype"}}],[11,"as_raw_stat","std::fs","",144,{"inputs":[{"name":"metadata"}],"output":{"name":"stat"}}],[11,"readonly","std::sys::fs","",286,{"inputs":[{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","",286,null],[11,"mode","","",286,{"inputs":[{"name":"filepermissions"}],"output":{"name":"u32"}}],[11,"is_dir","","",287,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","",287,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","",287,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is","","",287,{"inputs":[{"name":"filetype"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"next","","",288,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"drop","","",289,null],[11,"path","","",290,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"file_name","","",290,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"metadata","","",290,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","",290,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"ino","","",290,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"new","","",285,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","",285,null],[11,"write","","",285,null],[11,"append","","",285,null],[11,"truncate","","",285,null],[11,"create","","",285,null],[11,"mode","","",285,null],[11,"open","","",291,{"inputs":[{"name":"file"},{"name":"path"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"open_c","","",291,{"inputs":[{"name":"file"},{"name":"cstr"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"file_attr","","",291,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fsync","","",291,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","",291,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","",291,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"read","","",291,null],[11,"write","","",291,null],[11,"flush","","",291,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",291,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fd","","",291,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",291,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"new","","",292,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"mkdir","","",292,{"inputs":[{"name":"dirbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"set_mode","","",292,null],[11,"fmt","","",291,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::mutex","",293,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","",293,null],[11,"unlock","","",293,null],[11,"try_lock","","",293,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"destroy","","",293,null],[11,"uninitialized","","",294,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"reentrantmutex"}}],[11,"init","","",294,null],[11,"lock","","",294,null],[11,"try_lock","","",294,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"bool"}}],[11,"unlock","","",294,null],[11,"destroy","","",294,null],[11,"new","std::sys::net","",295,{"inputs":[{"name":"socket"},{"name":"socketaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","",295,null],[11,"duplicate","","",295,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"read","","",295,null],[11,"set_timeout","","",295,{"inputs":[{"name":"socket"},{"name":"option"},{"name":"i32"}],"output":{"name":"result"}}],[11,"timeout","","",295,{"inputs":[{"name":"socket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"next","std::sys::os","",296,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",296,null],[11,"fmt","","",297,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",297,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",298,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",298,null],[11,"len","","",298,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",299,{"inputs":[{"name":"env"}],"output":{"name":"option"}}],[11,"size_hint","","",299,null],[11,"hash","std::sys::os_str","",300,null],[11,"clone","","",300,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"fmt","","",301,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","",300,{"inputs":[{"name":"buf"},{"name":"string"}],"output":{"name":"buf"}}],[11,"as_slice","","",300,{"inputs":[{"name":"buf"}],"output":{"name":"slice"}}],[11,"into_string","","",300,{"inputs":[{"name":"buf"}],"output":{"name":"result"}}],[11,"push_slice","","",300,null],[11,"from_str","","",301,{"inputs":[{"name":"slice"},{"name":"str"}],"output":{"name":"slice"}}],[11,"to_str","","",301,{"inputs":[{"name":"slice"}],"output":{"name":"option"}}],[11,"to_string_lossy","","",301,{"inputs":[{"name":"slice"}],"output":{"name":"cow"}}],[11,"to_owned","","",301,{"inputs":[{"name":"slice"}],"output":{"name":"buf"}}],[11,"from_fd","std::sys::pipe","",302,{"inputs":[{"name":"anonpipe"},{"name":"i32"}],"output":{"name":"anonpipe"}}],[11,"read","","",302,null],[11,"write","","",302,null],[11,"raw","","",302,{"inputs":[{"name":"anonpipe"}],"output":{"name":"i32"}}],[11,"fd","","",302,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",302,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"clone","std::sys::process","",303,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"new","","",303,{"inputs":[{"name":"command"},{"name":"osstr"}],"output":{"name":"command"}}],[11,"arg","","",303,null],[11,"args","","",303,null],[11,"env","","",303,null],[11,"env_remove","","",303,null],[11,"env_clear","","",303,null],[11,"cwd","","",303,null],[11,"fmt","","",304,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",304,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",304,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",304,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","",304,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",304,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",304,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","",305,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"spawn","","",305,{"inputs":[{"name":"process"},{"name":"command"},{"name":"stdio"},{"name":"stdio"},{"name":"stdio"}],"output":{"name":"result"}}],[11,"id","","",305,{"inputs":[{"name":"process"}],"output":{"name":"u32"}}],[11,"wait","","",305,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"try_wait","","",305,{"inputs":[{"name":"process"}],"output":{"name":"option"}}],[11,"new","std::sys::rwlock","",306,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","",306,null],[11,"try_read","","",306,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","",306,null],[11,"try_write","","",306,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","",306,null],[11,"write_unlock","","",306,null],[11,"destroy","","",306,null],[11,"new","std::sys::stack_overflow","",307,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"drop","","",307,null],[11,"new","std::sys::thread","",308,{"inputs":[{"name":"thread"},{"name":"usize"},{"name":"box"}],"output":{"name":"result"}}],[11,"yield_now","","",308,null],[11,"set_name","","",308,null],[11,"sleep","","",308,null],[11,"join","","",308,null],[11,"drop","","",308,null],[11,"now","std::sys::time::inner","",309,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"new","std::sys::stdio","",310,{"inputs":[{"name":"stdin"}],"output":{"name":"result"}}],[11,"read","","",310,null],[11,"new","","",311,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write","","",311,null],[11,"new","","",312,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write","","",312,null],[11,"write","","",312,null],[11,"flush","","",312,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"new","std::rand::os::imp","Create a new `OsRng`.",313,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",313,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",313,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",313,null],[11,"new","std::rand::reader","Create a new `ReaderRng` from a `Read`.",314,{"inputs":[{"name":"readerrng"},{"name":"r"}],"output":{"name":"readerrng"}}],[11,"next_u32","","",314,{"inputs":[{"name":"readerrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",314,{"inputs":[{"name":"readerrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",314,null],[11,"clone","std::rand","",315,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",315,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",315,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",315,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",315,null],[11,"from_seed","","",315,null],[11,"reseed","","",316,null],[11,"clone","","",317,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",317,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",317,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",317,null],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",318,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",318,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",318,null],[11,"finish","","",318,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",318,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",318,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"clone","collections::str","",319,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",319,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",319,null],[11,"borrow","collections::string","",143,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",320,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",320,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",320,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",320,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",321,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",322,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",321,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",321,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",321,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",323,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",323,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",323,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",323,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",323,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",323,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",323,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",323,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",324,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",324,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",324,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",324,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",324,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",324,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",324,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",324,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",325,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",325,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",325,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",325,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",325,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",325,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",325,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",325,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",326,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",326,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",327,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",327,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",328,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",328,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",326,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",326,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",326,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",326,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",326,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",329,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",329,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",330,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",330,null],[11,"matching","","",330,null],[11,"use_early_reject","","",331,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",331,null],[11,"matching","","",331,null],[11,"eq","core::ops","",332,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",332,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",332,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",332,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",333,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",333,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",333,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",333,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",334,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",334,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",334,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",334,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",335,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",335,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",335,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",335,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",336,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",336,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",336,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",336,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",336,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",336,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",336,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"clone","alloc::boxed","",337,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",338,null],[11,"make_place","","",338,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",338,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",46,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",337,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",338,null],[11,"new","","Allocates memory on the heap and then moves `x` into it.",46,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",46,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",46,null],[11,"default","","",46,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",46,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",46,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",46,null],[11,"clone","","",46,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",46,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",46,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",46,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",46,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",46,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",46,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",46,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",46,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",46,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",46,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",46,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",46,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",46,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"next_back","","",46,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",46,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",46,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",46,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",46,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",46,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",46,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",46,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"clone","core::fmt::rt::v1","",339,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",340,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",341,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",341,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",341,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",342,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",343,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"hash","core::marker","",344,null],[11,"eq","","",344,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",344,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",344,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",344,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",344,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"new","core::ptr","Creates a new `Unique`.",345,null],[11,"get","","Dereferences the content.",345,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",345,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",345,null],[11,"fmt","","",345,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",346,null],[11,"clone","","",346,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",346,null],[11,"fmt","","",346,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",347,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",347,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",347,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",347,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",347,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",347,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",347,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",347,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_unique","","",347,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",347,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",347,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",347,null],[11,"clone","","Makes a clone of the `Rc<T>`.",347,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",347,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",347,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",347,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",347,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",347,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",347,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",347,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",347,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",347,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",347,null],[11,"fmt","","",347,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",347,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",347,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",348,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",348,null],[11,"clone","","Makes a clone of the `Weak<T>`.",348,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",348,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",347,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",347,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"fmt","core::simd","",349,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",349,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",350,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",350,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",351,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",351,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",352,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",352,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",353,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",353,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",354,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",354,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",355,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",355,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",356,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",356,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",357,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",357,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",358,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",358,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"add","","",353,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"add","","",354,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"add","","",355,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"add","","",356,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"add","","",349,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"add","","",350,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"add","","",351,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"add","","",352,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"add","","",357,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"add","","",358,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",353,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"sub","","",354,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"sub","","",355,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"sub","","",356,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"sub","","",349,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"sub","","",350,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"sub","","",351,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"sub","","",352,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"sub","","",357,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",358,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",353,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"mul","","",354,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"mul","","",355,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"mul","","",356,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"mul","","",349,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"mul","","",350,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"mul","","",351,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"mul","","",352,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"mul","","",357,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",358,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",357,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",358,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"shl","","",353,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shl","","",354,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shl","","",355,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shl","","",356,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shl","","",349,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shl","","",350,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shl","","",351,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shl","","",352,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"shr","","",353,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shr","","",354,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shr","","",355,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shr","","",356,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shr","","",349,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shr","","",350,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shr","","",351,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shr","","",352,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitand","","",353,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitand","","",354,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitand","","",355,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitand","","",356,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitand","","",349,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitand","","",350,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitand","","",351,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitand","","",352,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitor","","",353,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitor","","",354,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitor","","",355,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitor","","",356,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitor","","",349,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitor","","",350,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitor","","",351,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitor","","",352,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitxor","","",353,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitxor","","",354,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitxor","","",355,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitxor","","",356,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitxor","","",349,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitxor","","",350,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitxor","","",351,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitxor","","",352,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"next","rustc_unicode::char","",359,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",360,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"next","","",361,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"clone","","",362,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",362,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",362,null],[11,"clone","core::raw","",363,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",364,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"cmp","collections::string","",143,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",143,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",143,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",143,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",143,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",143,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",143,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",143,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",143,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a `String`, including invalid characters.",143,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",143,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",143,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",143,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",143,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",143,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",143,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Pushes the given string onto this string buffer.",143,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",143,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",143,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",143,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",143,null],[11,"push","","Adds the given character to the end of the string.",143,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",143,null],[11,"truncate","","Shortens a string to the specified length.",143,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",143,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",143,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",143,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",143,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of bytes in this string.",143,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",143,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",143,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",143,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts the string into `Box<str>`.",143,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_boxed_slice","","Converts the string into `Box<str>`.",143,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Consumes this error, returning the bytes that were attempted to make a\n`String` with.",65,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",65,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",65,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",143,null],[11,"from_iter","","",143,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",143,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",143,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",143,null],[11,"extend","","",143,null],[11,"extend","","",143,null],[11,"extend","","",143,null],[11,"eq","","",143,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",143,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",143,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",365,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",365,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",365,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",365,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",143,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",365,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",365,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","collections::string","",143,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",143,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",143,null],[11,"add","","",143,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",143,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",143,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",143,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",143,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",143,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",143,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",143,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",143,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",143,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",143,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",143,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",366,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",366,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",366,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",143,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",143,null],[11,"from","","",143,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",365,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",365,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",143,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",143,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",143,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",143,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",367,null],[11,"next","","",367,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",367,null],[11,"next_back","","",367,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"hash","core::result","",368,null],[11,"fmt","","",368,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",368,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",368,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",368,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",368,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",368,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",368,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",368,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",368,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",368,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",368,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",368,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",368,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",368,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",368,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",368,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",368,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",368,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",368,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",368,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",368,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",368,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",368,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",368,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",368,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",368,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",368,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",368,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",368,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",368,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",368,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",368,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",369,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",369,null],[11,"next_back","","",369,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",369,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",370,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",370,null],[11,"next_back","","",370,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",371,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",371,null],[11,"next_back","","",371,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",368,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"clone","core::iter","",372,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",372,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",372,null],[11,"next_back","","",372,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",373,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",373,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",373,null],[11,"next_back","","",373,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",374,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",374,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",374,null],[11,"clone","","",375,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",376,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",375,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",375,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",375,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",375,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",375,null],[11,"next_back","","",375,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",377,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",377,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",377,null],[11,"next_back","","",377,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",378,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",378,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",378,null],[11,"next_back","","",378,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",379,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",379,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",379,null],[11,"next_back","","",379,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",380,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",380,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",380,null],[11,"next_back","","",380,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",381,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",381,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",381,null],[11,"nth","","",381,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",381,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",381,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",382,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",382,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",382,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",382,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",382,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",382,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",382,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",382,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",383,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",383,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",383,null],[11,"clone","","",384,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",384,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",384,null],[11,"clone","","",385,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",385,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",385,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",385,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",385,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",385,null],[11,"clone","","",386,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",386,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",386,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",386,null],[11,"clone","","",387,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",387,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",387,null],[11,"clone","","",388,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",388,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",388,null],[11,"next_back","","",388,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",389,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",389,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",389,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",389,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",389,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",389,null],[11,"next_back","","",389,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",390,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",390,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",390,null],[11,"next_back","","",390,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",391,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",334,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",333,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",391,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",391,null],[11,"clone","","",392,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",392,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",392,null],[11,"next_back","","",392,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",391,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",391,null],[11,"next","core::ops","",333,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",333,null],[11,"next_back","","",333,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",334,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",393,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",393,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",393,null],[11,"next_back","","",393,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",394,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",394,null],[11,"next_back","","",394,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",394,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",394,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",394,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",395,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",395,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",395,null],[11,"next_back","","",395,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",395,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"borrow","collections::borrow","",365,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",365,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",365,null],[11,"into_owned","","Extracts the owned data.",365,null],[11,"deref","","",365,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",365,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",365,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",365,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",365,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",365,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",365,null],[11,"into_cow","","",365,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",365,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",48,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",48,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",48,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",48,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",48,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",48,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",48,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",48,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",48,null],[11,"as_slice","","Extracts a slice containing the entire vector.",48,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",48,null],[11,"set_len","","Sets the length of a vector.",48,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",48,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",48,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",48,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",48,null],[11,"push","","Appends an element to the back of a collection.",48,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",48,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",48,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",48,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",48,null],[11,"len","","Returns the number of elements in the vector.",48,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",48,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",48,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",48,null],[11,"push_all","","Appends all elements in a slice to the `Vec`.",48,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",48,null],[11,"clone","","",48,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",48,null],[11,"hash","","",48,null],[11,"index","","",48,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",48,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",48,null],[11,"index","","",48,null],[11,"index","","",48,null],[11,"index","","",48,null],[11,"index_mut","","",48,null],[11,"index_mut","","",48,null],[11,"index_mut","","",48,null],[11,"index_mut","","",48,null],[11,"deref","","",48,null],[11,"deref_mut","","",48,null],[11,"from_iter","","",48,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",48,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",48,null],[11,"extend","","",48,null],[11,"eq","","",48,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","collections::borrow","",365,null],[11,"ne","","",365,null],[11,"eq","","",365,null],[11,"ne","","",365,null],[11,"eq","","",365,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",365,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"partial_cmp","","",48,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",48,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",48,null],[11,"default","","",48,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",48,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",48,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",48,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",48,null],[11,"as_mut","","",48,null],[11,"from","","",48,null],[11,"from","","",48,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",365,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",48,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",396,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",396,null],[11,"count","","",396,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",396,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",396,null],[11,"next","","",397,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",397,null],[11,"next_back","","",397,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",397,null],[11,"borrow","","",48,null],[11,"borrow_mut","","",48,null],[11,"fmt","mioco","",398,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",398,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",398,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",398,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",398,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",398,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",398,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",398,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",399,null],[11,"fmt","","",399,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",399,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",399,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",399,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",399,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"hash","core::option","",400,null],[11,"fmt","","",400,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",400,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",400,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",400,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",400,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",400,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",400,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",400,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",400,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",400,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",400,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",400,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",400,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",400,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",400,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",400,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",400,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",400,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",400,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",400,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",400,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",400,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",400,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",400,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",400,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",400,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",400,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",400,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",400,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",400,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",400,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",400,null],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",400,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",400,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",400,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",400,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",401,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",401,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",401,null],[11,"next_back","","",401,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",402,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",402,null],[11,"next_back","","",402,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",402,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",403,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",403,null],[11,"next_back","","",403,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",404,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",404,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",404,null],[11,"next_back","","",404,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",400,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",405,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",405,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",405,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",405,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",405,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",405,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",405,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",406,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",406,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",406,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",406,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",407,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",407,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",407,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",407,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",407,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",407,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",407,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",407,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",407,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",408,null],[11,"clone","","",408,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",409,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",409,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",409,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",409,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",410,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",410,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",411,null],[11,"deref","","",410,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",410,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",412,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",412,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",412,null],[3,"Ipv4Addr","mioco::mio","Representation of an IPv4 address.",null,null],[0,"unix","","",null,null],[3,"UnixSocket","mioco::mio::unix","",null,null],[3,"UnixStream","","",null,null],[3,"UnixListener","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[3,"PipeReader","","",null,null],[3,"PipeWriter","","",null,null],[3,"Poll","mioco::mio","",null,null],[3,"Timeout","","",null,null],[8,"Evented","","A value that may be registered with an `EventLoop`",null,null],[3,"Ipv6Addr","","Representation of an IPv6 address.",null,null],[8,"MutBuf","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be written to the MutBuf",57,{"inputs":[{"name":"mutbuf"}],"output":{"name":"usize"}}],[10,"advance","","Advance the internal cursor of the MutBuf",57,null],[11,"has_remaining","","Returns true iff there is any more space for bytes to be written",57,{"inputs":[{"name":"mutbuf"}],"output":{"name":"bool"}}],[10,"mut_bytes","","Returns a mutable slice starting at the current MutBuf position and of\nlength between 0 and `MutBuf::remaining()`.",57,null],[11,"write_slice","","Write bytes from the given slice into the `MutBuf` and advance the\ncursor by the number of bytes written.\nReturns the number of bytes written.",57,null],[11,"write_byte","","Write a single byte to the `MuBuf`",57,{"inputs":[{"name":"mutbuf"},{"name":"u8"}],"output":{"name":"bool"}}],[3,"Sender","","Sends messages to the EventLoop from other threads.",null,null],[3,"PollOpt","","",null,null],[8,"Buf","","A trait for values that provide sequential read access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",58,{"inputs":[{"name":"buf"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current Buf position and of length\nbetween 0 and `Buf::remaining()`.",58,null],[10,"advance","","Advance the internal cursor of the Buf",58,null],[11,"has_remaining","","Returns true if there are any more bytes to consume",58,{"inputs":[{"name":"buf"}],"output":{"name":"bool"}}],[11,"read_slice","","Read bytes from the `Buf` into the given slice and advance the cursor by\nthe number of bytes read.\nReturns the number of bytes read.",58,null],[11,"read_byte","","Read a single byte from the `Buf`",58,{"inputs":[{"name":"buf"}],"output":{"name":"option"}}],[8,"Handler","","",null,null],[16,"Timeout","","",413,null],[16,"Message","","",413,null],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated\non. `events` indicates the specific operations that are\nready to be performed.",413,null],[11,"notify","","Invoked when a message has been received via the event loop's channel.",413,null],[11,"timeout","","Invoked when a timeout has completed.",413,null],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",413,null],[11,"tick","","Invoked at the end of an event loop tick.",413,null],[3,"EventLoop","","Single threaded IO event loop.",null,null],[3,"Event","mioco","Event delivered to the coroutine",null,null],[3,"Coroutine","","Mioco coroutine (a.k.a. *mioco handler*)",null,null],[3,"CoroutineControl","","Coroutine control block",null,null],[3,"EventSource","","Event source inside a coroutine",null,null],[3,"EventSourceId","","Id of an event source used to enumerate them",null,null],[3,"CoroutineId","","Id of a Coroutine used to enumerate them",null,null],[3,"MiocoHandle","","Mioco instance handle",null,null],[3,"CoroutineHandle","","Handle to spawned coroutine",null,null],[3,"Handler","","Mioco event loop `Handler`",null,null],[3,"Mioco","","Mioco instance",null,null],[3,"MailboxOuterEnd","","Outside Mailbox End",null,null],[3,"MailboxInnerEnd","","Inner Mailbox End",null,null],[3,"Timer","","A Timer generating event after a given time",null,null],[3,"Config","","Mioco builder",null,null],[4,"ExitStatus","","Coroutine exit status (value returned or panic)",null,null],[13,"Panic","","Coroutine panicked",414,null],[13,"Killed","","Killed externally",414,null],[13,"Exit","","Coroutine returned some value",414,null],[4,"Message","","EventLoop message type",null,null],[13,"MailboxMsg","","Mailbox notification",415,null],[13,"Migration","","Coroutine migration",415,null],[5,"mailbox","","Create a Mailbox",null,null],[5,"start","","Shorthand for creating new `Mioco` instance and starting it right away.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"start_threads","","Shorthand for creating new `Mioco` instance with a fixed number of\nthreads and starting it right away.",null,{"inputs":[{"name":"usize"},{"name":"f"}],"output":null}],[8,"Evented","","`mioco` can work on any type implementing this trait",null,null],[10,"as_any","","Convert to &Any",416,{"inputs":[{"name":"evented"}],"output":{"name":"any"}}],[10,"as_any_mut","","Convert to &mut Any",416,{"inputs":[{"name":"evented"}],"output":{"name":"any"}}],[10,"register","","Register",416,{"inputs":[{"name":"evented"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[10,"reregister","","Reregister",416,{"inputs":[{"name":"evented"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[10,"deregister","","Deregister",416,{"inputs":[{"name":"evented"},{"name":"eventloop"},{"name":"token"}],"output":null}],[11,"should_resume","","Should the coroutine be resumed on event for this `EventSource<Self>`",416,{"inputs":[{"name":"evented"}],"output":{"name":"bool"}}],[8,"Scheduler","","Coroutine Scheduler",null,null],[10,"spawn_thread","","Spawn per-thread Scheduler",417,{"inputs":[{"name":"scheduler"}],"output":{"name":"box"}}],[8,"SchedulerThread","","Per-thread Scheduler",null,null],[10,"spawned","","New coroutine was spawned.",418,{"inputs":[{"name":"schedulerthread"},{"name":"eventloop"},{"name":"coroutinecontrol"}],"output":null}],[10,"ready","","A Coroutine became ready.",418,{"inputs":[{"name":"schedulerthread"},{"name":"eventloop"},{"name":"coroutinecontrol"}],"output":null}],[11,"tick","","Mio's tick have completed.",418,{"inputs":[{"name":"schedulerthread"},{"name":"eventloop"}],"output":null}],[11,"eq","","",419,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",419,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",419,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",419,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"id","","Index of the EventSourceShared handle",419,{"inputs":[{"name":"event"}],"output":{"name":"eventsourceid"}}],[11,"has_read","","Was the event a read",419,{"inputs":[{"name":"event"}],"output":{"name":"bool"}}],[11,"has_write","","Was the event a write",419,{"inputs":[{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",414,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",414,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"is_panic","","Is the `ExitStatus` a `Panic`?",414,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"as_any","","",420,{"inputs":[{"name":"mailboxinnerend"}],"output":{"name":"any"}}],[11,"as_any_mut","","",420,{"inputs":[{"name":"mailboxinnerend"}],"output":{"name":"any"}}],[11,"register","","",420,{"inputs":[{"name":"mailboxinnerend"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"reregister","","",420,{"inputs":[{"name":"mailboxinnerend"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"deregister","","",420,{"inputs":[{"name":"mailboxinnerend"},{"name":"eventloop"},{"name":"token"}],"output":null}],[11,"should_resume","","",420,{"inputs":[{"name":"mailboxinnerend"}],"output":{"name":"bool"}}],[11,"as_any","","",421,{"inputs":[{"name":"timer"}],"output":{"name":"any"}}],[11,"as_any_mut","","",421,{"inputs":[{"name":"timer"}],"output":{"name":"any"}}],[11,"register","","",421,{"inputs":[{"name":"timer"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"reregister","","",421,{"inputs":[{"name":"timer"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"deregister","","",421,{"inputs":[{"name":"timer"},{"name":"eventloop"},{"name":"token"}],"output":null}],[11,"should_resume","","",421,{"inputs":[{"name":"timer"}],"output":{"name":"bool"}}],[11,"drop","","",422,{"inputs":[{"name":"coroutinecontrol"}],"output":null}],[11,"resume","","Resume Coroutine",422,{"inputs":[{"name":"coroutinecontrol"},{"name":"eventloop"}],"output":null}],[11,"migrate","","Migrate to a different thread",422,{"inputs":[{"name":"coroutinecontrol"},{"name":"eventloop"},{"name":"usize"}],"output":null}],[11,"is_yielding","","Is this Coroutine ready after `yield_now()`?",422,{"inputs":[{"name":"coroutinecontrol"}],"output":{"name":"bool"}}],[11,"clone","","",423,{"inputs":[{"name":"eventsource"}],"output":{"name":"eventsource"}}],[11,"eq","","",424,{"inputs":[{"name":"eventsourceid"},{"name":"eventsourceid"}],"output":{"name":"bool"}}],[11,"ne","","",424,{"inputs":[{"name":"eventsourceid"},{"name":"eventsourceid"}],"output":{"name":"bool"}}],[11,"fmt","","",424,{"inputs":[{"name":"eventsourceid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",424,{"inputs":[{"name":"eventsourceid"}],"output":{"name":"eventsourceid"}}],[11,"eq","","",425,{"inputs":[{"name":"coroutineid"},{"name":"coroutineid"}],"output":{"name":"bool"}}],[11,"ne","","",425,{"inputs":[{"name":"coroutineid"},{"name":"coroutineid"}],"output":{"name":"bool"}}],[11,"fmt","","",425,{"inputs":[{"name":"coroutineid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",425,{"inputs":[{"name":"coroutineid"}],"output":{"name":"coroutineid"}}],[11,"with_raw","","Access raw mio type",423,{"inputs":[{"name":"eventsource"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_raw_mut","","Access mutable raw mio type",423,{"inputs":[{"name":"eventsource"},{"name":"f"}],"output":{"name":"r"}}],[11,"id","","Index identificator of a `EventSource`",423,{"inputs":[{"name":"eventsource"}],"output":{"name":"eventsourceid"}}],[11,"accept","","Block on accept",423,{"inputs":[{"name":"eventsource"}],"output":{"name":"result"}}],[11,"try_accept","","Try accepting",423,{"inputs":[{"name":"eventsource"}],"output":{"name":"result"}}],[11,"read","","Block on read",423,null],[11,"try_read","","Try to read without blocking",423,null],[11,"write","","Block on write",423,null],[11,"flush","","Flush. This currently does nothing",423,{"inputs":[{"name":"eventsource"}],"output":{"name":"result"}}],[11,"try_write","","Try to write without blocking",423,null],[11,"try_read","","Try to read without blocking",423,{"inputs":[{"name":"eventsource"},{"name":"b"}],"output":{"name":"result"}}],[11,"read","","Block on read",423,{"inputs":[{"name":"eventsource"},{"name":"b"}],"output":{"name":"result"}}],[11,"try_write","","Try to read without blocking",423,{"inputs":[{"name":"eventsource"},{"name":"b"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"write","","Block on write",423,{"inputs":[{"name":"eventsource"},{"name":"b"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"exit_notificator","","Create an exit notificator",426,{"inputs":[{"name":"coroutinehandle"}],"output":{"name":"mailboxinnerend"}}],[11,"spawn","","Create a `mioco` coroutine handler",427,{"inputs":[{"name":"miocohandle"},{"name":"f"}],"output":{"name":"coroutinehandle"}}],[11,"sync","","Execute a block of synchronous operations",427,{"inputs":[{"name":"miocohandle"},{"name":"f"}],"output":{"name":"r"}}],[11,"wrap","","Register `mio`'s native io type to be used within `mioco` coroutine",427,{"inputs":[{"name":"miocohandle"},{"name":"t"}],"output":{"name":"eventsource"}}],[11,"thread_num","","Get number of threads of the Mioco instance that coroutine is\nrunning in.",427,{"inputs":[{"name":"miocohandle"}],"output":{"name":"usize"}}],[11,"timer","","Get mutable reference to a timer source io for this coroutine",427,{"inputs":[{"name":"miocohandle"}],"output":{"name":"eventsource"}}],[11,"sleep","","Block coroutine for a given time",427,{"inputs":[{"name":"miocohandle"},{"name":"i64"}],"output":null}],[11,"yield_now","","Yield coroutine execution",427,{"inputs":[{"name":"miocohandle"}],"output":null}],[11,"select","","Wait till an event is ready",427,{"inputs":[{"name":"miocohandle"}],"output":{"name":"event"}}],[11,"select_read","","Wait till a read event is ready",427,{"inputs":[{"name":"miocohandle"}],"output":{"name":"event"}}],[11,"select_write","","Wait till a read event is ready.",427,{"inputs":[{"name":"miocohandle"}],"output":{"name":"event"}}],[11,"select_from","","Wait till any event is ready on a set of Handles.",427,null],[11,"select_write_from","","Wait till write event is ready on a set of Handles.",427,null],[11,"select_read_from","","Wait till read event is ready on a set of Handles.",427,null],[11,"tick","","",428,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[11,"ready","","",428,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"notify","","",428,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"message"}],"output":null}],[11,"timeout","","",428,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"timeout"}],"output":null}],[11,"new","","Create new `Mioco` instance",429,{"inputs":[{"name":"mioco"}],"output":{"name":"self"}}],[11,"new_configured","","Create new `Mioco` instance",429,{"inputs":[{"name":"mioco"},{"name":"config"}],"output":{"name":"self"}}],[11,"start","","Start mioco handling",429,{"inputs":[{"name":"mioco"},{"name":"f"}],"output":null}],[11,"clone","","",430,{"inputs":[{"name":"mailboxouterend"}],"output":{"name":"self"}}],[11,"send","","Deliver `T` to the other end of the mailbox.",430,{"inputs":[{"name":"mailboxouterend"},{"name":"t"}],"output":null}],[11,"read","","Receive `T` sent using corresponding `MailboxOuterEnd::send()`.",423,{"inputs":[{"name":"eventsource"}],"output":{"name":"t"}}],[11,"try_read","","Try reading current time (if the timer is done)",423,{"inputs":[{"name":"eventsource"}],"output":{"name":"option"}}],[11,"read","","Read a timer to block on it until it is done.",423,{"inputs":[{"name":"eventsource"}],"output":{"name":"steadytime"}}],[11,"try_read","","Try reading current time (if the timer is done)",423,{"inputs":[{"name":"eventsource"}],"output":{"name":"option"}}],[11,"set_timeout","","Set timeout for the timer",423,{"inputs":[{"name":"eventsource"},{"name":"i64"}],"output":null}],[11,"new","","Create mioco `Config`",431,{"inputs":[{"name":"config"}],"output":{"name":"self"}}],[11,"set_thread_num","","Set numer of threads to run mioco with",431,{"inputs":[{"name":"config"},{"name":"usize"}],"output":{"name":"self"}}],[11,"set_scheduler","","Set custom scheduler.",431,{"inputs":[{"name":"config"},{"name":"box"}],"output":{"name":"self"}}],[11,"set_stack_size","","Set stack size in bytes.",431,{"inputs":[{"name":"config"},{"name":"usize"}],"output":{"name":"self"}}],[11,"even_loop","","Configure `mio::EvenLoop` for all the threads",431,{"inputs":[{"name":"config"}],"output":{"name":"eventloopconfig"}}]],"paths":[[3,"Queue"],[3,"PollOpt"],[3,"EventSet"],[3,"IoEvent"],[3,"EventLoopConfig"],[3,"EventLoop"],[3,"Sender"],[3,"TcpSocket"],[3,"TcpStream"],[4,"Shutdown"],[3,"TcpListener"],[3,"UdpSocket"],[3,"UnixSocket"],[3,"UnixStream"],[3,"UnixListener"],[3,"PipeReader"],[3,"PipeWriter"],[4,"IpAddr"],[3,"Notify"],[4,"NotifyError"],[3,"Poll"],[3,"Selector"],[3,"Events"],[3,"Awakener"],[3,"Io"],[3,"TcpSocket"],[3,"UdpSocket"],[3,"UnixSocket"],[3,"Timer"],[3,"Timeout"],[3,"EntryLinks"],[3,"TimerError"],[4,"TimerErrorKind"],[3,"Token"],[8,"TryRead"],[8,"TryWrite"],[3,"ByteBuf"],[3,"Heap"],[3,"MemRef"],[3,"Mem"],[3,"ROByteBuf"],[3,"MutByteBuf"],[3,"RingBuf"],[3,"SliceBuf"],[3,"MutSliceBuf"],[3,"Take"],[3,"Box"],[3,"Cursor"],[3,"Vec"],[3,"RopeBuf"],[3,"Bytes"],[3,"Rope"],[3,"PieceIter"],[3,"SeqByteStr"],[3,"SmallByteStr"],[3,"SmallByteStrBuf"],[4,"BufError"],[8,"MutBuf"],[8,"Buf"],[8,"TryAccept"],[3,"Ipv4Addr"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[8,"Error"],[3,"EscapeDefault"],[3,"Wrapping"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"RawBucket"],[3,"Bucket"],[3,"SafeHash"],[3,"FullBucket"],[3,"EmptyBucket"],[4,"BucketState"],[3,"GapThenFull"],[3,"RawTable"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DefaultResizePolicy"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"DefaultState"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"DynamicLibrary"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[3,"Path"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"InternalBufWriter"],[3,"Custom"],[4,"ErrorKind"],[4,"Repr"],[3,"Lazy"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"StdinRaw"],[3,"StdoutRaw"],[3,"StderrRaw"],[4,"Maybe"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[4,"Prefix"],[4,"State"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"SignalToken"],[3,"WaitToken"],[3,"Packet"],[4,"StartResult"],[3,"Select"],[3,"Handle"],[3,"Packets"],[3,"Packet"],[3,"Packet"],[4,"Failure"],[3,"Packet"],[3,"Queue"],[3,"Queue"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Duration"],[3,"Condvar"],[3,"EHContext"],[3,"DwarfReader"],[4,"_Unwind_Action"],[4,"_Unwind_Reason_Code"],[3,"Mutex"],[3,"LookupHost"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Flag"],[3,"PoisonError"],[4,"TryLockError"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RWLock"],[3,"StaticKey"],[3,"Key"],[3,"CodePoint"],[3,"Wtf8Buf"],[3,"Wtf8"],[3,"Wtf8CodePoints"],[3,"EncodeWide"],[3,"Condvar"],[3,"FileDesc"],[3,"FileAttr"],[3,"OpenOptions"],[3,"FilePermissions"],[3,"FileType"],[3,"ReadDir"],[3,"Dir"],[3,"DirEntry"],[3,"File"],[3,"DirBuilder"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"Socket"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Env"],[3,"Buf"],[3,"Slice"],[3,"AnonPipe"],[3,"Command"],[4,"ExitStatus"],[3,"Process"],[3,"RWLock"],[3,"Handler"],[3,"Thread"],[3,"SteadyTime"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRngReseeder"],[3,"ThreadRng"],[3,"SipHasher"],[3,"Utf16Units"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"PhantomData"],[3,"Unique"],[3,"Shared"],[3,"Rc"],[3,"Weak"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"CaseMappingIter"],[3,"DecodeUtf16"],[3,"Slice"],[3,"TraitObject"],[4,"Cow"],[4,"ParseError"],[3,"Drain"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"IntoIter"],[3,"Drain"],[8,"Any"],[3,"TypeId"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[8,"Handler"],[4,"ExitStatus"],[4,"Message"],[8,"Evented"],[8,"Scheduler"],[8,"SchedulerThread"],[3,"Event"],[3,"MailboxInnerEnd"],[3,"Timer"],[3,"CoroutineControl"],[3,"EventSource"],[3,"EventSourceId"],[3,"CoroutineId"],[3,"CoroutineHandle"],[3,"MiocoHandle"],[3,"Handler"],[3,"Mioco"],[3,"MailboxOuterEnd"],[3,"Config"]]};
searchIndex['mio'] = {"items":[[0,"","mio","A fast, low-level IO library for Rust focusing on non-blocking APIs, event\nnotification, and other useful utilities for building high performance IO\napps.",null,null],[8,"Buf","","A trait for values that provide sequential read access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",0,{"inputs":[{"name":"buf"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current Buf position and of length\nbetween 0 and `Buf::remaining()`.",0,null],[10,"advance","","Advance the internal cursor of the Buf",0,null],[11,"has_remaining","","Returns true if there are any more bytes to consume",0,{"inputs":[{"name":"buf"}],"output":{"name":"bool"}}],[11,"read_slice","","Read bytes from the `Buf` into the given slice and advance the cursor by\nthe number of bytes read.\nReturns the number of bytes read.",0,null],[11,"read_byte","","Read a single byte from the `Buf`",0,{"inputs":[{"name":"buf"}],"output":{"name":"option"}}],[8,"MutBuf","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be written to the MutBuf",1,{"inputs":[{"name":"mutbuf"}],"output":{"name":"usize"}}],[10,"advance","","Advance the internal cursor of the MutBuf",1,null],[11,"has_remaining","","Returns true iff there is any more space for bytes to be written",1,{"inputs":[{"name":"mutbuf"}],"output":{"name":"bool"}}],[10,"mut_bytes","","Returns a mutable slice starting at the current MutBuf position and of\nlength between 0 and `MutBuf::remaining()`.",1,null],[11,"write_slice","","Write bytes from the given slice into the `MutBuf` and advance the\ncursor by the number of bytes written.\nReturns the number of bytes written.",1,null],[11,"write_byte","","Write a single byte to the `MuBuf`",1,{"inputs":[{"name":"mutbuf"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"new","std::net::ip","Creates a new IPv4 address from four eight-bit octets.",2,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",2,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address 0.0.0.0.",2,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",2,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",2,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",2,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",2,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",2,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address.",2,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",2,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",2,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",2,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"from","alloc::boxed","",3,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",3,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",3,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",3,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",4,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",5,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","core::num","",6,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","core::num::dec2flt","",7,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","collections::string","",8,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",9,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"is","","Returns true if the boxed type is the same as `T`",10,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",10,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",10,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",10,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",10,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",10,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",10,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",10,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",10,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",10,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",10,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",10,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"next","std::ascii","",11,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"shl","core::num","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",12,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",12,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",12,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",12,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",12,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",12,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",12,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",12,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",12,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",12,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",12,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",12,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"clone","std::thread::local","",13,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[11,"eq","","",13,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"with","","Acquires a reference to the value in this TLS key.",14,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",14,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[11,"new","std::thread::local::imp","",15,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",15,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",16,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",16,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",16,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[11,"new","std::thread::scoped_tls::imp","",17,{"inputs":[{"name":"keyinner"}],"output":{"name":"keyinner"}}],[11,"set","","",17,null],[11,"get","","",17,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",18,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",18,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",18,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",18,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",19,null],[11,"name","","Gets the thread's name.",19,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"fmt","","",19,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",19,{"inputs":[{"name":"thread"},{"name":"option"}],"output":{"name":"thread"}}],[11,"thread","","Extracts a handle to the underlying thread",20,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",20,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"clone","std::collections::hash::table","",21,{"inputs":[{"name":"rawbucket"}],"output":{"name":"rawbucket"}}],[11,"clone","","",22,{"inputs":[{"name":"bucket"}],"output":{"name":"bucket"}}],[11,"clone","","",23,{"inputs":[{"name":"safehash"}],"output":{"name":"safehash"}}],[11,"eq","","",23,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",23,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"table","","Borrow a reference to the table.",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",25,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",25,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",22,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",22,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",22,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",22,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",22,{"inputs":[{"name":"bucket"},{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",22,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",22,null],[11,"next","","",25,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",25,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",25,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",25,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",24,null],[11,"take","","Removes this bucket's key and value from the hashtable.",24,null],[11,"replace","","",24,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",24,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",24,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",24,null],[11,"expect_full","","",26,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",27,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",27,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",28,{"inputs":[{"name":"rawtable"},{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable's capacity, similar to a vector's.",28,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",28,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"iter","","",28,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",28,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",28,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",28,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"clone","","",29,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[11,"next","","",29,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",31,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"len","","",31,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",32,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"len","","",32,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",33,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"len","","",33,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",34,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"len","","",34,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",34,null],[11,"clone","","",28,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",28,null],[11,"clone","std::collections::hash::map","",35,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"clone","","",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty HashMap.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",36,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Creates an empty hashmap which will use the given hasher to hash keys.",36,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",36,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",36,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",36,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",36,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",36,null],[11,"get","","Returns a reference to the value corresponding to the key.",36,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",36,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",36,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",36,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",36,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",36,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"index","","",36,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",37,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",38,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",39,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"next","","",37,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"len","","",37,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",40,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"len","","",40,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",41,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"len","","",41,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",38,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"len","","",38,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",39,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"len","","",39,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",42,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"len","","",42,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",43,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",43,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",44,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",44,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",44,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",44,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",44,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",45,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",36,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",36,null],[11,"extend","","",36,null],[11,"clone","","",46,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",46,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"hasher","","",46,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",46,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"get","","",36,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"take","","",36,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"replace","","",36,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"clone","std::collections::hash::set","",47,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty HashSet.",47,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",47,{"inputs":[{"name":"hashset"},{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hash_state","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",47,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",47,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",47,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",47,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",47,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",47,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",47,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",47,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",47,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",47,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",47,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",47,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",47,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",47,null],[11,"contains","","Returns `true` if the set contains a value.",47,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",47,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",47,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",47,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",47,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",47,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",47,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",47,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",47,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",47,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",47,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",47,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",47,null],[11,"extend","","",47,null],[11,"default","","",47,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",47,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",48,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",48,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"len","","",48,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",49,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"len","","",49,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",50,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"len","","",50,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",51,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",51,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"clone","","",52,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",52,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"clone","","",53,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",53,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"clone","","",54,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",54,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"hasher","std::collections::hash::state","",55,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",55,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",55,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"clone","collections::binary_heap","",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",56,null],[11,"default","","",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",56,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",56,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",56,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",56,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",56,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",56,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",56,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",56,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",56,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",56,null],[11,"drop","","",57,null],[11,"clone","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next_back","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",59,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"next_back","","",59,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",60,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"next_back","","",60,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",56,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",61,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",56,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",56,null],[11,"extend","","",56,null],[11,"clone","collections::vec_deque","",62,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",62,null],[11,"default","","",62,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",62,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",62,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",62,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",62,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",62,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",62,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",62,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",62,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",62,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",62,null],[11,"iter","","Returns a front-to-back iterator.",62,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",62,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",62,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",62,null],[11,"len","","Returns the number of elements in the `VecDeque`.",62,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",62,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items from start to end. The element\nrange is removed even if the iterator is not consumed until the end.",62,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",62,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",62,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",62,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",62,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",62,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",62,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",62,null],[11,"push_back","","Appends an element to the back of a buffer",62,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",62,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",62,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_back_remove","","deprecated",62,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",62,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","deprecated",62,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",62,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",62,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",62,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",62,null],[11,"retain","","Retains only the elements specified by the predicate.",62,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",62,null],[11,"clone","","",63,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",63,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",64,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",66,null],[11,"next","","",66,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next_back","","",66,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",62,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",62,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",62,null],[11,"index","","",62,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",62,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",62,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",62,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",62,null],[11,"extend","","",62,null],[11,"fmt","","",62,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","collections::linked_list","",67,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",68,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",69,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",69,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",70,null],[11,"iter","","Provides a forward iterator.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",70,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",70,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",70,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",70,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",70,null],[11,"next","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",71,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",71,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",71,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",68,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",70,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",70,null],[11,"extend","","",70,null],[11,"eq","","",70,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",70,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",70,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",70,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",70,null],[11,"drop","std::dynamic_lib","",72,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",72,{"inputs":[{"name":"dynamiclibrary"},{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",72,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",72,null],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",72,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",72,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",72,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","std::env","",73,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next","","",74,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"clone","","",75,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"eq","","",75,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"fmt","","",75,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",75,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[11,"next","","",76,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"fmt","","",77,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",77,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",78,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"len","","",78,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",79,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"len","","",79,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"clone","std::ffi::c_str","",80,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[11,"hash","","",80,null],[11,"cmp","","",80,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",80,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",80,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",80,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",80,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",80,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",80,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"hash","","",81,null],[11,"fmt","","",82,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",82,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"fmt","","",83,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"intostringerror"}],"output":{"name":"intostringerror"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",80,{"inputs":[{"name":"cstring"},{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",80,{"inputs":[{"name":"cstring"},{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_ptr","","Retakes ownership of a CString that was transferred to C.",80,null],[11,"from_raw","","Retakes ownership of a CString that was transferred to C.",80,null],[11,"into_ptr","","Transfers ownership of the string to a C caller.",80,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",80,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",80,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the underlying byte buffer.",80,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",80,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",80,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",80,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",81,null],[11,"as_ptr","","Returns the inner pointer to this C string.",81,null],[11,"to_bytes","","Converts this C string to a byte slice.",81,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",81,null],[11,"to_str","","Yields a `&str` slice if the `CStr` contains valid UTF-8.",81,{"inputs":[{"name":"cstr"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow<str>`.",81,{"inputs":[{"name":"cstr"}],"output":{"name":"cow"}}],[11,"deref","","",80,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"fmt","","",80,{"inputs":[{"name":"cstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"cstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",80,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",82,{"inputs":[{"name":"nulerror"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",82,{"inputs":[{"name":"nulerror"}],"output":{"name":"vec"}}],[11,"description","","",82,{"inputs":[{"name":"nulerror"}],"output":{"name":"str"}}],[11,"fmt","","",82,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",84,{"inputs":[{"name":"error"},{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",83,{"inputs":[{"name":"intostringerror"}],"output":{"name":"cstring"}}],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",83,{"inputs":[{"name":"intostringerror"}],"output":{"name":"utf8error"}}],[11,"description","","",83,{"inputs":[{"name":"intostringerror"}],"output":{"name":"str"}}],[11,"fmt","","",83,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",81,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",81,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"clone","std::ffi::os_str","",85,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",85,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"from_bytes","","Constructs an `OsString` from a byte sequence.",85,{"inputs":[{"name":"osstring"},{"name":"b"}],"output":{"name":"option"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",85,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",85,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given `&OsStr` slice.",85,null],[11,"from","","",85,{"inputs":[{"name":"osstring"},{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",85,{"inputs":[{"name":"osstring"},{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",85,{"inputs":[{"name":"osstring"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"new","","Coerces into an `OsStr` slice.",86,{"inputs":[{"name":"osstr"},{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `OsStr` is valid unicode.",86,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow<str>`.",86,{"inputs":[{"name":"osstr"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned `OsString`.",86,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"to_bytes","","Yields this `OsStr` as a byte slice.",86,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_cstring","","Creates a `CString` containing this `OsStr` data.",86,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"deref","","",85,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"fmt","","",85,{"inputs":[{"name":"osstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",85,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",85,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",85,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",85,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",85,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",85,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",85,null],[11,"eq","","",86,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",86,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",86,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",86,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",86,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",86,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",86,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"osstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",85,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"to_owned","","",86,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"as_ref","","",86,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_ref","","",85,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_ref","collections::string","",87,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"clone","std::fs","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"clone","","",89,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",90,{"inputs":[{"name":"permissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"hash","","",91,null],[11,"eq","","",91,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"open","","Attempts to open a file in read-only mode.",92,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",92,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",92,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",92,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",92,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",92,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",92,null],[11,"read_to_end","","",92,{"inputs":[{"name":"file"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",92,null],[11,"flush","","",92,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",92,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank net set of options ready for configuration.",89,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",89,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",89,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",89,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",89,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",89,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",89,{"inputs":[{"name":"openoptions"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"permissions"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",90,{"inputs":[{"name":"permissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",90,null],[11,"is_dir","","Test whether this file type represents a directory.",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"next","","",93,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",94,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",94,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",94,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",94,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"next","","",95,{"inputs":[{"name":"walkdir"}],"output":{"name":"option"}}],[11,"metadata","std::path","",96,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","",96,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","",96,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","",96,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","",96,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","",96,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","",96,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","",96,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"new","std::fs","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",97,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",97,{"inputs":[{"name":"dirbuilder"},{"name":"bool"}],"output":{"name":"dirbuilder"}}],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",97,{"inputs":[{"name":"dirbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",98,{"inputs":[{"name":"bufreader"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",98,{"inputs":[{"name":"bufreader"},{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",98,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",98,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",98,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read","","",98,null],[11,"fill_buf","","",98,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",98,null],[11,"fmt","","",98,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",98,{"inputs":[{"name":"bufreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",100,{"inputs":[{"name":"bufwriter"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",100,{"inputs":[{"name":"bufwriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",100,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",100,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",100,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"write","","",100,null],[11,"flush","","",100,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"bufwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",100,{"inputs":[{"name":"bufwriter"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",100,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",99,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",99,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"w"}}],[11,"from","std::io::error","",84,{"inputs":[{"name":"error"},{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",99,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"str"}}],[11,"fmt","","",99,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",101,{"inputs":[{"name":"linewriter"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",101,{"inputs":[{"name":"linewriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",101,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",101,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",101,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"write","","",101,null],[11,"flush","","",101,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"linewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",102,null],[11,"fmt","std::io::cursor","",103,{"inputs":[{"name":"cursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",103,{"inputs":[{"name":"cursor"},{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",103,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",103,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",103,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",103,{"inputs":[{"name":"cursor"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",103,null],[11,"seek","","",103,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",103,null],[11,"fill_buf","","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",103,null],[11,"write","","",103,null],[11,"flush","","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",103,null],[11,"flush","","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",103,null],[11,"flush","","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"fmt","std::io::error","",84,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"custom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",105,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",84,{"inputs":[{"name":"error"},{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",84,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",84,{"inputs":[{"name":"error"},{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",84,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",84,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",84,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",84,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",84,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"fmt","","",106,{"inputs":[{"name":"repr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",84,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",84,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"read","alloc::boxed","",3,null],[11,"read_to_end","","",3,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",3,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",3,null],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","","",3,null],[11,"write_fmt","","",3,{"inputs":[{"name":"box"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",3,{"inputs":[{"name":"box"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",3,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"consume","","",3,null],[11,"read_until","","",3,{"inputs":[{"name":"box"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",3,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","collections::vec","",61,null],[11,"write_all","","",61,null],[11,"flush","","",61,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"new","std::io::lazy","",107,null],[11,"get","","",107,{"inputs":[{"name":"lazy"}],"output":{"name":"option"}}],[11,"read","std::io::util","",108,null],[11,"fill_buf","","",108,{"inputs":[{"name":"empty"}],"output":{"name":"result"}}],[11,"consume","","",108,null],[11,"read","","",109,null],[11,"write","","",110,null],[11,"flush","","",110,{"inputs":[{"name":"sink"}],"output":{"name":"result"}}],[11,"read","std::io::stdio","",111,null],[11,"write","","",112,null],[11,"flush","","",112,{"inputs":[{"name":"stdoutraw"}],"output":{"name":"result"}}],[11,"write","","",113,null],[11,"flush","","",113,{"inputs":[{"name":"stderrraw"}],"output":{"name":"result"}}],[11,"write","","",114,null],[11,"flush","","",114,{"inputs":[{"name":"maybe"}],"output":{"name":"result"}}],[11,"read","","",114,null],[11,"lock","","Locks this handle to the standard input stream, returning a readable\nguard.",115,{"inputs":[{"name":"stdin"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",115,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",115,null],[11,"read_to_end","","",115,{"inputs":[{"name":"stdin"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",115,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",115,null],[11,"read","","",116,null],[11,"read_to_end","","",116,{"inputs":[{"name":"stdinlock"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",116,{"inputs":[{"name":"stdinlock"}],"output":{"name":"result"}}],[11,"consume","","",116,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",117,{"inputs":[{"name":"stdout"}],"output":{"name":"stdoutlock"}}],[11,"write","","",117,null],[11,"flush","","",117,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write_all","","",117,null],[11,"write_fmt","","",117,{"inputs":[{"name":"stdout"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",118,null],[11,"flush","","",118,{"inputs":[{"name":"stdoutlock"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",119,{"inputs":[{"name":"stderr"}],"output":{"name":"stderrlock"}}],[11,"write","","",119,null],[11,"flush","","",119,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write_all","","",119,null],[11,"write_fmt","","",119,{"inputs":[{"name":"stderr"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",120,null],[11,"flush","","",120,{"inputs":[{"name":"stderrlock"}],"output":{"name":"result"}}],[11,"fmt","std::io","",121,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",121,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",122,null],[11,"flush","","",122,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",123,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",124,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",124,null],[11,"fill_buf","","",124,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",124,null],[11,"read","","",125,null],[11,"next","","",126,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",127,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",128,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",127,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",127,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",127,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",129,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",130,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"cmp","std::net::ip","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",131,null],[11,"fmt","","",131,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",132,{"inputs":[{"name":"ipv6multicastscope"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",132,null],[11,"clone","","",132,{"inputs":[{"name":"ipv6multicastscope"}],"output":{"name":"ipv6multicastscope"}}],[11,"eq","","",132,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"fmt","","",131,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",2,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"partial_cmp","","",2,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","",2,{"inputs":[{"name":"ipv4addr"},{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",133,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",133,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address ::.",133,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1).",133,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",133,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",133,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",133,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",133,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",133,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",133,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address.",133,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",133,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"fmt","","",133,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",133,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",133,null],[11,"partial_cmp","","",133,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"cmp","","",133,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"fmt","std::net::addr","",134,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",134,null],[11,"eq","","",134,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",134,{"inputs":[{"name":"socketaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",134,{"inputs":[{"name":"socketaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Returns the port number associated with this socket address.",134,{"inputs":[{"name":"socketaddr"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",135,{"inputs":[{"name":"socketaddrv4"},{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",135,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"ipv4addr"}}],[11,"port","","Returns the port number associated with this socket address.",135,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",136,{"inputs":[{"name":"socketaddrv6"},{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",136,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"ipv6addr"}}],[11,"port","","Returns the port number associated with this socket address.",136,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u16"}}],[11,"flowinfo","","Returns scope ID associated with this address, corresponding to the\n`sin6_flowinfo` field in C.",136,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"scope_id","","Returns scope ID associated with this address, corresponding to the\n`sin6_scope_id` field in C.",136,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"fmt","","",134,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",136,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",135,{"inputs":[{"name":"socketaddrv4"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",136,{"inputs":[{"name":"socketaddrv6"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",135,null],[11,"hash","","",136,null],[11,"to_socket_addrs","","",134,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",135,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",136,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"result"}}],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",137,{"inputs":[{"name":"tcpstream"},{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",137,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",137,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",137,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",137,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",137,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",137,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",137,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",137,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",137,null],[11,"read_to_end","","",137,{"inputs":[{"name":"tcpstream"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",137,null],[11,"flush","","",137,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",138,{"inputs":[{"name":"tcplistener"},{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",138,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",138,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",138,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",138,{"inputs":[{"name":"tcplistener"}],"output":{"name":"incoming"}}],[11,"next","","",139,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"fmt","","",138,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",140,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",140,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",140,null],[11,"local_addr","","Returns the socket address that this socket was created from.",140,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",140,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",140,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",140,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",140,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",140,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","std::net::ip","",131,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"ipv4addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",133,{"inputs":[{"name":"ipv6addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",135,{"inputs":[{"name":"socketaddrv4"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",136,{"inputs":[{"name":"socketaddrv6"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",134,{"inputs":[{"name":"socketaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",141,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"addrparseerror"}}],[11,"fmt","","",141,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",141,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"str"}}],[11,"fmt","std::net","",142,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",142,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"next","","",143,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"clone","std::os::linux::raw::arch","",144,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"as_raw_fd","std::fs","",92,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",92,{"inputs":[{"name":"file"},{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",92,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::tcp","",137,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",138,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::udp","",140,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","std::net::tcp","",137,{"inputs":[{"name":"tcpstream"},{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",138,{"inputs":[{"name":"tcplistener"},{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",140,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",137,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",138,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"into_raw_fd","std::net::udp","",140,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_vec","std::ffi::os_str","",85,{"inputs":[{"name":"osstring"},{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",85,{"inputs":[{"name":"osstring"}],"output":{"name":"vec"}}],[11,"from_bytes","","",86,null],[11,"as_bytes","","",86,null],[11,"mode","std::fs","",90,{"inputs":[{"name":"permissions"}],"output":{"name":"u32"}}],[11,"set_mode","","",90,null],[11,"from_mode","","",90,{"inputs":[{"name":"permissions"},{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",89,{"inputs":[{"name":"openoptions"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"dev","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"ino","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"mode","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"nlink","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"uid","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"gid","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"rdev","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"size","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blksize","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blocks","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"is_block_device","","",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_char_device","","",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_fifo","","",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_socket","","",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ino","","",94,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"mode","","",97,{"inputs":[{"name":"dirbuilder"},{"name":"u32"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",145,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",145,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"session_leader","","",145,{"inputs":[{"name":"command"},{"name":"bool"}],"output":{"name":"command"}}],[11,"signal","","",146,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"from_raw_fd","","",147,{"inputs":[{"name":"stdio"},{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",148,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",149,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",150,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",148,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",149,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",150,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"eq","std::path","",151,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",151,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",151,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",151,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",151,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",151,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",151,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"hash","","",151,null],[11,"fmt","","",151,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",151,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"fmt","","",152,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",152,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",152,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",152,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",152,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",152,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",152,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",153,{"inputs":[{"name":"prefixcomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",153,null],[11,"clone","","",153,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefixcomponent"}}],[11,"kind","","The parsed prefix data.",153,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",153,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"osstr"}}],[11,"eq","","",153,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",153,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",153,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"fmt","","",154,{"inputs":[{"name":"component"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",154,null],[11,"cmp","","",154,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",154,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",154,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",154,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",154,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",154,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"eq","","",154,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"clone","","",154,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice",154,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"as_ref","","",154,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"clone","","",155,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"clone","","",156,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",155,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"peek","","Examine the next component without consuming it.",155,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"as_ref","","",155,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"as_ref","","",155,{"inputs":[{"name":"components"}],"output":{"name":"osstr"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",156,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",156,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",156,{"inputs":[{"name":"iter"}],"output":{"name":"osstr"}}],[11,"next","","",156,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",156,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",155,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"next_back","","",155,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"eq","","",155,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",155,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",155,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"hash","","",157,null],[11,"clone","","",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",157,null],[11,"pop","","Truncate `self` to `self.parent()`.",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",157,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",157,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",157,{"inputs":[{"name":"pathbuf"},{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",157,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",157,{"inputs":[{"name":"pathbuf"},{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",157,{"inputs":[{"name":"pathbuf"},{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",157,null],[11,"fmt","","",157,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",96,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",96,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `Path` is valid unicode.",96,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a `Cow<str>`.",96,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",96,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",96,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",96,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"prefix","","Returns the *prefix* of a path, if any.",96,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",96,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",96,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",96,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",96,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"option"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",96,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",96,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",96,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",96,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",96,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",96,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",96,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",96,{"inputs":[{"name":"path"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path's components viewed as `OsStr` slices.",96,{"inputs":[{"name":"path"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",96,{"inputs":[{"name":"path"}],"output":{"name":"display"}}],[11,"metadata","","Gets information on the file, directory, etc at this path.",96,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","Gets information on the file, directory, etc at this path.",96,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","Returns the canonical form of a path, normalizing all components and\neliminate all symlinks.",96,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","Reads the symlink at this path.",96,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","Reads the directory at this path.",96,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","Boolean value indicator whether the underlying file exists on the local\nfilesystem. Returns false in exactly the cases where `fs::stat` fails.",96,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","Whether the underlying implementation (be it a file path, or something\nelse) points at a \"regular file\" on the FS. Will return false for paths\nto non-existent locations or directories or other non-regular files\n(named pipes, etc). Follows links when making this determination.",96,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","Whether the underlying implementation (be it a file path, or something\nelse) is pointing at a directory in the underlying FS. Will return\nfalse for paths to non-existent locations or if the item is not a\ndirectory (eg files, named pipes, etc). Follows links when making this\ndetermination.",96,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"deref","","",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"borrow","","",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"into_cow","","",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","","",96,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"eq","","",157,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",157,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",157,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"into","","",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"hash","","",96,null],[11,"as_ref","","",96,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"fmt","","",96,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",96,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",96,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",96,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",86,{"inputs":[{"name":"osstr"}],"output":{"name":"path"}}],[11,"as_ref","","",85,{"inputs":[{"name":"osstring"}],"output":{"name":"path"}}],[11,"as_ref","collections::string","",87,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"write","std::process","",148,null],[11,"flush","","",148,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"read","","",149,null],[11,"read","","",150,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",145,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",145,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",145,null],[11,"env","","Inserts or updates an environment variable mapping.",145,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",145,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",145,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",145,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).",145,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).",145,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).",145,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",145,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",145,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",145,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",145,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",159,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",147,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",147,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",147,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"fmt","","",146,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",146,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",146,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",146,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",146,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",160,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",160,{"inputs":[{"name":"child"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",160,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `Output`\ninstance.",160,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"clone","std::sync::mpsc::blocking","",161,{"inputs":[{"name":"signaltoken"}],"output":{"name":"signaltoken"}}],[11,"signal","","",161,{"inputs":[{"name":"signaltoken"}],"output":{"name":"bool"}}],[11,"cast_to_usize","","Convert to an unsafe usize value. Useful for storing in a pipe's state\nflag.",161,{"inputs":[{"name":"signaltoken"}],"output":{"name":"usize"}}],[11,"cast_from_usize","","Convert from an unsafe usize value. Useful for retrieving a pipe's state\nflag.",161,{"inputs":[{"name":"signaltoken"},{"name":"usize"}],"output":{"name":"signaltoken"}}],[11,"wait","","",162,null],[11,"new","std::sync::mpsc::oneshot","",163,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",163,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"sent","","",163,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"recv","","",163,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",163,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"upgrade","","",163,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"drop_chan","","",163,null],[11,"drop_port","","",163,null],[11,"can_recv","","",163,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",163,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",163,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop","","",163,null],[11,"eq","std::sync::mpsc::select","",164,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new selection structure. This set is initially empty.",165,{"inputs":[{"name":"select"}],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",165,{"inputs":[{"name":"select"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",165,{"inputs":[{"name":"select"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",166,{"inputs":[{"name":"handle"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",166,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",166,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",166,null],[11,"drop","","",165,null],[11,"drop","","",166,null],[11,"next","","",167,{"inputs":[{"name":"packets"}],"output":{"name":"option"}}],[11,"new","std::sync::mpsc::shared","",168,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"postinit_lock","","",168,{"inputs":[{"name":"packet"}],"output":{"name":"mutexguard"}}],[11,"inherit_blocker","","",168,null],[11,"send","","",168,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",168,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",168,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",168,null],[11,"drop_chan","","",168,null],[11,"drop_port","","",168,null],[11,"can_recv","","",168,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",168,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",168,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"drop","","",168,null],[11,"new","std::sync::mpsc::stream","",169,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",169,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"upgrade","","",169,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"recv","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop_chan","","",169,null],[11,"drop_port","","",169,null],[11,"can_recv","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",169,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",169,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",169,null],[11,"fmt","std::sync::mpsc::sync","",170,{"inputs":[{"name":"failure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",171,{"inputs":[{"name":"packet"},{"name":"usize"}],"output":{"name":"packet"}}],[11,"send","","",171,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",171,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",171,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",171,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",171,null],[11,"drop_chan","","",171,null],[11,"drop_port","","",171,null],[11,"can_recv","","",171,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",171,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",171,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"drop","","",171,null],[11,"new","std::sync::mpsc::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",172,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue.",172,null],[11,"pop","","Pops some data from this queue.",172,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",172,null],[11,"new","std::sync::mpsc::spsc_queue","Creates a new queue.",173,{"inputs":[{"name":"queue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",173,null],[11,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",173,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",173,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"drop","","",173,null],[11,"clone","std::sync::mpsc","",174,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"eq","","",174,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",175,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",175,{"inputs":[{"name":"recverror"}],"output":{"name":"recverror"}}],[11,"eq","","",175,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"fmt","","",176,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",176,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"tryrecverror"}}],[11,"eq","","",176,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",177,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"eq","","",177,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",178,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",178,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"drop","","",178,null],[11,"send","","Sends a value on this synchronous channel.",179,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",179,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",179,{"inputs":[{"name":"syncsender"}],"output":{"name":"syncsender"}}],[11,"drop","","",179,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",180,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",180,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",180,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[11,"next","","",181,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",182,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",180,{"inputs":[{"name":"receiver"}],"output":{"name":"intoiter"}}],[11,"drop","","",180,null],[11,"fmt","","",174,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",174,{"inputs":[{"name":"senderror"}],"output":{"name":"str"}}],[11,"cause","","",174,{"inputs":[{"name":"senderror"}],"output":{"name":"option"}}],[11,"fmt","","",177,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",177,{"inputs":[{"name":"trysenderror"}],"output":{"name":"str"}}],[11,"cause","","",177,{"inputs":[{"name":"trysenderror"}],"output":{"name":"option"}}],[11,"fmt","","",175,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",175,{"inputs":[{"name":"recverror"}],"output":{"name":"str"}}],[11,"cause","","",175,{"inputs":[{"name":"recverror"}],"output":{"name":"option"}}],[11,"fmt","","",176,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",176,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"str"}}],[11,"cause","","",176,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"option"}}],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",183,{"inputs":[{"name":"barrier"},{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads has rendezvoused here.",183,{"inputs":[{"name":"barrier"}],"output":{"name":"barrierwaitresult"}}],[11,"is_leader","","Returns whether this thread from `wait` is the \"leader thread\".",184,{"inputs":[{"name":"barrierwaitresult"}],"output":{"name":"bool"}}],[11,"clone","std::sync::condvar","",185,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"waittimeoutresult"}}],[11,"eq","","",185,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"fmt","","",185,{"inputs":[{"name":"waittimeoutresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",185,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",186,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",186,{"inputs":[{"name":"condvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",186,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",186,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",186,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",186,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",186,null],[11,"drop","","",186,null],[11,"new","","Creates a new condition variable",187,{"inputs":[{"name":"staticcondvar"}],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",187,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",187,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",187,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",187,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",187,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",187,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",187,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",188,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",188,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",188,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",188,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",188,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",188,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"drop","","",188,null],[11,"fmt","","",188,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",189,{"inputs":[{"name":"staticmutex"}],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",189,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",189,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates resources associated with this static mutex.",189,null],[11,"deref","","",190,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",190,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",190,null],[11,"new","std::sync::once","Creates a new `Once` value.",191,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",191,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock<T>` which is unlocked.",192,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",192,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",192,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",192,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",192,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",192,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",192,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",192,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"drop","","",192,null],[11,"fmt","","",192,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new rwlock.",193,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",193,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this lock with shared read access.",193,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",193,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",193,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates all resources associated with this static lock.",193,null],[11,"deref","","",194,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",195,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",195,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",194,null],[11,"drop","","",195,null],[11,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",196,{"inputs":[{"name":"semaphore"},{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",196,null],[11,"release","","Release a resource from this semaphore.",196,null],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",196,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",197,null],[11,"default","core::sync::atomic","",198,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",199,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",200,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",201,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",202,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",198,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",198,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",198,null],[11,"swap","","Stores a value into the bool, returning the old value.",198,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",198,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",198,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",198,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",198,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",198,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",199,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",199,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",199,null],[11,"swap","","Stores a value into the isize, returning the old value.",199,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",199,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",199,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",199,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",199,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",199,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",199,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",200,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",200,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",200,null],[11,"swap","","Stores a value into the usize, returning the old value.",200,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",200,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",200,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",200,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",200,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",200,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",200,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",201,null],[11,"load","","Loads a value from the pointer.",201,null],[11,"store","","Stores a value into the pointer.",201,null],[11,"swap","","Stores a value into the pointer, returning the old value.",201,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",201,null],[11,"fmt","","",200,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",199,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",198,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",201,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::time::duration","",203,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",203,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",203,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",203,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",203,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",203,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",203,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",203,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",203,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",203,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",203,{"inputs":[{"name":"duration"},{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",203,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",203,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",203,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",203,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",203,{"inputs":[{"name":"duration"}],"output":{"name":"u32"}}],[11,"add","","",203,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",203,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",203,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div","","",203,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"new","std::sys_common::condvar","Creates a new condition variable for use.",204,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","Signals one waiter on this condition variable to wake up.",204,null],[11,"notify_all","","Awakens all current waiters on this condition variable.",204,null],[11,"wait","","Waits for a signal on the specified mutex.",204,null],[11,"wait_timeout","","Waits for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",204,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","Deallocates all resources associated with this condition variable.",204,null],[11,"clone","std::sys_common::dwarf::eh","",205,{"inputs":[{"name":"ehcontext"}],"output":{"name":"ehcontext"}}],[11,"new","std::sys_common::dwarf","",206,null],[11,"read","","",206,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"t"}}],[11,"read_uleb128","","",206,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"u64"}}],[11,"read_sleb128","","",206,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"i64"}}],[11,"clone","std::sys_common::libunwind","",207,{"inputs":[{"name":"_unwind_action"}],"output":{"name":"_unwind_action"}}],[11,"clone","","",208,{"inputs":[{"name":"_unwind_reason_code"}],"output":{"name":"_unwind_reason_code"}}],[11,"new","std::sys_common::mutex","Creates a new mutex for use.",209,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","Locks the mutex blocking the current thread until it is available.",209,null],[11,"try_lock","","Attempts to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",209,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","Unlocks the mutex.",209,null],[11,"destroy","","Deallocates all resources associated with this mutex.",209,null],[11,"next","std::sys_common::net","",210,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"drop","","",210,null],[11,"connect","","",211,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",211,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"into_socket","","",211,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"set_read_timeout","","",211,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",211,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",211,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","",211,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",211,null],[11,"write","","",211,null],[11,"peer_addr","","",211,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","",211,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",211,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"duplicate","","",211,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",211,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",212,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",212,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"into_socket","","",212,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"socket_addr","","",212,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",212,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"duplicate","","",212,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"fmt","","",212,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",213,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",213,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"into_socket","","",213,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"socket_addr","","",213,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",213,null],[11,"send_to","","",213,null],[11,"duplicate","","",213,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",213,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",213,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",213,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","",213,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",213,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::poison","",214,{"inputs":[{"name":"flag"}],"output":{"name":"flag"}}],[11,"borrow","","",214,{"inputs":[{"name":"flag"}],"output":{"name":"result"}}],[11,"done","","",214,null],[11,"get","","",214,{"inputs":[{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","","",215,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",215,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",215,{"inputs":[{"name":"poisonerror"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",215,{"inputs":[{"name":"poisonerror"},{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",215,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",215,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",215,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"from","","",216,{"inputs":[{"name":"trylockerror"},{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",216,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",216,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",216,{"inputs":[{"name":"trylockerror"}],"output":{"name":"str"}}],[11,"cause","","",216,{"inputs":[{"name":"trylockerror"}],"output":{"name":"option"}}],[11,"new","std::sys_common::remutex","Creates a new reentrant mutex in an unlocked state.",217,{"inputs":[{"name":"reentrantmutex"},{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",217,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",217,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"drop","","",217,null],[11,"fmt","","",217,{"inputs":[{"name":"reentrantmutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",218,{"inputs":[{"name":"reentrantmutexguard"}],"output":{"name":"t"}}],[11,"drop","","",218,null],[11,"new","std::sys_common::rwlock","Creates a new reader-writer lock for use.",219,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","Acquires shared access to the underlying lock, blocking the current\nthread to do so.",219,null],[11,"try_read","","Attempts to acquire shared access to this lock, returning whether it\nsucceeded or not.",219,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","Acquires write access to the underlying lock, blocking the current thread\nto do so.",219,null],[11,"try_write","","Attempts to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",219,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","Unlocks previously acquired shared access to this lock.",219,null],[11,"write_unlock","","Unlocks previously acquired exclusive access to this lock.",219,null],[11,"destroy","","Destroys OS-related resources with this RWLock.",219,null],[11,"new","std::sys_common::thread_local","",220,{"inputs":[{"name":"statickey"},{"name":"option"}],"output":{"name":"statickey"}}],[11,"get","","Gets the value associated with this TLS key",220,null],[11,"set","","Sets this TLS key to a new value.",220,null],[11,"destroy","","Deallocates this OS TLS key.",220,null],[11,"new","","Creates a new managed OS TLS key.",221,{"inputs":[{"name":"key"},{"name":"option"}],"output":{"name":"key"}}],[11,"get","","See StaticKey::get",221,null],[11,"set","","See StaticKey::set",221,null],[11,"drop","","",221,null],[11,"clone","std::sys_common::wtf8","",222,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"partial_cmp","","",222,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",222,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",222,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",222,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",222,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",222,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"eq","","",222,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",222,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",222,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u32_unchecked","","Unsafely creates a new `CodePoint` without checking the value.",222,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"codepoint"}}],[11,"from_u32","","Creates a new `CodePoint` if the value is a valid code point.",222,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_char","","Creates a new `CodePoint` from a `char`.",222,{"inputs":[{"name":"codepoint"},{"name":"char"}],"output":{"name":"codepoint"}}],[11,"to_u32","","Returns the numeric value of the code point.",222,{"inputs":[{"name":"codepoint"}],"output":{"name":"u32"}}],[11,"to_char","","Optionally returns a Unicode scalar value for the code point.",222,{"inputs":[{"name":"codepoint"}],"output":{"name":"option"}}],[11,"to_char_lossy","","Returns a Unicode scalar value for the code point.",222,{"inputs":[{"name":"codepoint"}],"output":{"name":"char"}}],[11,"clone","","",223,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"partial_cmp","","",223,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"option"}}],[11,"lt","","",223,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"le","","",223,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"gt","","",223,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ge","","",223,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"cmp","","",223,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"ordering"}}],[11,"eq","","",223,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ne","","",223,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"from_str","","Creates a WTF-8 slice from a UTF-8 `&str` slice.",224,{"inputs":[{"name":"wtf8"},{"name":"str"}],"output":{"name":"wtf8"}}],[11,"len","","Returns the length, in WTF-8 bytes.",224,{"inputs":[{"name":"wtf8"}],"output":{"name":"usize"}}],[11,"ascii_byte_at","","Returns the code point at `position` if it is in the ASCII range,\nor `b'\\xFF' otherwise.",224,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"code_points","","Returns an iterator for the string’s code points.",224,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8codepoints"}}],[11,"as_str","","Tries to convert the string to UTF-8 and return a `&str` slice.",224,{"inputs":[{"name":"wtf8"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Lossily converts the string to UTF-8.\nReturns a UTF-8 `&str` slice if the contents are well-formed in UTF-8.",224,{"inputs":[{"name":"wtf8"}],"output":{"name":"cow"}}],[11,"encode_wide","","Converts the WTF-8 string to potentially ill-formed UTF-16\nand return an iterator of 16-bit code units.",224,{"inputs":[{"name":"wtf8"}],"output":{"name":"encodewide"}}],[11,"deref","","",223,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"fmt","","",223,{"inputs":[{"name":"wtf8buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new, empty WTF-8 string.",223,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"with_capacity","","Creates a new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",223,{"inputs":[{"name":"wtf8buf"},{"name":"usize"}],"output":{"name":"wtf8buf"}}],[11,"from_string","","Creates a WTF-8 string from a UTF-8 `String`.",223,{"inputs":[{"name":"wtf8buf"},{"name":"string"}],"output":{"name":"wtf8buf"}}],[11,"from_str","","Creates a WTF-8 string from a UTF-8 `&str` slice.",223,{"inputs":[{"name":"wtf8buf"},{"name":"str"}],"output":{"name":"wtf8buf"}}],[11,"from_wide","","Creates a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",223,null],[11,"as_slice","","",223,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",223,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",223,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"usize"}}],[11,"push_str","","Append a UTF-8 slice at the end of the string.",223,null],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",223,null],[11,"push_char","","Append a Unicode scalar value at the end of the string.",223,null],[11,"push","","Append a code point at the end of the string.",223,null],[11,"truncate","","Shortens a string to the specified length.",223,null],[11,"into_string","","Consumes the WTF-8 string and tries to convert it to UTF-8.",223,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"result"}}],[11,"into_string_lossy","","Consumes the WTF-8 string and converts it lossily to UTF-8.",223,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"string"}}],[11,"from_iter","","",223,{"inputs":[{"name":"wtf8buf"},{"name":"t"}],"output":{"name":"wtf8buf"}}],[11,"extend","","",223,null],[11,"partial_cmp","","",224,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"option"}}],[11,"lt","","",224,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"le","","",224,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"gt","","",224,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ge","","",224,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"eq","","",224,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ne","","",224,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"cmp","","",224,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"ordering"}}],[11,"fmt","","",224,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",224,{"inputs":[{"name":"wtf8"},{"name":"range"}],"output":{"name":"wtf8"}}],[11,"index","","",224,{"inputs":[{"name":"wtf8"},{"name":"rangefrom"}],"output":{"name":"wtf8"}}],[11,"index","","",224,{"inputs":[{"name":"wtf8"},{"name":"rangeto"}],"output":{"name":"wtf8"}}],[11,"index","","",224,{"inputs":[{"name":"wtf8"},{"name":"rangefull"}],"output":{"name":"wtf8"}}],[11,"clone","","",225,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"wtf8codepoints"}}],[11,"next","","",225,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"option"}}],[11,"size_hint","","",225,null],[11,"clone","","",226,{"inputs":[{"name":"encodewide"}],"output":{"name":"encodewide"}}],[11,"next","","",226,{"inputs":[{"name":"encodewide"}],"output":{"name":"option"}}],[11,"size_hint","","",226,null],[11,"hash","","",222,null],[11,"hash","","",223,null],[11,"hash","","",224,null],[11,"is_ascii","","",224,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",224,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"to_ascii_lowercase","","",224,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"eq_ignore_ascii_case","","",224,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",224,null],[11,"make_ascii_lowercase","","",224,null],[11,"new","std::sys::condvar","",227,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","",227,null],[11,"notify_all","","",227,null],[11,"wait","","",227,null],[11,"wait_timeout","","",227,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","",227,null],[11,"new","std::sys::fd","",228,{"inputs":[{"name":"filedesc"},{"name":"i32"}],"output":{"name":"filedesc"}}],[11,"raw","","",228,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"into_raw","","Extracts the actual filedescriptor without closing it.",228,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"read","","",228,null],[11,"write","","",228,null],[11,"set_cloexec","","",228,null],[11,"drop","","",228,null],[11,"clone","std::sys::fs","",229,{"inputs":[{"name":"fileattr"}],"output":{"name":"fileattr"}}],[11,"clone","","",230,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",231,{"inputs":[{"name":"filepermissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",231,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"clone","","",231,{"inputs":[{"name":"filepermissions"}],"output":{"name":"filepermissions"}}],[11,"hash","","",232,null],[11,"eq","","",232,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",232,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",232,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"size","","",229,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"perm","","",229,{"inputs":[{"name":"fileattr"}],"output":{"name":"filepermissions"}}],[11,"file_type","","",229,{"inputs":[{"name":"fileattr"}],"output":{"name":"filetype"}}],[11,"as_raw_stat","std::fs","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"stat"}}],[11,"readonly","std::sys::fs","",231,{"inputs":[{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","",231,null],[11,"mode","","",231,{"inputs":[{"name":"filepermissions"}],"output":{"name":"u32"}}],[11,"is_dir","","",232,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","",232,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","",232,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is","","",232,{"inputs":[{"name":"filetype"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"next","","",233,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"drop","","",234,null],[11,"path","","",235,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"file_name","","",235,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"metadata","","",235,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","",235,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"ino","","",235,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"new","","",230,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","",230,null],[11,"write","","",230,null],[11,"append","","",230,null],[11,"truncate","","",230,null],[11,"create","","",230,null],[11,"mode","","",230,null],[11,"open","","",236,{"inputs":[{"name":"file"},{"name":"path"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"open_c","","",236,{"inputs":[{"name":"file"},{"name":"cstr"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"file_attr","","",236,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fsync","","",236,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","",236,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","",236,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"read","","",236,null],[11,"write","","",236,null],[11,"flush","","",236,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",236,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fd","","",236,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",236,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"new","","",237,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"mkdir","","",237,{"inputs":[{"name":"dirbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"set_mode","","",237,null],[11,"fmt","","",236,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::mutex","",238,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","",238,null],[11,"unlock","","",238,null],[11,"try_lock","","",238,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"destroy","","",238,null],[11,"uninitialized","","",239,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"reentrantmutex"}}],[11,"init","","",239,null],[11,"lock","","",239,null],[11,"try_lock","","",239,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"bool"}}],[11,"unlock","","",239,null],[11,"destroy","","",239,null],[11,"new","std::sys::net","",240,{"inputs":[{"name":"socket"},{"name":"socketaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","",240,null],[11,"duplicate","","",240,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"read","","",240,null],[11,"set_timeout","","",240,{"inputs":[{"name":"socket"},{"name":"option"},{"name":"i32"}],"output":{"name":"result"}}],[11,"timeout","","",240,{"inputs":[{"name":"socket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"next","std::sys::os","",241,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",241,null],[11,"fmt","","",242,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",242,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",242,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",243,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",243,null],[11,"len","","",243,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",244,{"inputs":[{"name":"env"}],"output":{"name":"option"}}],[11,"size_hint","","",244,null],[11,"hash","std::sys::os_str","",245,null],[11,"clone","","",245,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"fmt","","",246,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",245,{"inputs":[{"name":"buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","",245,{"inputs":[{"name":"buf"},{"name":"string"}],"output":{"name":"buf"}}],[11,"as_slice","","",245,{"inputs":[{"name":"buf"}],"output":{"name":"slice"}}],[11,"into_string","","",245,{"inputs":[{"name":"buf"}],"output":{"name":"result"}}],[11,"push_slice","","",245,null],[11,"from_str","","",246,{"inputs":[{"name":"slice"},{"name":"str"}],"output":{"name":"slice"}}],[11,"to_str","","",246,{"inputs":[{"name":"slice"}],"output":{"name":"option"}}],[11,"to_string_lossy","","",246,{"inputs":[{"name":"slice"}],"output":{"name":"cow"}}],[11,"to_owned","","",246,{"inputs":[{"name":"slice"}],"output":{"name":"buf"}}],[11,"from_fd","std::sys::pipe","",247,{"inputs":[{"name":"anonpipe"},{"name":"i32"}],"output":{"name":"anonpipe"}}],[11,"read","","",247,null],[11,"write","","",247,null],[11,"raw","","",247,{"inputs":[{"name":"anonpipe"}],"output":{"name":"i32"}}],[11,"fd","","",247,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",247,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"clone","std::sys::process","",248,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"new","","",248,{"inputs":[{"name":"command"},{"name":"osstr"}],"output":{"name":"command"}}],[11,"arg","","",248,null],[11,"args","","",248,null],[11,"env","","",248,null],[11,"env_remove","","",248,null],[11,"env_clear","","",248,null],[11,"cwd","","",248,null],[11,"fmt","","",249,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",249,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",249,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",249,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","",249,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",249,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",249,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","",250,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"spawn","","",250,{"inputs":[{"name":"process"},{"name":"command"},{"name":"stdio"},{"name":"stdio"},{"name":"stdio"}],"output":{"name":"result"}}],[11,"id","","",250,{"inputs":[{"name":"process"}],"output":{"name":"u32"}}],[11,"wait","","",250,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"try_wait","","",250,{"inputs":[{"name":"process"}],"output":{"name":"option"}}],[11,"new","std::sys::rwlock","",251,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","",251,null],[11,"try_read","","",251,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","",251,null],[11,"try_write","","",251,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","",251,null],[11,"write_unlock","","",251,null],[11,"destroy","","",251,null],[11,"new","std::sys::stack_overflow","",252,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"drop","","",252,null],[11,"new","std::sys::thread","",253,{"inputs":[{"name":"thread"},{"name":"usize"},{"name":"box"}],"output":{"name":"result"}}],[11,"yield_now","","",253,null],[11,"set_name","","",253,null],[11,"sleep","","",253,null],[11,"join","","",253,null],[11,"drop","","",253,null],[11,"now","std::sys::time::inner","",254,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"new","std::sys::stdio","",255,{"inputs":[{"name":"stdin"}],"output":{"name":"result"}}],[11,"read","","",255,null],[11,"new","","",256,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write","","",256,null],[11,"new","","",257,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write","","",257,null],[11,"write","","",257,null],[11,"flush","","",257,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"new","std::rand::os::imp","Create a new `OsRng`.",258,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",258,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",258,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",258,null],[11,"new","std::rand::reader","Create a new `ReaderRng` from a `Read`.",259,{"inputs":[{"name":"readerrng"},{"name":"r"}],"output":{"name":"readerrng"}}],[11,"next_u32","","",259,{"inputs":[{"name":"readerrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",259,{"inputs":[{"name":"readerrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",259,null],[11,"clone","std::rand","",260,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",260,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",260,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",260,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",260,null],[11,"from_seed","","",260,null],[11,"reseed","","",261,null],[11,"clone","","",262,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",262,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",262,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",262,null],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",263,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",263,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",263,null],[11,"finish","","",263,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",263,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",263,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"clone","collections::str","",264,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",264,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",264,null],[11,"borrow","collections::string","",87,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",265,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",265,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",265,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",265,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",266,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",267,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",266,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",266,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",266,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",268,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",268,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",268,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",268,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",268,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",268,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",268,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",268,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",269,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",269,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",269,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",269,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",269,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",269,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",269,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",269,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",270,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",270,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",270,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",270,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",270,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",270,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",270,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",270,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",271,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",271,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",272,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",272,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",273,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",273,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",271,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",271,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",271,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",271,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",271,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",274,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",274,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",275,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",275,null],[11,"matching","","",275,null],[11,"use_early_reject","","",276,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",276,null],[11,"matching","","",276,null],[11,"eq","core::ops","",277,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",277,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",277,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",277,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",278,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",278,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",278,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",278,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",279,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",279,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",279,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",279,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",280,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",280,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",280,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",280,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",281,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",281,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",281,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",281,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",281,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",281,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",281,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"clone","alloc::boxed","",282,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",283,null],[11,"make_place","","",283,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",283,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",3,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",282,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",283,null],[11,"new","","Allocates memory on the heap and then moves `x` into it.",3,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",3,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",3,null],[11,"default","","",3,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",3,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",3,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",3,null],[11,"clone","","",3,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",3,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",3,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",3,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",3,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",3,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",3,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",3,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",3,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",3,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",3,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",3,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",3,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",3,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"clone","core::fmt::rt::v1","",284,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",285,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",286,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",286,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",286,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",287,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",288,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"hash","core::marker","",289,null],[11,"eq","","",289,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",289,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",289,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",289,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",289,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"new","core::ptr","Creates a new `Unique`.",290,null],[11,"get","","Dereferences the content.",290,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",290,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",290,null],[11,"fmt","","",290,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",291,null],[11,"clone","","",291,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",291,null],[11,"fmt","","",291,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",292,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",292,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",292,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",292,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",292,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",292,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",292,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",292,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_unique","","",292,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",292,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",292,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",292,null],[11,"clone","","Makes a clone of the `Rc<T>`.",292,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",292,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",292,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",292,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",292,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",292,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",292,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",292,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",292,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",292,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",292,null],[11,"fmt","","",292,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",292,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",292,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",293,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",293,null],[11,"clone","","Makes a clone of the `Weak<T>`.",293,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",293,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",292,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",292,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"fmt","core::simd","",294,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",294,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",295,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",295,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",296,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",296,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",297,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",297,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",298,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",298,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",299,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",299,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",300,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",300,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",301,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",301,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",302,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",302,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",303,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",303,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"add","","",298,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"add","","",299,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"add","","",300,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"add","","",301,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"add","","",294,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"add","","",295,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"add","","",296,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"add","","",297,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"add","","",302,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"add","","",303,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",298,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"sub","","",299,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"sub","","",300,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"sub","","",301,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"sub","","",294,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"sub","","",295,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"sub","","",296,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"sub","","",297,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"sub","","",302,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",303,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",298,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"mul","","",299,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"mul","","",300,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"mul","","",301,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"mul","","",294,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"mul","","",295,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"mul","","",296,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"mul","","",297,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"mul","","",302,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",303,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",302,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",303,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"shl","","",298,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shl","","",299,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shl","","",300,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shl","","",301,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shl","","",294,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shl","","",295,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shl","","",296,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shl","","",297,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"shr","","",298,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shr","","",299,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shr","","",300,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shr","","",301,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shr","","",294,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shr","","",295,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shr","","",296,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shr","","",297,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitand","","",298,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitand","","",299,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitand","","",300,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitand","","",301,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitand","","",294,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitand","","",295,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitand","","",296,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitand","","",297,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitor","","",298,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitor","","",299,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitor","","",300,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitor","","",301,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitor","","",294,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitor","","",295,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitor","","",296,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitor","","",297,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitxor","","",298,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitxor","","",299,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitxor","","",300,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitxor","","",301,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitxor","","",294,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitxor","","",295,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitxor","","",296,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitxor","","",297,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"next","rustc_unicode::char","",304,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",305,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"next","","",306,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"clone","","",307,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",307,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",307,null],[11,"clone","core::raw","",308,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",309,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"cmp","collections::string","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",87,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",87,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",87,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a `String`, including invalid characters.",87,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",87,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",87,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",87,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",87,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",87,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",87,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Pushes the given string onto this string buffer.",87,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",87,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",87,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",87,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",87,null],[11,"push","","Adds the given character to the end of the string.",87,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",87,null],[11,"truncate","","Shortens a string to the specified length.",87,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",87,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",87,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",87,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",87,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of bytes in this string.",87,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",87,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",87,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",87,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts the string into `Box<str>`.",87,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_boxed_slice","","Converts the string into `Box<str>`.",87,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Consumes this error, returning the bytes that were attempted to make a\n`String` with.",8,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",8,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",8,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",87,null],[11,"from_iter","","",87,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",87,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",87,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",87,null],[11,"extend","","",87,null],[11,"extend","","",87,null],[11,"extend","","",87,null],[11,"eq","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",310,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",310,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",310,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",310,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",87,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",310,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",310,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","collections::string","",87,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",87,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",87,null],[11,"add","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",87,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",87,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",87,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",87,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",87,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",87,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",87,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",87,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",87,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",87,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",311,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",311,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",311,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",87,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",87,null],[11,"from","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",310,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",310,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",87,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",87,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",87,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",312,null],[11,"next","","",312,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",312,null],[11,"next_back","","",312,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"hash","core::result","",313,null],[11,"fmt","","",313,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",313,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",313,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",313,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",313,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",313,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",313,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",313,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",313,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",313,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",313,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",313,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",313,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",313,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",313,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",313,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",313,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",313,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",313,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",313,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",313,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",313,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",313,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",313,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",313,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",313,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",313,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",313,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",313,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",313,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",313,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",313,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",314,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",314,null],[11,"next_back","","",314,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",314,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",315,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",315,null],[11,"next_back","","",315,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",316,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",316,null],[11,"next_back","","",316,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",313,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"clone","core::iter","",317,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",317,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",317,null],[11,"next_back","","",317,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",318,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",318,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",318,null],[11,"next_back","","",318,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",319,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",319,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",319,null],[11,"clone","","",320,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",321,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",320,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",320,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",320,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",320,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",320,null],[11,"next_back","","",320,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",322,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",322,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",322,null],[11,"next_back","","",322,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",323,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",323,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",323,null],[11,"next_back","","",323,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",324,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",324,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",324,null],[11,"next_back","","",324,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",325,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",325,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",325,null],[11,"next_back","","",325,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",326,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",326,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",326,null],[11,"nth","","",326,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",326,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",326,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",327,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",327,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",327,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",327,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",327,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",327,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",327,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",327,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",328,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",328,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",328,null],[11,"clone","","",329,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",329,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",329,null],[11,"clone","","",330,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",330,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",330,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",330,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",330,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",330,null],[11,"clone","","",331,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",331,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",331,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",331,null],[11,"clone","","",332,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",332,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",332,null],[11,"clone","","",333,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",333,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",333,null],[11,"next_back","","",333,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",334,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",334,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",334,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",334,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",334,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",334,null],[11,"next_back","","",334,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",335,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",335,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",335,null],[11,"next_back","","",335,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",336,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",279,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",278,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",336,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",336,null],[11,"clone","","",337,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",337,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",337,null],[11,"next_back","","",337,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",336,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",336,null],[11,"next","core::ops","",278,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",278,null],[11,"next_back","","",278,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",279,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",338,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",338,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",338,null],[11,"next_back","","",338,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",339,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",339,null],[11,"next_back","","",339,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",339,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",339,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",339,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",340,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",340,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",340,null],[11,"next_back","","",340,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",340,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"borrow","collections::borrow","",310,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",310,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",310,null],[11,"into_owned","","Extracts the owned data.",310,null],[11,"deref","","",310,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",310,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",310,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",310,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",310,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",310,null],[11,"into_cow","","",310,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",310,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",61,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",61,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",61,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",61,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",61,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",61,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",61,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",61,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",61,null],[11,"as_slice","","Extracts a slice containing the entire vector.",61,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",61,null],[11,"set_len","","Sets the length of a vector.",61,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",61,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",61,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",61,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",61,null],[11,"push","","Appends an element to the back of a collection.",61,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",61,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",61,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",61,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",61,null],[11,"len","","Returns the number of elements in the vector.",61,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",61,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",61,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",61,null],[11,"push_all","","Appends all elements in a slice to the `Vec`.",61,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",61,null],[11,"clone","","",61,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",61,null],[11,"hash","","",61,null],[11,"index","","",61,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",61,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",61,null],[11,"index","","",61,null],[11,"index","","",61,null],[11,"index","","",61,null],[11,"index_mut","","",61,null],[11,"index_mut","","",61,null],[11,"index_mut","","",61,null],[11,"index_mut","","",61,null],[11,"deref","","",61,null],[11,"deref_mut","","",61,null],[11,"from_iter","","",61,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",61,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",61,null],[11,"extend","","",61,null],[11,"eq","","",61,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","collections::borrow","",310,null],[11,"ne","","",310,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",310,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",310,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"partial_cmp","","",61,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",61,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",61,null],[11,"default","","",61,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",61,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",61,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",61,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",61,null],[11,"as_mut","","",61,null],[11,"from","","",61,null],[11,"from","","",61,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",310,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",61,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",341,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",341,null],[11,"count","","",341,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",341,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",341,null],[11,"next","","",342,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",342,null],[11,"next_back","","",342,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",342,null],[11,"borrow","","",61,null],[11,"borrow_mut","","",61,null],[11,"fmt","","",343,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",343,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",343,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",343,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",343,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",343,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",343,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",343,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",344,null],[11,"fmt","","",344,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",344,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",344,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",344,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",344,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"hash","core::option","",345,null],[11,"fmt","","",345,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",345,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",345,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",345,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",345,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",345,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",345,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",345,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",345,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",345,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",345,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",345,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",345,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",345,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",345,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",345,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",345,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",345,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",345,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",345,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",345,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",345,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",345,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",345,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",345,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",345,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",345,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",345,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",345,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",345,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",345,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",345,null],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",345,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",345,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",345,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",345,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",346,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",346,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",346,null],[11,"next_back","","",346,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",347,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",347,null],[11,"next_back","","",347,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",347,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",348,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",348,null],[11,"next_back","","",348,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",349,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",349,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",349,null],[11,"next_back","","",349,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",345,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",350,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",350,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",350,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",350,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",350,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",350,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",350,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",351,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",351,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",351,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",351,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",352,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",352,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",352,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",352,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",352,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",352,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",352,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",352,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",352,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",353,null],[11,"clone","","",353,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",354,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",354,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",354,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",354,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",355,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",355,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",356,null],[11,"deref","","",355,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",355,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",357,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",357,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",357,null],[3,"Ipv4Addr","mio","Representation of an IPv4 address.",null,null],[3,"Ipv6Addr","","Representation of an IPv6 address.",null,null],[3,"PollOpt","","",null,null],[3,"EventSet","","",null,null],[3,"EventLoop","","Single threaded IO event loop.",null,null],[3,"EventLoopConfig","","Configure EventLoop runtime details",null,null],[12,"io_poll_timeout_ms","","",358,null],[12,"notify_capacity","","",358,null],[12,"messages_per_tick","","",358,null],[12,"timer_tick_ms","","",358,null],[12,"timer_wheel_size","","",358,null],[12,"timer_capacity","","",358,null],[3,"Sender","","Sends messages to the EventLoop from other threads.",null,null],[3,"Poll","","",null,null],[3,"Timeout","","",null,null],[3,"TimerError","","",null,null],[3,"Token","","",null,null],[3,"Io","","",null,null],[3,"Selector","","",null,null],[4,"IpAddr","","An IP address, either a IPv4 or IPv6 address.",null,null],[13,"V4","","",359,null],[13,"V6","","",359,null],[4,"NotifyError","","",null,null],[13,"Io","","",360,null],[13,"Full","","",360,null],[13,"Closed","","",360,null],[0,"util","","Utilities for non-blocking IO programs",null,null],[3,"BoundedQueue","mio::util","",null,null],[11,"with_capacity","","",361,{"inputs":[{"name":"boundedqueue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","",361,{"inputs":[{"name":"boundedqueue"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop","","",361,{"inputs":[{"name":"boundedqueue"}],"output":{"name":"option"}}],[11,"clone","","",361,{"inputs":[{"name":"boundedqueue"}],"output":{"name":"queue"}}],[6,"Slab","","",null,null],[11,"cmp","mio","",362,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",362,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"option"}}],[11,"lt","","",362,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"le","","",362,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"gt","","",362,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ge","","",362,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"clone","","",362,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"eq","","",362,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ne","","",362,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"edge","","",362,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"empty","","",362,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"level","","",362,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"oneshot","","",362,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"all","","",362,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"is_edge","","",362,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"is_level","","",362,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"is_oneshot","","",362,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"bits","","",362,{"inputs":[{"name":"pollopt"}],"output":{"name":"usize"}}],[11,"contains","","",362,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"insert","","",362,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":null}],[11,"remove","","",362,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":null}],[11,"bitor","","",362,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitxor","","",362,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitand","","",362,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"sub","","",362,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"not","","",362,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"fmt","","",362,{"inputs":[{"name":"pollopt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",363,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",363,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"option"}}],[11,"lt","","",363,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"le","","",363,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"gt","","",363,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"ge","","",363,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"clone","","",363,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"eq","","",363,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"ne","","",363,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"none","","",363,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"readable","","",363,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"writable","","",363,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"error","","",363,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"hup","","",363,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"all","","",363,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"is_readable","","",363,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"is_writable","","",363,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"is_error","","",363,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"is_hup","","",363,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"insert","","",363,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":null}],[11,"remove","","",363,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":null}],[11,"bits","","",363,{"inputs":[{"name":"eventset"}],"output":{"name":"usize"}}],[11,"contains","","",363,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"bitor","","",363,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"bitxor","","",363,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"bitand","","",363,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"sub","","",363,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"not","","",363,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"fmt","","",363,{"inputs":[{"name":"eventset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",358,{"inputs":[{"name":"eventloopconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",358,{"inputs":[{"name":"eventloopconfig"}],"output":{"name":"eventloopconfig"}}],[11,"default","","",358,{"inputs":[{"name":"eventloopconfig"}],"output":{"name":"eventloopconfig"}}],[11,"fmt","","",364,{"inputs":[{"name":"eventloop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a new event loop using default configuration settings. The\nevent loop will not be running yet.",364,{"inputs":[{"name":"eventloop"}],"output":{"name":"result"}}],[11,"configured","","",364,{"inputs":[{"name":"eventloop"},{"name":"eventloopconfig"}],"output":{"name":"result"}}],[11,"channel","","Returns a sender that allows sending messages to the event loop in a\nthread-safe way, waking up the event loop if needed.",364,{"inputs":[{"name":"eventloop"}],"output":{"name":"sender"}}],[11,"timeout_ms","","Schedules a timeout after the requested time interval. When the\nduration has been reached,\n[Handler::timeout](trait.Handler.html#method.timeout) will be invoked\npassing in the supplied token.",364,{"inputs":[{"name":"eventloop"},{"name":"timeout"},{"name":"u64"}],"output":{"name":"timerresult"}}],[11,"clear_timeout","","If the supplied timeout has not been triggered, cancel it such that it\nwill not be triggered in the future.",364,{"inputs":[{"name":"eventloop"},{"name":"timeout"}],"output":{"name":"bool"}}],[11,"shutdown","","Tells the event loop to exit after it is done handling all events in the\ncurrent iteration.",364,{"inputs":[{"name":"eventloop"}],"output":null}],[11,"is_running","","Indicates whether the event loop is currently running. If it's not it has either\nstopped or is scheduled to stop on the next tick.",364,{"inputs":[{"name":"eventloop"}],"output":{"name":"bool"}}],[11,"register","","Registers an IO handle with the event loop.",364,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"}],"output":{"name":"result"}}],[11,"register_opt","","Registers an IO handle with the event loop.",364,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Re-Registers an IO handle with the event loop.",364,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"run","","Keep spinning the event loop indefinitely, and notify the handler whenever\nany of the registered handles are ready.",364,{"inputs":[{"name":"eventloop"},{"name":"h"}],"output":{"name":"result"}}],[11,"deregister","","Deregisters an IO handle with the event loop.",364,{"inputs":[{"name":"eventloop"},{"name":"e"}],"output":{"name":"result"}}],[11,"run_once","","Spin the event loop once, with a timeout of one second, and notify the\nhandler if any of the registered handles become ready during that\ntime.",364,{"inputs":[{"name":"eventloop"},{"name":"h"}],"output":{"name":"result"}}],[11,"drop","","",364,{"inputs":[{"name":"eventloop"}],"output":null}],[11,"clone","","",365,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"fmt","","",365,{"inputs":[{"name":"sender"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","",365,{"inputs":[{"name":"sender"},{"name":"m"}],"output":{"name":"result"}}],[11,"read_to_end","mio::io","Read all bytes until EOF in this source, placing them into `buf`.",366,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",366,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",366,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",366,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",366,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",366,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",366,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",366,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[11,"tee","","Creates a reader adaptor which will write all read data into the given\noutput stream.",366,{"inputs":[{"name":"read"},{"name":"w"}],"output":{"name":"tee"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",367,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",367,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",367,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[11,"broadcast","","Creates a new writer which will write all data to both this writer and\nanother writer.",367,{"inputs":[{"name":"write"},{"name":"w"}],"output":{"name":"broadcast"}}],[11,"from_str","mio","",359,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",360,{"inputs":[{"name":"notifyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",368,{"inputs":[{"name":"poll"}],"output":{"name":"result"}}],[11,"register","","",368,{"inputs":[{"name":"poll"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",368,{"inputs":[{"name":"poll"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",368,{"inputs":[{"name":"poll"},{"name":"e"}],"output":{"name":"result"}}],[11,"poll","","",368,{"inputs":[{"name":"poll"},{"name":"usize"}],"output":{"name":"result"}}],[11,"event","","",368,{"inputs":[{"name":"poll"},{"name":"usize"}],"output":{"name":"ioevent"}}],[11,"fmt","","",368,{"inputs":[{"name":"poll"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",369,{"inputs":[{"name":"selector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",369,{"inputs":[{"name":"selector"}],"output":{"name":"result"}}],[11,"select","","Wait for events from the OS",369,{"inputs":[{"name":"selector"},{"name":"events"},{"name":"usize"}],"output":{"name":"result"}}],[11,"register","","Register event interests for the given IO handle with the OS",369,{"inputs":[{"name":"selector"},{"name":"rawfd"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Register event interests for the given IO handle with the OS",369,{"inputs":[{"name":"selector"},{"name":"rawfd"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","Deregister event interests for the given IO handle with the OS",369,{"inputs":[{"name":"selector"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"drop","","",369,{"inputs":[{"name":"selector"}],"output":null}],[11,"fmt","","",370,{"inputs":[{"name":"io"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw_fd","","",370,{"inputs":[{"name":"io"},{"name":"rawfd"}],"output":{"name":"io"}}],[11,"from","","",370,{"inputs":[{"name":"io"},{"name":"rawfd"}],"output":{"name":"io"}}],[11,"from_raw_fd","","",370,{"inputs":[{"name":"io"},{"name":"rawfd"}],"output":{"name":"io"}}],[11,"as_raw_fd","","",370,{"inputs":[{"name":"io"}],"output":{"name":"rawfd"}}],[11,"register","","",370,{"inputs":[{"name":"io"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",370,{"inputs":[{"name":"io"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",370,{"inputs":[{"name":"io"},{"name":"selector"}],"output":{"name":"result"}}],[11,"read","","",370,null],[11,"write","","",370,null],[11,"flush","","",370,{"inputs":[{"name":"io"}],"output":{"name":"result"}}],[11,"drop","","",370,{"inputs":[{"name":"io"}],"output":null}],[11,"clone","libc::types::os::common::posix01","",371,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",372,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",373,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",374,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","libc::types::os::common::bsd43","",375,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","libc::types::os::common::bsd44","",376,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",377,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",378,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",379,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",380,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",381,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",382,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",383,{"inputs":[{"name":"ip6_mreq"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",384,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",385,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",386,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","libc::types::os::arch::posix01","",387,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",388,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",389,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","libc::types::os::arch::extra","",390,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"from_errno","nix","",391,{"inputs":[{"name":"error"},{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",391,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"invalid_argument","","",391,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"errno","","",391,{"inputs":[{"name":"error"}],"output":{"name":"errno"}}],[11,"eq","nix::errno::consts","",392,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"ne","","",392,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"clone","","",392,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"fmt","","",392,{"inputs":[{"name":"errno"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"last","","",392,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"desc","","",392,{"inputs":[{"name":"errno"}],"output":{"name":"str"}}],[11,"from_i32","","",392,{"inputs":[{"name":"errno"},{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",392,null],[11,"fmt","nix::fcntl::ffi::os","",393,{"inputs":[{"name":"flock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",393,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",393,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"hash","nix::fcntl::consts","",394,null],[11,"cmp","","",394,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",394,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"option"}}],[11,"lt","","",394,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"le","","",394,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"gt","","",394,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ge","","",394,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"clone","","",394,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"eq","","",394,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ne","","",394,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",394,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",394,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",394,{"inputs":[{"name":"oflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",394,{"inputs":[{"name":"oflag"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",394,{"inputs":[{"name":"oflag"},{"name":"i32"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",394,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",394,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",394,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",394,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",394,null],[11,"remove","","Removes the specified flags in-place.",394,null],[11,"toggle","","Toggles the specified flags in-place.",394,null],[11,"bitor","","Returns the union of the two sets of flags.",394,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",394,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",394,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",394,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"not","","Returns the complement of this set of flags.",394,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"hash","","",395,null],[11,"cmp","","",395,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",395,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"option"}}],[11,"lt","","",395,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",395,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",395,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",395,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",395,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"eq","","",395,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",395,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",395,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",395,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",395,{"inputs":[{"name":"fdflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",395,{"inputs":[{"name":"fdflag"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",395,{"inputs":[{"name":"fdflag"},{"name":"i32"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",395,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",395,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",395,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",395,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",395,null],[11,"remove","","Removes the specified flags in-place.",395,null],[11,"toggle","","Toggles the specified flags in-place.",395,null],[11,"bitor","","Returns the union of the two sets of flags.",395,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",395,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",395,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",395,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",395,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"hash","nix::mount","",396,null],[11,"cmp","","",396,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",396,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"option"}}],[11,"lt","","",396,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"le","","",396,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"gt","","",396,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ge","","",396,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"clone","","",396,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"eq","","",396,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ne","","",396,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",396,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",396,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",396,{"inputs":[{"name":"msflags"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",396,{"inputs":[{"name":"msflags"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",396,{"inputs":[{"name":"msflags"},{"name":"u64"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",396,{"inputs":[{"name":"msflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",396,{"inputs":[{"name":"msflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",396,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",396,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",396,null],[11,"remove","","Removes the specified flags in-place.",396,null],[11,"toggle","","Toggles the specified flags in-place.",396,null],[11,"bitor","","Returns the union of the two sets of flags.",396,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",396,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",396,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",396,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"not","","Returns the complement of this set of flags.",396,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"hash","","",397,null],[11,"cmp","","",397,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",397,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"option"}}],[11,"lt","","",397,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"le","","",397,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"gt","","",397,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ge","","",397,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"clone","","",397,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"eq","","",397,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ne","","",397,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",397,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"all","","Returns the set containing all flags.",397,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",397,{"inputs":[{"name":"mntflags"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",397,{"inputs":[{"name":"mntflags"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",397,{"inputs":[{"name":"mntflags"},{"name":"i32"}],"output":{"name":"mntflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",397,{"inputs":[{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",397,{"inputs":[{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",397,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",397,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",397,null],[11,"remove","","Removes the specified flags in-place.",397,null],[11,"toggle","","Toggles the specified flags in-place.",397,null],[11,"bitor","","Returns the union of the two sets of flags.",397,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",397,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",397,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",397,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"not","","Returns the complement of this set of flags.",397,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"hash","nix::mqueue::consts","",398,null],[11,"cmp","","",398,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",398,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"option"}}],[11,"lt","","",398,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"le","","",398,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"gt","","",398,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"ge","","",398,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"clone","","",398,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"eq","","",398,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"ne","","",398,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",398,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"all","","Returns the set containing all flags.",398,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",398,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",398,{"inputs":[{"name":"mq_oflag"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",398,{"inputs":[{"name":"mq_oflag"},{"name":"i32"}],"output":{"name":"mq_oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",398,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",398,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",398,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",398,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",398,null],[11,"remove","","Removes the specified flags in-place.",398,null],[11,"toggle","","Toggles the specified flags in-place.",398,null],[11,"bitor","","Returns the union of the two sets of flags.",398,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",398,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",398,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",398,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"not","","Returns the complement of this set of flags.",398,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"hash","","",399,null],[11,"cmp","","",399,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",399,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"option"}}],[11,"lt","","",399,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",399,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",399,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",399,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",399,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"eq","","",399,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",399,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",399,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",399,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",399,{"inputs":[{"name":"fdflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",399,{"inputs":[{"name":"fdflag"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",399,{"inputs":[{"name":"fdflag"},{"name":"i32"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",399,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",399,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",399,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",399,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",399,null],[11,"remove","","Removes the specified flags in-place.",399,null],[11,"toggle","","Toggles the specified flags in-place.",399,null],[11,"bitor","","Returns the union of the two sets of flags.",399,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",399,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",399,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",399,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",399,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"fmt","nix::mqueue","",400,{"inputs":[{"name":"mqattr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",400,{"inputs":[{"name":"mqattr"}],"output":{"name":"mqattr"}}],[11,"clone","nix::sched","",401,{"inputs":[{"name":"cpuset"}],"output":{"name":"cpuset"}}],[11,"new","","",401,{"inputs":[{"name":"cpuset"}],"output":{"name":"cpuset"}}],[11,"set","","",401,null],[11,"unset","","",401,null],[11,"hash","nix::sys::epoll","",402,null],[11,"cmp","","",402,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",402,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"option"}}],[11,"lt","","",402,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"le","","",402,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"gt","","",402,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"ge","","",402,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"clone","","",402,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"eq","","",402,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"ne","","",402,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",402,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"all","","Returns the set containing all flags.",402,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",402,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",402,{"inputs":[{"name":"epolleventkind"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",402,{"inputs":[{"name":"epolleventkind"},{"name":"u32"}],"output":{"name":"epolleventkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",402,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",402,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",402,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",402,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",402,null],[11,"remove","","Removes the specified flags in-place.",402,null],[11,"toggle","","Toggles the specified flags in-place.",402,null],[11,"bitor","","Returns the union of the two sets of flags.",402,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",402,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",402,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"sub","","Returns the set difference of the two sets of flags.",402,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"not","","Returns the complement of this set of flags.",402,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"fmt","","",402,{"inputs":[{"name":"epolleventkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",403,{"inputs":[{"name":"epollop"}],"output":{"name":"epollop"}}],[11,"clone","","",404,{"inputs":[{"name":"epollevent"}],"output":{"name":"epollevent"}}],[11,"hash","nix::sys::ioctl","",405,null],[11,"cmp","","",405,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",405,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"option"}}],[11,"lt","","",405,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"le","","",405,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"gt","","",405,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"ge","","",405,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"clone","","",405,{"inputs":[{"name":"ioctldirflags"}],"output":{"name":"ioctldirflags"}}],[11,"eq","","",405,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"ne","","",405,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",405,{"inputs":[{"name":"ioctldirflags"}],"output":{"name":"ioctldirflags"}}],[11,"all","","Returns the set containing all flags.",405,{"inputs":[{"name":"ioctldirflags"}],"output":{"name":"ioctldirflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",405,{"inputs":[{"name":"ioctldirflags"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",405,{"inputs":[{"name":"ioctldirflags"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",405,{"inputs":[{"name":"ioctldirflags"},{"name":"u8"}],"output":{"name":"ioctldirflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",405,{"inputs":[{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",405,{"inputs":[{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",405,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",405,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",405,null],[11,"remove","","Removes the specified flags in-place.",405,null],[11,"toggle","","Toggles the specified flags in-place.",405,null],[11,"bitor","","Returns the union of the two sets of flags.",405,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"ioctldirflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",405,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"ioctldirflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",405,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"ioctldirflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",405,{"inputs":[{"name":"ioctldirflags"},{"name":"ioctldirflags"}],"output":{"name":"ioctldirflags"}}],[11,"not","","Returns the complement of this set of flags.",405,{"inputs":[{"name":"ioctldirflags"}],"output":{"name":"ioctldirflags"}}],[11,"hash","nix::sys::signal::signal","",406,null],[11,"cmp","","",406,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",406,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",406,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",406,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",406,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",406,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",406,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",406,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",406,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",406,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",406,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",406,{"inputs":[{"name":"sockflag"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",406,{"inputs":[{"name":"sockflag"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",406,{"inputs":[{"name":"sockflag"},{"name":"u64"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",406,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",406,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",406,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",406,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",406,null],[11,"remove","","Removes the specified flags in-place.",406,null],[11,"toggle","","Toggles the specified flags in-place.",406,null],[11,"bitor","","Returns the union of the two sets of flags.",406,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",406,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",406,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",406,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",406,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"clone","","",407,{"inputs":[{"name":"siginfo"}],"output":{"name":"siginfo"}}],[11,"clone","","",408,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","nix::sys::signal","",409,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset"}}],[11,"empty","","",409,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset"}}],[11,"add","","",409,{"inputs":[{"name":"sigset"},{"name":"i32"}],"output":{"name":"result"}}],[11,"remove","","",409,{"inputs":[{"name":"sigset"},{"name":"i32"}],"output":{"name":"result"}}],[11,"new","","",410,null],[11,"hash","nix::sys::socket::addr","",411,null],[11,"fmt","","",411,{"inputs":[{"name":"addressfamily"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",411,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"ne","","",411,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"clone","","",411,{"inputs":[{"name":"addressfamily"}],"output":{"name":"addressfamily"}}],[11,"from_std","","",412,{"inputs":[{"name":"inetaddr"},{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",412,{"inputs":[{"name":"inetaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",412,{"inputs":[{"name":"inetaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",412,{"inputs":[{"name":"inetaddr"}],"output":{"name":"u16"}}],[11,"to_std","","",412,{"inputs":[{"name":"inetaddr"}],"output":{"name":"socketaddr"}}],[11,"to_str","","",412,{"inputs":[{"name":"inetaddr"}],"output":{"name":"string"}}],[11,"eq","","",412,{"inputs":[{"name":"inetaddr"},{"name":"inetaddr"}],"output":{"name":"bool"}}],[11,"hash","","",412,null],[11,"clone","","",412,{"inputs":[{"name":"inetaddr"}],"output":{"name":"inetaddr"}}],[11,"fmt","","",412,{"inputs":[{"name":"inetaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",413,{"inputs":[{"name":"ipaddr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",413,{"inputs":[{"name":"ipaddr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",413,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",414,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",414,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",414,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"octets","","",414,null],[11,"to_std","","",414,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",414,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",414,null],[11,"clone","","",414,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"fmt","","",414,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",415,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"new","","",415,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",415,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",415,null],[11,"to_std","","",415,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",415,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",416,{"inputs":[{"name":"unixaddr"},{"name":"p"}],"output":{"name":"result"}}],[11,"path","","",416,{"inputs":[{"name":"unixaddr"}],"output":{"name":"path"}}],[11,"eq","","",416,{"inputs":[{"name":"unixaddr"},{"name":"unixaddr"}],"output":{"name":"bool"}}],[11,"hash","","",416,null],[11,"clone","","",416,{"inputs":[{"name":"unixaddr"}],"output":{"name":"unixaddr"}}],[11,"fmt","","",416,{"inputs":[{"name":"unixaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_inet","","",417,{"inputs":[{"name":"sockaddr"},{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",417,{"inputs":[{"name":"sockaddr"},{"name":"p"}],"output":{"name":"result"}}],[11,"family","","",417,{"inputs":[{"name":"sockaddr"}],"output":{"name":"addressfamily"}}],[11,"to_str","","",417,{"inputs":[{"name":"sockaddr"}],"output":{"name":"string"}}],[11,"as_ffi_pair","","",417,null],[11,"eq","","",417,{"inputs":[{"name":"sockaddr"},{"name":"sockaddr"}],"output":{"name":"bool"}}],[11,"hash","","",417,null],[11,"clone","","",417,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"fmt","","",417,{"inputs":[{"name":"sockaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","nix::sys::socket::multicast","",418,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"fmt","","",418,{"inputs":[{"name":"ip_mreq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",418,{"inputs":[{"name":"ip_mreq"},{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",419,{"inputs":[{"name":"ipv6_mreq"},{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[11,"fmt","nix::sys::socket::sockopt","",420,{"inputs":[{"name":"reuseaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",420,{"inputs":[{"name":"reuseaddr"}],"output":{"name":"reuseaddr"}}],[11,"set","","",420,{"inputs":[{"name":"reuseaddr"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",420,{"inputs":[{"name":"reuseaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",421,{"inputs":[{"name":"reuseport"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",421,{"inputs":[{"name":"reuseport"}],"output":{"name":"reuseport"}}],[11,"set","","",421,{"inputs":[{"name":"reuseport"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",421,{"inputs":[{"name":"reuseport"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",422,{"inputs":[{"name":"tcpnodelay"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",422,{"inputs":[{"name":"tcpnodelay"}],"output":{"name":"tcpnodelay"}}],[11,"set","","",422,{"inputs":[{"name":"tcpnodelay"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",422,{"inputs":[{"name":"tcpnodelay"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",423,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",423,{"inputs":[{"name":"linger"}],"output":{"name":"linger"}}],[11,"set","","",423,{"inputs":[{"name":"linger"},{"name":"i32"},{"name":"linger"}],"output":{"name":"result"}}],[11,"get","","",423,{"inputs":[{"name":"linger"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",424,{"inputs":[{"name":"ipaddmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",424,{"inputs":[{"name":"ipaddmembership"}],"output":{"name":"ipaddmembership"}}],[11,"set","","",424,{"inputs":[{"name":"ipaddmembership"},{"name":"i32"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",425,{"inputs":[{"name":"ipdropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",425,{"inputs":[{"name":"ipdropmembership"}],"output":{"name":"ipdropmembership"}}],[11,"set","","",425,{"inputs":[{"name":"ipdropmembership"},{"name":"i32"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",426,{"inputs":[{"name":"ipv6addmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",426,{"inputs":[{"name":"ipv6addmembership"}],"output":{"name":"ipv6addmembership"}}],[11,"set","","",426,{"inputs":[{"name":"ipv6addmembership"},{"name":"i32"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",427,{"inputs":[{"name":"ipv6dropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",427,{"inputs":[{"name":"ipv6dropmembership"}],"output":{"name":"ipv6dropmembership"}}],[11,"set","","",427,{"inputs":[{"name":"ipv6dropmembership"},{"name":"i32"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",428,{"inputs":[{"name":"ipmulticastttl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",428,{"inputs":[{"name":"ipmulticastttl"}],"output":{"name":"ipmulticastttl"}}],[11,"set","","",428,{"inputs":[{"name":"ipmulticastttl"},{"name":"i32"},{"name":"u8"}],"output":{"name":"result"}}],[11,"get","","",428,{"inputs":[{"name":"ipmulticastttl"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",429,{"inputs":[{"name":"ipmulticastloop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",429,{"inputs":[{"name":"ipmulticastloop"}],"output":{"name":"ipmulticastloop"}}],[11,"set","","",429,{"inputs":[{"name":"ipmulticastloop"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",429,{"inputs":[{"name":"ipmulticastloop"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",430,{"inputs":[{"name":"receivetimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",430,{"inputs":[{"name":"receivetimeout"}],"output":{"name":"receivetimeout"}}],[11,"set","","",430,{"inputs":[{"name":"receivetimeout"},{"name":"i32"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",430,{"inputs":[{"name":"receivetimeout"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",431,{"inputs":[{"name":"sendtimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",431,{"inputs":[{"name":"sendtimeout"}],"output":{"name":"sendtimeout"}}],[11,"set","","",431,{"inputs":[{"name":"sendtimeout"},{"name":"i32"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",431,{"inputs":[{"name":"sendtimeout"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",432,{"inputs":[{"name":"broadcast"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",432,{"inputs":[{"name":"broadcast"}],"output":{"name":"broadcast"}}],[11,"set","","",432,{"inputs":[{"name":"broadcast"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",432,{"inputs":[{"name":"broadcast"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",433,{"inputs":[{"name":"oobinline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",433,{"inputs":[{"name":"oobinline"}],"output":{"name":"oobinline"}}],[11,"set","","",433,{"inputs":[{"name":"oobinline"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",433,{"inputs":[{"name":"oobinline"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",434,{"inputs":[{"name":"socketerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",434,{"inputs":[{"name":"socketerror"}],"output":{"name":"socketerror"}}],[11,"get","","",434,{"inputs":[{"name":"socketerror"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",435,{"inputs":[{"name":"keepalive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",435,{"inputs":[{"name":"keepalive"}],"output":{"name":"keepalive"}}],[11,"set","","",435,{"inputs":[{"name":"keepalive"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",435,{"inputs":[{"name":"keepalive"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",436,{"inputs":[{"name":"tcpkeepidle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",436,{"inputs":[{"name":"tcpkeepidle"}],"output":{"name":"tcpkeepidle"}}],[11,"set","","",436,{"inputs":[{"name":"tcpkeepidle"},{"name":"i32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get","","",436,{"inputs":[{"name":"tcpkeepidle"},{"name":"i32"}],"output":{"name":"result"}}],[11,"blank","","",437,{"inputs":[{"name":"getstruct"}],"output":{"name":"getstruct"}}],[11,"ffi_ptr","","",437,null],[11,"ffi_len","","",437,null],[11,"unwrap","","",437,{"inputs":[{"name":"getstruct"}],"output":{"name":"t"}}],[11,"new","","",438,{"inputs":[{"name":"setstruct"},{"name":"t"}],"output":{"name":"setstruct"}}],[11,"ffi_ptr","","",438,null],[11,"ffi_len","","",438,{"inputs":[{"name":"setstruct"}],"output":{"name":"u32"}}],[11,"blank","","",439,{"inputs":[{"name":"getbool"}],"output":{"name":"getbool"}}],[11,"ffi_ptr","","",439,null],[11,"ffi_len","","",439,null],[11,"unwrap","","",439,{"inputs":[{"name":"getbool"}],"output":{"name":"bool"}}],[11,"new","","",440,{"inputs":[{"name":"setbool"},{"name":"bool"}],"output":{"name":"setbool"}}],[11,"ffi_ptr","","",440,null],[11,"ffi_len","","",440,{"inputs":[{"name":"setbool"}],"output":{"name":"u32"}}],[11,"blank","","",441,{"inputs":[{"name":"getu8"}],"output":{"name":"getu8"}}],[11,"ffi_ptr","","",441,null],[11,"ffi_len","","",441,null],[11,"unwrap","","",441,{"inputs":[{"name":"getu8"}],"output":{"name":"u8"}}],[11,"new","","",442,{"inputs":[{"name":"setu8"},{"name":"u8"}],"output":{"name":"setu8"}}],[11,"ffi_ptr","","",442,null],[11,"ffi_len","","",442,{"inputs":[{"name":"setu8"}],"output":{"name":"u32"}}],[11,"fmt","nix::sys::socket","",443,{"inputs":[{"name":"socktype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",443,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"ne","","",443,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"clone","","",443,{"inputs":[{"name":"socktype"}],"output":{"name":"socktype"}}],[11,"hash","","",444,null],[11,"cmp","","",444,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",444,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",444,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",444,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",444,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",444,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",444,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",444,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",444,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",444,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",444,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",444,{"inputs":[{"name":"sockflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",444,{"inputs":[{"name":"sockflag"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",444,{"inputs":[{"name":"sockflag"},{"name":"i32"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",444,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",444,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",444,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",444,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",444,null],[11,"remove","","Removes the specified flags in-place.",444,null],[11,"toggle","","Toggles the specified flags in-place.",444,null],[11,"bitor","","Returns the union of the two sets of flags.",444,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",444,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",444,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",444,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",444,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"fmt","","",445,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",445,{"inputs":[{"name":"linger"}],"output":{"name":"linger"}}],[11,"fmt","","",446,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",446,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",446,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",446,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"hash","nix::sys::stat","",447,null],[11,"cmp","","",447,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",447,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"option"}}],[11,"lt","","",447,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"le","","",447,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"gt","","",447,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ge","","",447,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"clone","","",447,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"eq","","",447,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ne","","",447,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",447,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",447,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",447,{"inputs":[{"name":"sflag"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",447,{"inputs":[{"name":"sflag"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",447,{"inputs":[{"name":"sflag"},{"name":"u32"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",447,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",447,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",447,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",447,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",447,null],[11,"remove","","Removes the specified flags in-place.",447,null],[11,"toggle","","Toggles the specified flags in-place.",447,null],[11,"bitor","","Returns the union of the two sets of flags.",447,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",447,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",447,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",447,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"not","","Returns the complement of this set of flags.",447,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"hash","","",448,null],[11,"cmp","","",448,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",448,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"option"}}],[11,"lt","","",448,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"le","","",448,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"gt","","",448,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ge","","",448,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",448,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"eq","","",448,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",448,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",448,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",448,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",448,{"inputs":[{"name":"mode"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",448,{"inputs":[{"name":"mode"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",448,{"inputs":[{"name":"mode"},{"name":"u32"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",448,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",448,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",448,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",448,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",448,null],[11,"remove","","Removes the specified flags in-place.",448,null],[11,"toggle","","Toggles the specified flags in-place.",448,null],[11,"bitor","","Returns the union of the two sets of flags.",448,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",448,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",448,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",448,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"not","","Returns the complement of this set of flags.",448,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"fmt","","",447,{"inputs":[{"name":"sflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","nix::sys::termios::ffi::consts","",449,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"hash","","",450,null],[11,"cmp","","",450,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",450,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"option"}}],[11,"lt","","",450,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"le","","",450,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"gt","","",450,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ge","","",450,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"clone","","",450,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"eq","","",450,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ne","","",450,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",450,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",450,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",450,{"inputs":[{"name":"inputflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",450,{"inputs":[{"name":"inputflags"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",450,{"inputs":[{"name":"inputflags"},{"name":"u32"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",450,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",450,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",450,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",450,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",450,null],[11,"remove","","Removes the specified flags in-place.",450,null],[11,"toggle","","Toggles the specified flags in-place.",450,null],[11,"bitor","","Returns the union of the two sets of flags.",450,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",450,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",450,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",450,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"not","","Returns the complement of this set of flags.",450,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"hash","","",451,null],[11,"cmp","","",451,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",451,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"option"}}],[11,"lt","","",451,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"le","","",451,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"gt","","",451,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ge","","",451,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"clone","","",451,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"eq","","",451,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ne","","",451,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",451,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",451,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",451,{"inputs":[{"name":"outputflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",451,{"inputs":[{"name":"outputflags"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",451,{"inputs":[{"name":"outputflags"},{"name":"u32"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",451,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",451,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",451,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",451,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",451,null],[11,"remove","","Removes the specified flags in-place.",451,null],[11,"toggle","","Toggles the specified flags in-place.",451,null],[11,"bitor","","Returns the union of the two sets of flags.",451,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",451,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",451,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",451,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"not","","Returns the complement of this set of flags.",451,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"hash","","",452,null],[11,"cmp","","",452,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",452,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"option"}}],[11,"lt","","",452,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"le","","",452,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"gt","","",452,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ge","","",452,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"clone","","",452,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"eq","","",452,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ne","","",452,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",452,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",452,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",452,{"inputs":[{"name":"controlflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",452,{"inputs":[{"name":"controlflags"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",452,{"inputs":[{"name":"controlflags"},{"name":"u32"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",452,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",452,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",452,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",452,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",452,null],[11,"remove","","Removes the specified flags in-place.",452,null],[11,"toggle","","Toggles the specified flags in-place.",452,null],[11,"bitor","","Returns the union of the two sets of flags.",452,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",452,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",452,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",452,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"not","","Returns the complement of this set of flags.",452,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"hash","","",453,null],[11,"cmp","","",453,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",453,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"option"}}],[11,"lt","","",453,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"le","","",453,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"gt","","",453,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ge","","",453,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"clone","","",453,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"eq","","",453,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ne","","",453,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",453,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",453,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",453,{"inputs":[{"name":"localflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",453,{"inputs":[{"name":"localflags"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",453,{"inputs":[{"name":"localflags"},{"name":"u32"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",453,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",453,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",453,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",453,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",453,null],[11,"remove","","Removes the specified flags in-place.",453,null],[11,"toggle","","Toggles the specified flags in-place.",453,null],[11,"bitor","","Returns the union of the two sets of flags.",453,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",453,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",453,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",453,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"not","","Returns the complement of this set of flags.",453,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"clone","","",454,{"inputs":[{"name":"setarg"}],"output":{"name":"setarg"}}],[11,"clone","","",455,{"inputs":[{"name":"flusharg"}],"output":{"name":"flusharg"}}],[11,"clone","","",456,{"inputs":[{"name":"flowarg"}],"output":{"name":"flowarg"}}],[11,"clone","nix::sys::utsname","",457,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"sysname","","",457,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"nodename","","",457,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"release","","",457,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"version","","",457,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"machine","","",457,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"hash","nix::sys::wait","",458,null],[11,"cmp","","",458,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",458,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"option"}}],[11,"lt","","",458,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"le","","",458,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"gt","","",458,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ge","","",458,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"clone","","",458,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"eq","","",458,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ne","","",458,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",458,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",458,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",458,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",458,{"inputs":[{"name":"waitpidflag"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",458,{"inputs":[{"name":"waitpidflag"},{"name":"i32"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",458,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",458,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",458,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",458,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",458,null],[11,"remove","","Removes the specified flags in-place.",458,null],[11,"toggle","","Toggles the specified flags in-place.",458,null],[11,"bitor","","Returns the union of the two sets of flags.",458,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",458,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",458,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",458,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"not","","Returns the complement of this set of flags.",458,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"fmt","","",459,{"inputs":[{"name":"waitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",459,{"inputs":[{"name":"waitstatus"}],"output":{"name":"waitstatus"}}],[11,"eq","","",459,{"inputs":[{"name":"waitstatus"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",459,{"inputs":[{"name":"waitstatus"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"as_slice","nix::sys::uio","",460,null],[11,"from_slice","","",460,null],[11,"from_mut_slice","","",460,null],[11,"fmt","nix::sys::time","",461,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",461,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",461,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"option"}}],[11,"lt","","",461,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"le","","",461,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"gt","","",461,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ge","","",461,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"eq","","",461,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ne","","",461,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"clone","","",461,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"zero","","",461,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"hours","","",461,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",461,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",461,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",461,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",461,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",461,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_minutes","","",461,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_seconds","","",461,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","",461,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_microseconds","","",461,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"neg","","",461,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"add","","",461,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"sub","","",461,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"mul","","",461,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"div","","",461,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"fmt","","",461,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","nix::unistd","",462,{"inputs":[{"name":"fork"}],"output":{"name":"fork"}}],[11,"is_child","","",462,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[11,"is_parent","","",462,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[11,"eq","nix","",391,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",391,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",391,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",391,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"len","std::path","",96,{"inputs":[{"name":"path"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",96,{"inputs":[{"name":"path"},{"name":"f"}],"output":{"name":"result"}}],[11,"len","","",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",157,{"inputs":[{"name":"pathbuf"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","mio","",463,{"inputs":[{"name":"timeout"}],"output":{"name":"timeout"}}],[11,"fmt","","",464,{"inputs":[{"name":"timererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",465,null],[11,"eq","","",465,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",465,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",465,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",465,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"as_usize","","",465,{"inputs":[{"name":"token"}],"output":{"name":"usize"}}],[11,"from_usize","","",465,{"inputs":[{"name":"token"},{"name":"usize"}],"output":{"name":"token"}}],[11,"as_usize","","",465,{"inputs":[{"name":"token"}],"output":{"name":"usize"}}],[0,"tcp","","",null,null],[3,"TcpSocket","mio::tcp","",null,null],[3,"TcpStream","","",null,null],[3,"TcpListener","","",null,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",466,null],[13,"Write","","Further  transmissions will be disallowed.",466,null],[13,"Both","","Further receptions and transmissions will be disallowed.",466,null],[11,"fmt","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 socket",467,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 socket",467,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"connect","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"listen","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"usize"}],"output":{"name":"result"}}],[11,"peer_addr","","",467,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"local_addr","","",467,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","",467,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"set_reuseaddr","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_socket_error","","",467,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"set_nodelay","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"register","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"tcpsocket"}],"output":{"name":"tcpsocket"}}],[11,"fmt","","",468,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",466,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",466,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",466,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",466,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"connect","","",468,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"peer_addr","","",468,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","",468,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"try_clone","","",468,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",468,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","",468,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",468,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"take_socket_error","","",468,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",468,null],[11,"write","","",468,null],[11,"flush","","",468,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"register","","",468,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",468,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",468,{"inputs":[{"name":"tcpstream"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",468,{"inputs":[{"name":"tcpstream"},{"name":"tcpsocket"}],"output":{"name":"tcpstream"}}],[11,"fmt","","",469,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",469,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",469,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"local_addr","","",469,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","",469,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"from","","",469,{"inputs":[{"name":"tcplistener"},{"name":"tcpsocket"}],"output":{"name":"tcplistener"}}],[11,"register","","",469,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",469,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",469,{"inputs":[{"name":"tcplistener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",469,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",467,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"rawfd"}],"output":{"name":"tcpsocket"}}],[11,"as_raw_fd","","",468,{"inputs":[{"name":"tcpstream"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",468,{"inputs":[{"name":"tcpstream"},{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"as_raw_fd","","",469,{"inputs":[{"name":"tcplistener"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",469,{"inputs":[{"name":"tcplistener"},{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[0,"udp","mio","",null,null],[3,"UdpSocket","mio::udp","",null,null],[11,"fmt","","",470,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",470,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",470,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"bound","","",470,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","",470,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","",470,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","",470,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"send_to","","",470,{"inputs":[{"name":"udpsocket"},{"name":"b"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"recv_from","","",470,{"inputs":[{"name":"udpsocket"},{"name":"b"}],"output":{"name":"result"}}],[11,"set_broadcast","","",470,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",470,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","",470,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",470,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","",470,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"register","","",470,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",470,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",470,{"inputs":[{"name":"udpsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",470,{"inputs":[{"name":"udpsocket"},{"name":"udpsocket"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",470,{"inputs":[{"name":"udpsocket"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",470,{"inputs":[{"name":"udpsocket"},{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[0,"unix","mio","",null,null],[3,"UnixSocket","mio::unix","",null,null],[3,"UnixStream","","",null,null],[3,"UnixListener","","",null,null],[3,"PipeReader","","",null,null],[3,"PipeWriter","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[11,"fmt","","",471,{"inputs":[{"name":"unixsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stream","","Returns a new, unbound, non-blocking Unix domain socket",471,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"connect","","Connect the socket to the specified address",471,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"bind","","Bind the socket to the specified address",471,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"listen","","Listen for incoming requests",471,{"inputs":[{"name":"unixsocket"},{"name":"usize"}],"output":{"name":"result"}}],[11,"try_clone","","",471,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"register","","",471,{"inputs":[{"name":"unixsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",471,{"inputs":[{"name":"unixsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",471,{"inputs":[{"name":"unixsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",471,{"inputs":[{"name":"unixsocket"},{"name":"unixsocket"}],"output":{"name":"unixsocket"}}],[11,"fmt","","",472,{"inputs":[{"name":"unixstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","",472,{"inputs":[{"name":"unixstream"},{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","",472,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"read","","",472,null],[11,"write","","",472,null],[11,"flush","","",472,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"register","","",472,{"inputs":[{"name":"unixstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",472,{"inputs":[{"name":"unixstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",472,{"inputs":[{"name":"unixstream"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",472,{"inputs":[{"name":"unixstream"},{"name":"unixsocket"}],"output":{"name":"unixstream"}}],[11,"fmt","","",473,{"inputs":[{"name":"unixlistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",473,{"inputs":[{"name":"unixlistener"},{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","",473,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"try_clone","","",473,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"register","","",473,{"inputs":[{"name":"unixlistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",473,{"inputs":[{"name":"unixlistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",473,{"inputs":[{"name":"unixlistener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",473,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"from","","",473,{"inputs":[{"name":"unixlistener"},{"name":"unixsocket"}],"output":{"name":"unixlistener"}}],[11,"fmt","","",474,{"inputs":[{"name":"pipereader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",474,null],[11,"register","","",474,{"inputs":[{"name":"pipereader"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",474,{"inputs":[{"name":"pipereader"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",474,{"inputs":[{"name":"pipereader"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",474,{"inputs":[{"name":"pipereader"},{"name":"io"}],"output":{"name":"pipereader"}}],[11,"fmt","","",475,{"inputs":[{"name":"pipewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",475,null],[11,"flush","","",475,{"inputs":[{"name":"pipewriter"}],"output":{"name":"result"}}],[11,"register","","",475,{"inputs":[{"name":"pipewriter"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",475,{"inputs":[{"name":"pipewriter"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",475,{"inputs":[{"name":"pipewriter"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",475,{"inputs":[{"name":"pipewriter"},{"name":"io"}],"output":{"name":"pipewriter"}}],[11,"as_raw_fd","","",471,{"inputs":[{"name":"unixsocket"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",471,{"inputs":[{"name":"unixsocket"},{"name":"rawfd"}],"output":{"name":"unixsocket"}}],[11,"as_raw_fd","","",472,{"inputs":[{"name":"unixstream"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",472,{"inputs":[{"name":"unixstream"},{"name":"rawfd"}],"output":{"name":"unixstream"}}],[11,"as_raw_fd","","",473,{"inputs":[{"name":"unixlistener"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",473,{"inputs":[{"name":"unixlistener"},{"name":"rawfd"}],"output":{"name":"unixlistener"}}],[11,"as_raw_fd","","",474,{"inputs":[{"name":"pipereader"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",474,{"inputs":[{"name":"pipereader"},{"name":"rawfd"}],"output":{"name":"pipereader"}}],[11,"as_raw_fd","","",475,{"inputs":[{"name":"pipewriter"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",475,{"inputs":[{"name":"pipewriter"},{"name":"rawfd"}],"output":{"name":"pipewriter"}}],[0,"prelude","mio","",null,null],[3,"EventLoop","mio::prelude","Single threaded IO event loop.",null,null],[8,"TryRead","","",null,null],[11,"try_read_buf","","",476,{"inputs":[{"name":"tryread"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_read","","",476,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","","",477,{"inputs":[{"name":"trywrite"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_write","","",477,null],[0,"buf","mio","",null,null],[8,"Buf","mio::buf","A trait for values that provide sequential read access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",0,{"inputs":[{"name":"buf"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current Buf position and of length\nbetween 0 and `Buf::remaining()`.",0,null],[10,"advance","","Advance the internal cursor of the Buf",0,null],[11,"has_remaining","","Returns true if there are any more bytes to consume",0,{"inputs":[{"name":"buf"}],"output":{"name":"bool"}}],[11,"read_slice","","Read bytes from the `Buf` into the given slice and advance the cursor by\nthe number of bytes read.\nReturns the number of bytes read.",0,null],[11,"read_byte","","Read a single byte from the `Buf`",0,{"inputs":[{"name":"buf"}],"output":{"name":"option"}}],[8,"MutBuf","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be written to the MutBuf",1,{"inputs":[{"name":"mutbuf"}],"output":{"name":"usize"}}],[10,"advance","","Advance the internal cursor of the MutBuf",1,null],[11,"has_remaining","","Returns true iff there is any more space for bytes to be written",1,{"inputs":[{"name":"mutbuf"}],"output":{"name":"bool"}}],[10,"mut_bytes","","Returns a mutable slice starting at the current MutBuf position and of\nlength between 0 and `MutBuf::remaining()`.",1,null],[11,"write_slice","","Write bytes from the given slice into the `MutBuf` and advance the\ncursor by the number of bytes written.\nReturns the number of bytes written.",1,null],[11,"write_byte","","Write a single byte to the `MuBuf`",1,{"inputs":[{"name":"mutbuf"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"from_slice","bytes::buf::byte","Create a new `ByteBuf` by copying the contents of the given slice.",478,null],[11,"mut_with_capacity","","",478,{"inputs":[{"name":"bytebuf"},{"name":"usize"}],"output":{"name":"mutbytebuf"}}],[11,"none","","",478,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytebuf"}}],[11,"from_mem_ref","","",478,{"inputs":[{"name":"bytebuf"},{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bytebuf"}}],[11,"capacity","","",478,{"inputs":[{"name":"bytebuf"}],"output":{"name":"usize"}}],[11,"flip","","",478,{"inputs":[{"name":"bytebuf"}],"output":{"name":"mutbytebuf"}}],[11,"resume","","Flips the buffer back to mutable, resetting the write position\nto the byte after the previous write.",478,{"inputs":[{"name":"bytebuf"}],"output":{"name":"mutbytebuf"}}],[11,"read_slice","","",478,null],[11,"to_seq_byte_str","","",478,{"inputs":[{"name":"bytebuf"}],"output":{"name":"seqbytestr"}}],[11,"to_bytes","","",478,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytes"}}],[11,"mark","","Marks the current read location.",478,null],[11,"reset","","Resets the read position to the previously marked position.",478,null],[11,"allocate","bytes::alloc::heap","",479,{"inputs":[{"name":"heap"},{"name":"usize"}],"output":{"name":"memref"}}],[11,"deallocate","","",479,null],[11,"allocate","","",479,{"inputs":[{"name":"heap"},{"name":"usize"}],"output":{"name":"memref"}}],[11,"deallocate","","",479,null],[11,"new","bytes::alloc","",480,null],[11,"none","","",480,{"inputs":[{"name":"memref"}],"output":{"name":"memref"}}],[11,"is_none","","",480,{"inputs":[{"name":"memref"}],"output":{"name":"bool"}}],[11,"ptr","","",480,null],[11,"bytes","","",480,null],[11,"bytes_mut","","",480,null],[11,"clone","","",480,{"inputs":[{"name":"memref"}],"output":{"name":"memref"}}],[11,"drop","","",480,null],[11,"new","","",481,null],[11,"remaining","bytes::buf::byte","",478,{"inputs":[{"name":"bytebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",478,null],[11,"advance","","",478,null],[11,"read_slice","","",478,null],[11,"from_mem_ref","","",482,{"inputs":[{"name":"robytebuf"},{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"robytebuf"}}],[11,"to_seq_byte_str","","",482,{"inputs":[{"name":"robytebuf"}],"output":{"name":"seqbytestr"}}],[11,"to_bytes","","",482,{"inputs":[{"name":"robytebuf"}],"output":{"name":"bytes"}}],[11,"mark","","Marks the current read location.",482,null],[11,"reset","","Resets the read position to the previously marked position.",482,null],[11,"remaining","","",482,{"inputs":[{"name":"robytebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",482,null],[11,"advance","","",482,null],[11,"read_slice","","",482,null],[11,"capacity","","",483,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"usize"}}],[11,"flip","","",483,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"bytebuf"}}],[11,"clear","","",483,null],[11,"write_slice","","",483,null],[11,"bytes","","",483,null],[11,"remaining","","",483,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"usize"}}],[11,"advance","","",483,null],[11,"mut_bytes","","",483,null],[11,"new","bytes::buf::ring","Allocates a new `RingBuf` with the specified capacity.",484,{"inputs":[{"name":"ringbuf"},{"name":"usize"}],"output":{"name":"ringbuf"}}],[11,"is_full","","Returns `true` if the buf cannot accept any further writes.",484,{"inputs":[{"name":"ringbuf"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns `true` if the buf cannot accept any further reads.",484,{"inputs":[{"name":"ringbuf"}],"output":{"name":"bool"}}],[11,"capacity","","Returns the number of bytes that the buf can hold.",484,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"mark","","Marks the current read location.",484,null],[11,"reset","","Resets the read position to the previously marked position.",484,null],[11,"clone","","",484,{"inputs":[{"name":"ringbuf"}],"output":{"name":"ringbuf"}}],[11,"fmt","","",484,{"inputs":[{"name":"ringbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"remaining","","",484,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"bytes","","",484,null],[11,"advance","","",484,null],[11,"remaining","","",484,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"advance","","",484,null],[11,"mut_bytes","","",484,null],[11,"read","","",484,null],[11,"write","","",484,null],[11,"flush","","",484,{"inputs":[{"name":"ringbuf"}],"output":{"name":"result"}}],[11,"wrap","bytes::buf::slice","",485,null],[11,"remaining","","",485,{"inputs":[{"name":"slicebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",485,null],[11,"advance","","",485,null],[11,"wrap","","",486,null],[11,"remaining","","",486,{"inputs":[{"name":"mutslicebuf"}],"output":{"name":"usize"}}],[11,"advance","","",486,null],[11,"mut_bytes","","",486,null],[11,"fmt","bytes::buf::take","",487,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",487,{"inputs":[{"name":"take"},{"name":"t"},{"name":"usize"}],"output":{"name":"take"}}],[11,"into_inner","","",487,{"inputs":[{"name":"take"}],"output":{"name":"t"}}],[11,"get_ref","","",487,{"inputs":[{"name":"take"}],"output":{"name":"t"}}],[11,"get_mut","","",487,{"inputs":[{"name":"take"}],"output":{"name":"t"}}],[11,"limit","","",487,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"set_limit","","",487,null],[11,"remaining","","",487,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"bytes","","",487,null],[11,"advance","","",487,null],[11,"read","","",487,null],[11,"remaining","","",487,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"mut_bytes","","",487,null],[11,"advance","","",487,null],[11,"remaining","alloc::boxed","",3,{"inputs":[{"name":"box"}],"output":{"name":"usize"}}],[11,"bytes","","",3,null],[11,"advance","","",3,null],[11,"read_slice","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"remaining","std::io::cursor","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"usize"}}],[11,"bytes","","",103,null],[11,"advance","","",103,null],[11,"remaining","collections::vec","",61,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"advance","","",61,null],[11,"mut_bytes","","",61,null],[11,"remaining","std::io::cursor","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"usize"}}],[11,"bytes","","",103,null],[11,"advance","","",103,null],[11,"read","bytes::buf::byte","",478,null],[11,"read","","",482,null],[11,"read","bytes::str::rope","",488,null],[11,"read","alloc::boxed","",3,null],[11,"write","bytes::buf::byte","",483,null],[11,"flush","","",483,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"result"}}],[11,"from_slice","bytes::str::bytes","",489,null],[11,"of","","",489,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"empty","","",489,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"downcast_ref","","If the underlying `ByteStr` is of type `B`, returns a reference to it\notherwise None.",489,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"try_unwrap","","If the underlying `ByteStr` is of type `B`, returns the unwraped value,\notherwise, returns the original `Bytes` as `Err`.",489,{"inputs":[{"name":"bytes"}],"output":{"name":"result"}}],[11,"buf","","",489,{"inputs":[{"name":"bytes"}],"output":{"name":"box"}}],[11,"concat","","",489,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",489,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"slice","","",489,{"inputs":[{"name":"bytes"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_at","","",489,null],[11,"to_bytes","","",489,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"index","","",489,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"fmt","","",489,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",489,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"drop","","",489,null],[11,"from_slice","bytes::str::rope","",490,null],[11,"of","","Returns a Rope consisting of the supplied Bytes as a single segment.",490,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"rope"}}],[11,"len","","",490,{"inputs":[{"name":"rope"}],"output":{"name":"usize"}}],[11,"is_empty","","",490,{"inputs":[{"name":"rope"}],"output":{"name":"bool"}}],[11,"buf","","",490,{"inputs":[{"name":"rope"}],"output":{"name":"ropebuf"}}],[11,"concat","","",490,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",490,{"inputs":[{"name":"rope"}],"output":{"name":"usize"}}],[11,"slice","","",490,{"inputs":[{"name":"rope"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",490,{"inputs":[{"name":"rope"}],"output":{"name":"bytes"}}],[11,"index","","",490,{"inputs":[{"name":"rope"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",490,{"inputs":[{"name":"rope"}],"output":{"name":"rope"}}],[11,"remaining","","",488,{"inputs":[{"name":"ropebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",488,null],[11,"advance","","",488,null],[11,"next","","",491,{"inputs":[{"name":"pieceiter"}],"output":{"name":"option"}}],[11,"from_slice","bytes::str::seq","Create a new `SeqByteStr` from a byte slice.",492,null],[11,"from_mem_ref","","Creates a new `SeqByteStr` from a `MemRef`, an offset, and a length.",492,{"inputs":[{"name":"seqbytestr"},{"name":"memref"},{"name":"u32"},{"name":"u32"}],"output":{"name":"seqbytestr"}}],[11,"buf","","",492,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"robytebuf"}}],[11,"concat","","",492,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",492,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"usize"}}],[11,"slice","","",492,{"inputs":[{"name":"seqbytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",492,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"bytes"}}],[11,"index","","",492,{"inputs":[{"name":"seqbytestr"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",492,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"seqbytestr"}}],[11,"clone","bytes::str::small","",493,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestr"}}],[11,"zero","","",493,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestr"}}],[11,"from_slice","","",493,null],[11,"as_slice","","",493,null],[11,"buf","","",493,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestrbuf"}}],[11,"concat","","",493,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",493,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"usize"}}],[11,"slice","","",493,{"inputs":[{"name":"smallbytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",493,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"bytes"}}],[11,"index","","",493,{"inputs":[{"name":"smallbytestr"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",494,{"inputs":[{"name":"smallbytestrbuf"}],"output":{"name":"smallbytestrbuf"}}],[11,"remaining","","",494,{"inputs":[{"name":"smallbytestrbuf"}],"output":{"name":"usize"}}],[11,"bytes","","",494,null],[11,"advance","","",494,null],[11,"eq","bytes::str::seq","",492,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",492,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","bytes::str::small","",493,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",493,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","bytes::str::bytes","",489,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",489,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","bytes::str::rope","",490,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",490,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bool"}}],[11,"fmt","bytes","",495,{"inputs":[{"name":"buferror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",495,{"inputs":[{"name":"buferror"}],"output":{"name":"buferror"}}],[3,"ByteBuf","mio::buf","A `Buf` backed by a contiguous region of memory.",null,null],[3,"MutByteBuf","","",null,null],[3,"RingBuf","","Buf backed by a continous chunk of memory. Maintains a read cursor and a\nwrite cursor. When reads and writes reach the end of the allocated buffer,\nwraps around to the start.",null,null],[3,"SliceBuf","","",null,null],[3,"MutSliceBuf","","",null,null],[6,"TimerResult","mio","",null,null],[8,"Handler","","",null,null],[16,"Timeout","","",496,null],[16,"Message","","",496,null],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated\non. `events` indicates the specific operations that are\nready to be performed.",496,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"notify","","Invoked when a message has been received via the event loop's channel.",496,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"message"}],"output":null}],[11,"timeout","","Invoked when a timeout has completed.",496,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"timeout"}],"output":null}],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",496,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[11,"tick","","Invoked at the end of an event loop tick.",496,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[8,"TryRead","","",null,null],[11,"try_read_buf","","",476,{"inputs":[{"name":"tryread"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_read","","",476,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","","",477,{"inputs":[{"name":"trywrite"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_write","","",477,null],[8,"Evented","","A value that may be registered with an `EventLoop`",null,null],[8,"TryAccept","","",null,null],[16,"Output","","",497,null],[10,"accept","","",497,{"inputs":[{"name":"tryaccept"}],"output":{"name":"result"}}],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated\non. `events` indicates the specific operations that are\nready to be performed.",496,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"notify","","Invoked when a message has been received via the event loop's channel.",496,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"message"}],"output":null}],[11,"timeout","","Invoked when a timeout has completed.",496,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"timeout"}],"output":null}],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",496,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[11,"tick","","Invoked at the end of an event loop tick.",496,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[11,"try_read_buf","mio::prelude","",476,{"inputs":[{"name":"tryread"},{"name":"b"}],"output":{"name":"result"}}],[11,"try_write_buf","","",477,{"inputs":[{"name":"trywrite"},{"name":"b"}],"output":{"name":"result"}}],[11,"fmt","mio::tcp","",467,{"inputs":[{"name":"tcpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 socket",467,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 socket",467,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"connect","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"listen","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"usize"}],"output":{"name":"result"}}],[11,"peer_addr","","",467,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"local_addr","","",467,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","",467,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"set_reuseaddr","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_socket_error","","",467,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"set_nodelay","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"register","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"tcpsocket"}],"output":{"name":"tcpsocket"}}],[11,"fmt","","",468,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",466,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",466,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",466,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",466,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"connect","","",468,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"peer_addr","","",468,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","",468,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"try_clone","","",468,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",468,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","",468,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",468,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"take_socket_error","","",468,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",468,null],[11,"write","","",468,null],[11,"flush","","",468,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"register","","",468,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",468,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",468,{"inputs":[{"name":"tcpstream"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",468,{"inputs":[{"name":"tcpstream"},{"name":"tcpsocket"}],"output":{"name":"tcpstream"}}],[11,"fmt","","",469,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",469,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",469,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"local_addr","","",469,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","",469,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"from","","",469,{"inputs":[{"name":"tcplistener"},{"name":"tcpsocket"}],"output":{"name":"tcplistener"}}],[11,"register","","",469,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",469,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",469,{"inputs":[{"name":"tcplistener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",469,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",467,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",467,{"inputs":[{"name":"tcpsocket"},{"name":"rawfd"}],"output":{"name":"tcpsocket"}}],[11,"as_raw_fd","","",468,{"inputs":[{"name":"tcpstream"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",468,{"inputs":[{"name":"tcpstream"},{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"as_raw_fd","","",469,{"inputs":[{"name":"tcplistener"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",469,{"inputs":[{"name":"tcplistener"},{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[11,"fmt","mio::udp","",470,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",470,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",470,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"bound","","",470,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","",470,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","",470,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","",470,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"send_to","","",470,{"inputs":[{"name":"udpsocket"},{"name":"b"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"recv_from","","",470,{"inputs":[{"name":"udpsocket"},{"name":"b"}],"output":{"name":"result"}}],[11,"set_broadcast","","",470,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",470,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","",470,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",470,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","",470,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"register","","",470,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",470,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",470,{"inputs":[{"name":"udpsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",470,{"inputs":[{"name":"udpsocket"},{"name":"udpsocket"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",470,{"inputs":[{"name":"udpsocket"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",470,{"inputs":[{"name":"udpsocket"},{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[11,"fmt","mio::unix","",471,{"inputs":[{"name":"unixsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stream","","Returns a new, unbound, non-blocking Unix domain socket",471,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"connect","","Connect the socket to the specified address",471,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"bind","","Bind the socket to the specified address",471,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"listen","","Listen for incoming requests",471,{"inputs":[{"name":"unixsocket"},{"name":"usize"}],"output":{"name":"result"}}],[11,"try_clone","","",471,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"register","","",471,{"inputs":[{"name":"unixsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",471,{"inputs":[{"name":"unixsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",471,{"inputs":[{"name":"unixsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",471,{"inputs":[{"name":"unixsocket"},{"name":"unixsocket"}],"output":{"name":"unixsocket"}}],[11,"fmt","","",472,{"inputs":[{"name":"unixstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","",472,{"inputs":[{"name":"unixstream"},{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","",472,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"read","","",472,null],[11,"write","","",472,null],[11,"flush","","",472,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"register","","",472,{"inputs":[{"name":"unixstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",472,{"inputs":[{"name":"unixstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",472,{"inputs":[{"name":"unixstream"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",472,{"inputs":[{"name":"unixstream"},{"name":"unixsocket"}],"output":{"name":"unixstream"}}],[11,"fmt","","",473,{"inputs":[{"name":"unixlistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",473,{"inputs":[{"name":"unixlistener"},{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","",473,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"try_clone","","",473,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"register","","",473,{"inputs":[{"name":"unixlistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",473,{"inputs":[{"name":"unixlistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",473,{"inputs":[{"name":"unixlistener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",473,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"from","","",473,{"inputs":[{"name":"unixlistener"},{"name":"unixsocket"}],"output":{"name":"unixlistener"}}],[11,"fmt","","",474,{"inputs":[{"name":"pipereader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",474,null],[11,"register","","",474,{"inputs":[{"name":"pipereader"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",474,{"inputs":[{"name":"pipereader"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",474,{"inputs":[{"name":"pipereader"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",474,{"inputs":[{"name":"pipereader"},{"name":"io"}],"output":{"name":"pipereader"}}],[11,"fmt","","",475,{"inputs":[{"name":"pipewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",475,null],[11,"flush","","",475,{"inputs":[{"name":"pipewriter"}],"output":{"name":"result"}}],[11,"register","","",475,{"inputs":[{"name":"pipewriter"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",475,{"inputs":[{"name":"pipewriter"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",475,{"inputs":[{"name":"pipewriter"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",475,{"inputs":[{"name":"pipewriter"},{"name":"io"}],"output":{"name":"pipewriter"}}],[11,"as_raw_fd","","",471,{"inputs":[{"name":"unixsocket"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",471,{"inputs":[{"name":"unixsocket"},{"name":"rawfd"}],"output":{"name":"unixsocket"}}],[11,"as_raw_fd","","",472,{"inputs":[{"name":"unixstream"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",472,{"inputs":[{"name":"unixstream"},{"name":"rawfd"}],"output":{"name":"unixstream"}}],[11,"as_raw_fd","","",473,{"inputs":[{"name":"unixlistener"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",473,{"inputs":[{"name":"unixlistener"},{"name":"rawfd"}],"output":{"name":"unixlistener"}}],[11,"as_raw_fd","","",474,{"inputs":[{"name":"pipereader"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",474,{"inputs":[{"name":"pipereader"},{"name":"rawfd"}],"output":{"name":"pipereader"}}],[11,"as_raw_fd","","",475,{"inputs":[{"name":"pipewriter"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",475,{"inputs":[{"name":"pipewriter"},{"name":"rawfd"}],"output":{"name":"pipewriter"}}]],"paths":[[8,"Buf"],[8,"MutBuf"],[3,"Ipv4Addr"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[8,"Error"],[3,"EscapeDefault"],[3,"Wrapping"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"RawBucket"],[3,"Bucket"],[3,"SafeHash"],[3,"FullBucket"],[3,"EmptyBucket"],[4,"BucketState"],[3,"GapThenFull"],[3,"RawTable"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DefaultResizePolicy"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"DefaultState"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"DynamicLibrary"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[3,"Path"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"InternalBufWriter"],[3,"Cursor"],[3,"Custom"],[4,"ErrorKind"],[4,"Repr"],[3,"Lazy"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"StdinRaw"],[3,"StdoutRaw"],[3,"StderrRaw"],[4,"Maybe"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[4,"Prefix"],[4,"State"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"SignalToken"],[3,"WaitToken"],[3,"Packet"],[4,"StartResult"],[3,"Select"],[3,"Handle"],[3,"Packets"],[3,"Packet"],[3,"Packet"],[4,"Failure"],[3,"Packet"],[3,"Queue"],[3,"Queue"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Duration"],[3,"Condvar"],[3,"EHContext"],[3,"DwarfReader"],[4,"_Unwind_Action"],[4,"_Unwind_Reason_Code"],[3,"Mutex"],[3,"LookupHost"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Flag"],[3,"PoisonError"],[4,"TryLockError"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RWLock"],[3,"StaticKey"],[3,"Key"],[3,"CodePoint"],[3,"Wtf8Buf"],[3,"Wtf8"],[3,"Wtf8CodePoints"],[3,"EncodeWide"],[3,"Condvar"],[3,"FileDesc"],[3,"FileAttr"],[3,"OpenOptions"],[3,"FilePermissions"],[3,"FileType"],[3,"ReadDir"],[3,"Dir"],[3,"DirEntry"],[3,"File"],[3,"DirBuilder"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"Socket"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Env"],[3,"Buf"],[3,"Slice"],[3,"AnonPipe"],[3,"Command"],[4,"ExitStatus"],[3,"Process"],[3,"RWLock"],[3,"Handler"],[3,"Thread"],[3,"SteadyTime"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRngReseeder"],[3,"ThreadRng"],[3,"SipHasher"],[3,"Utf16Units"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"PhantomData"],[3,"Unique"],[3,"Shared"],[3,"Rc"],[3,"Weak"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"CaseMappingIter"],[3,"DecodeUtf16"],[3,"Slice"],[3,"TraitObject"],[4,"Cow"],[4,"ParseError"],[3,"Drain"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"IntoIter"],[3,"Drain"],[8,"Any"],[3,"TypeId"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EventLoopConfig"],[4,"IpAddr"],[4,"NotifyError"],[3,"BoundedQueue"],[3,"PollOpt"],[3,"EventSet"],[3,"EventLoop"],[3,"Sender"],[8,"Read"],[8,"Write"],[3,"Poll"],[3,"Selector"],[3,"Io"],[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"],[4,"Error"],[4,"Errno"],[3,"flock"],[3,"OFlag"],[3,"FdFlag"],[3,"MsFlags"],[3,"MntFlags"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"MqAttr"],[3,"CpuSet"],[3,"EpollEventKind"],[4,"EpollOp"],[3,"EpollEvent"],[3,"IoctlDirFlags"],[3,"SockFlag"],[3,"siginfo"],[3,"sigset_t"],[3,"SigSet"],[3,"SigAction"],[4,"AddressFamily"],[4,"InetAddr"],[4,"IpAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"UnixAddr"],[4,"SockAddr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"TcpKeepIdle"],[3,"GetStruct"],[3,"SetStruct"],[3,"GetBool"],[3,"SetBool"],[3,"GetU8"],[3,"SetU8"],[4,"SockType"],[3,"SockFlag"],[3,"linger"],[4,"Shutdown"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"UtsName"],[3,"WaitPidFlag"],[4,"WaitStatus"],[3,"IoVec"],[3,"TimeVal"],[4,"Fork"],[3,"Timeout"],[3,"TimerError"],[3,"Token"],[4,"Shutdown"],[3,"TcpSocket"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"UnixSocket"],[3,"UnixStream"],[3,"UnixListener"],[3,"PipeReader"],[3,"PipeWriter"],[8,"TryRead"],[8,"TryWrite"],[3,"ByteBuf"],[3,"Heap"],[3,"MemRef"],[3,"Mem"],[3,"ROByteBuf"],[3,"MutByteBuf"],[3,"RingBuf"],[3,"SliceBuf"],[3,"MutSliceBuf"],[3,"Take"],[3,"RopeBuf"],[3,"Bytes"],[3,"Rope"],[3,"PieceIter"],[3,"SeqByteStr"],[3,"SmallByteStr"],[3,"SmallByteStrBuf"],[4,"BufError"],[8,"Handler"],[8,"TryAccept"]]};
searchIndex['nix'] = {"items":[[0,"","nix","Rust friendly bindings to the various *nix system functions.",null,null],[11,"clone","libc::types::os::common::posix01","",0,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","libc::types::os::common::bsd43","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","libc::types::os::common::bsd44","",5,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",6,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",7,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",8,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",9,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",10,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",11,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",12,{"inputs":[{"name":"ip6_mreq"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",13,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",15,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","libc::types::os::arch::posix01","",16,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",17,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",18,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","libc::types::os::arch::extra","",19,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[6,"c_int","nix","",null,null],[4,"c_void","","Type used to construct void pointers for use with C.",null,null],[4,"Error","","",null,null],[13,"Sys","","",20,null],[13,"InvalidPath","","",20,null],[5,"from_ffi","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"result"}}],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",21,null],[13,"EPERM","","",21,null],[13,"ENOENT","","",21,null],[13,"ESRCH","","",21,null],[13,"EINTR","","",21,null],[13,"EIO","","",21,null],[13,"ENXIO","","",21,null],[13,"E2BIG","","",21,null],[13,"ENOEXEC","","",21,null],[13,"EBADF","","",21,null],[13,"ECHILD","","",21,null],[13,"EAGAIN","","",21,null],[13,"ENOMEM","","",21,null],[13,"EACCES","","",21,null],[13,"EFAULT","","",21,null],[13,"ENOTBLK","","",21,null],[13,"EBUSY","","",21,null],[13,"EEXIST","","",21,null],[13,"EXDEV","","",21,null],[13,"ENODEV","","",21,null],[13,"ENOTDIR","","",21,null],[13,"EISDIR","","",21,null],[13,"EINVAL","","",21,null],[13,"ENFILE","","",21,null],[13,"EMFILE","","",21,null],[13,"ENOTTY","","",21,null],[13,"ETXTBSY","","",21,null],[13,"EFBIG","","",21,null],[13,"ENOSPC","","",21,null],[13,"ESPIPE","","",21,null],[13,"EROFS","","",21,null],[13,"EMLINK","","",21,null],[13,"EPIPE","","",21,null],[13,"EDOM","","",21,null],[13,"ERANGE","","",21,null],[13,"EDEADLK","","",21,null],[13,"ENAMETOOLONG","","",21,null],[13,"ENOLCK","","",21,null],[13,"ENOSYS","","",21,null],[13,"ENOTEMPTY","","",21,null],[13,"ELOOP","","",21,null],[13,"ENOMSG","","",21,null],[13,"EIDRM","","",21,null],[13,"ECHRNG","","",21,null],[13,"EL2NSYNC","","",21,null],[13,"EL3HLT","","",21,null],[13,"EL3RST","","",21,null],[13,"ELNRNG","","",21,null],[13,"EUNATCH","","",21,null],[13,"ENOCSI","","",21,null],[13,"EL2HLT","","",21,null],[13,"EBADE","","",21,null],[13,"EBADR","","",21,null],[13,"EXFULL","","",21,null],[13,"ENOANO","","",21,null],[13,"EBADRQC","","",21,null],[13,"EBADSLT","","",21,null],[13,"EBFONT","","",21,null],[13,"ENOSTR","","",21,null],[13,"ENODATA","","",21,null],[13,"ETIME","","",21,null],[13,"ENOSR","","",21,null],[13,"ENONET","","",21,null],[13,"ENOPKG","","",21,null],[13,"EREMOTE","","",21,null],[13,"ENOLINK","","",21,null],[13,"EADV","","",21,null],[13,"ESRMNT","","",21,null],[13,"ECOMM","","",21,null],[13,"EPROTO","","",21,null],[13,"EMULTIHOP","","",21,null],[13,"EDOTDOT","","",21,null],[13,"EBADMSG","","",21,null],[13,"EOVERFLOW","","",21,null],[13,"ENOTUNIQ","","",21,null],[13,"EBADFD","","",21,null],[13,"EREMCHG","","",21,null],[13,"ELIBACC","","",21,null],[13,"ELIBBAD","","",21,null],[13,"ELIBSCN","","",21,null],[13,"ELIBMAX","","",21,null],[13,"ELIBEXEC","","",21,null],[13,"EILSEQ","","",21,null],[13,"ERESTART","","",21,null],[13,"ESTRPIPE","","",21,null],[13,"EUSERS","","",21,null],[13,"ENOTSOCK","","",21,null],[13,"EDESTADDRREQ","","",21,null],[13,"EMSGSIZE","","",21,null],[13,"EPROTOTYPE","","",21,null],[13,"ENOPROTOOPT","","",21,null],[13,"EPROTONOSUPPORT","","",21,null],[13,"ESOCKTNOSUPPORT","","",21,null],[13,"EOPNOTSUPP","","",21,null],[13,"EPFNOSUPPORT","","",21,null],[13,"EAFNOSUPPORT","","",21,null],[13,"EADDRINUSE","","",21,null],[13,"EADDRNOTAVAIL","","",21,null],[13,"ENETDOWN","","",21,null],[13,"ENETUNREACH","","",21,null],[13,"ENETRESET","","",21,null],[13,"ECONNABORTED","","",21,null],[13,"ECONNRESET","","",21,null],[13,"ENOBUFS","","",21,null],[13,"EISCONN","","",21,null],[13,"ENOTCONN","","",21,null],[13,"ESHUTDOWN","","",21,null],[13,"ETOOMANYREFS","","",21,null],[13,"ETIMEDOUT","","",21,null],[13,"ECONNREFUSED","","",21,null],[13,"EHOSTDOWN","","",21,null],[13,"EHOSTUNREACH","","",21,null],[13,"EALREADY","","",21,null],[13,"EINPROGRESS","","",21,null],[13,"ESTALE","","",21,null],[13,"EUCLEAN","","",21,null],[13,"ENOTNAM","","",21,null],[13,"ENAVAIL","","",21,null],[13,"EISNAM","","",21,null],[13,"EREMOTEIO","","",21,null],[13,"EDQUOT","","",21,null],[13,"ENOMEDIUM","","",21,null],[13,"EMEDIUMTYPE","","",21,null],[13,"ECANCELED","","",21,null],[13,"ENOKEY","","",21,null],[13,"EKEYEXPIRED","","",21,null],[13,"EKEYREVOKED","","",21,null],[13,"EKEYREJECTED","","",21,null],[13,"EOWNERDEAD","","",21,null],[13,"ENOTRECOVERABLE","","",21,null],[13,"ERFKILL","","",21,null],[13,"EHWPOISON","","",21,null],[5,"from_i32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"inputs":[],"output":{"name":"i32"}}],[11,"eq","","",21,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"fmt","","",21,{"inputs":[{"name":"errno"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"last","","",21,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"desc","","",21,{"inputs":[{"name":"errno"}],"output":{"name":"str"}}],[11,"from_i32","","",21,{"inputs":[{"name":"errno"},{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",21,null],[17,"EWOULDBLOCK","","",null,null],[17,"EDEADLOCK","","",null,null],[0,"features","nix","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"fcntl","nix","",null,null],[3,"OFlag","nix::fcntl","",null,null],[3,"FdFlag","","",null,null],[3,"SealFlag","","",null,null],[3,"flock","","",null,null],[12,"l_type","","",22,null],[12,"l_whence","","",22,null],[12,"l_start","","",22,null],[12,"l_len","","",22,null],[12,"l_pid","","",22,null],[12,"l_sysid","","",22,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",23,null],[13,"F_DUPFD_CLOEXEC","","",23,null],[13,"F_GETFD","","",23,null],[13,"F_SETFD","","",23,null],[13,"F_GETFL","","",23,null],[13,"F_SETFL","","",23,null],[13,"F_SETLK","","",23,null],[13,"F_SETLKW","","",23,null],[13,"F_GETLK","","",23,null],[13,"F_OFD_SETLK","","",23,null],[13,"F_OFD_SETLKW","","",23,null],[13,"F_OFD_GETLK","","",23,null],[13,"F_ADD_SEALS","","",23,null],[13,"F_GET_SEALS","","",23,null],[4,"FlockArg","","",null,null],[13,"LockShared","","",24,null],[13,"LockExclusive","","",24,null],[13,"Unlock","","",24,null],[13,"LockSharedNonblock","","",24,null],[13,"LockExclusiveNonblock","","",24,null],[13,"UnlockNonblock","","",24,null],[5,"open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"fcntl","","",null,{"inputs":[{"name":"rawfd"},{"name":"fcntlarg"}],"output":{"name":"result"}}],[5,"flock","","",null,{"inputs":[{"name":"rawfd"},{"name":"flockarg"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"flock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",22,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",22,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"hash","","",25,null],[11,"cmp","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"eq","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"oflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",25,{"inputs":[{"name":"oflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",25,{"inputs":[{"name":"oflag"},{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"not","","Returns the complement of this set of flags.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"from_iter","","",25,{"inputs":[{"name":"oflag"},{"name":"t"}],"output":{"name":"oflag"}}],[11,"hash","","",26,null],[11,"cmp","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"eq","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"fdflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",26,{"inputs":[{"name":"fdflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",26,{"inputs":[{"name":"fdflag"},{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"from_iter","","",26,{"inputs":[{"name":"fdflag"},{"name":"t"}],"output":{"name":"fdflag"}}],[11,"hash","","",27,null],[11,"cmp","","",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"eq","","",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"sealflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",27,{"inputs":[{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"all","","Returns the set containing all flags.",27,{"inputs":[{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",27,{"inputs":[{"name":"sealflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",27,{"inputs":[{"name":"sealflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",27,{"inputs":[{"name":"sealflag"},{"name":"c_int"}],"output":{"name":"sealflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",27,{"inputs":[{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",27,{"inputs":[{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",27,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"not","","Returns the complement of this set of flags.",27,{"inputs":[{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"from_iter","","",27,{"inputs":[{"name":"sealflag"},{"name":"t"}],"output":{"name":"sealflag"}}],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"O_NDELAY","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[0,"mount","nix","",null,null],[3,"MsFlags","nix::mount","",null,null],[3,"MntFlags","","",null,null],[5,"umount","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"umount2","","",null,{"inputs":[{"name":"p"},{"name":"mntflags"}],"output":{"name":"result"}}],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_VERBOSE","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_NOSEC","","",null,null],[17,"MS_BORN","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"MNT_DETATCH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[11,"hash","","",28,null],[11,"cmp","","",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"eq","","",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"msflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",28,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",28,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",28,{"inputs":[{"name":"msflags"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",28,{"inputs":[{"name":"msflags"},{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",28,{"inputs":[{"name":"msflags"},{"name":"c_ulong"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",28,{"inputs":[{"name":"msflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",28,{"inputs":[{"name":"msflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",28,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"not","","Returns the complement of this set of flags.",28,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"from_iter","","",28,{"inputs":[{"name":"msflags"},{"name":"t"}],"output":{"name":"msflags"}}],[11,"hash","","",29,null],[11,"cmp","","",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"eq","","",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"mntflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",29,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"all","","Returns the set containing all flags.",29,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",29,{"inputs":[{"name":"mntflags"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",29,{"inputs":[{"name":"mntflags"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",29,{"inputs":[{"name":"mntflags"},{"name":"c_int"}],"output":{"name":"mntflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",29,{"inputs":[{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",29,{"inputs":[{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",29,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"not","","Returns the complement of this set of flags.",29,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"from_iter","","",29,{"inputs":[{"name":"mntflags"},{"name":"t"}],"output":{"name":"mntflags"}}],[0,"mqueue","nix","Posis Message Queue functions",null,null],[3,"MQ_OFlag","nix::mqueue","",null,null],[3,"FdFlag","","",null,null],[3,"MqAttr","","",null,null],[12,"mq_flags","","",30,null],[12,"mq_maxmsg","","",30,null],[12,"mq_msgsize","","",30,null],[12,"mq_curmsgs","","",30,null],[5,"mq_open","","",null,{"inputs":[{"name":"cstring"},{"name":"mq_oflag"},{"name":"mode"},{"name":"mqattr"}],"output":{"name":"result"}}],[5,"mq_unlink","","",null,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[5,"mq_close","","",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,{"inputs":[{"name":"mqd"},{"name":"cstring"},{"name":"u32"}],"output":{"name":"result"}}],[5,"mq_getattr","","",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_setattr","","Set the attributes of the message queue. Only O_NONBLOCK can be set, everything else will be ignored\nReturns the old attributes\nIt is recommend to use the mq_set_nonblock() and mq_remove_nonblock() convenience functions as they are easier to use",null,{"inputs":[{"name":"mqd"},{"name":"mqattr"}],"output":{"name":"result"}}],[5,"mq_set_nonblock","","Convenience function.\nSets the O_NONBLOCK attribute for a given message queue descriptor\nReturns the old attributes",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_remove_nonblock","","Convenience function.\nRemoves O_NONBLOCK attribute for a given message queue descriptor\nReturns the old attributes",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"cmp","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"option"}}],[11,"lt","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"eq","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",31,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"all","","Returns the set containing all flags.",31,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",31,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",31,{"inputs":[{"name":"mq_oflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",31,{"inputs":[{"name":"mq_oflag"},{"name":"c_int"}],"output":{"name":"mq_oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",31,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",31,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",31,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"not","","Returns the complement of this set of flags.",31,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"from_iter","","",31,{"inputs":[{"name":"mq_oflag"},{"name":"t"}],"output":{"name":"mq_oflag"}}],[11,"hash","","",32,null],[11,"cmp","","",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"option"}}],[11,"lt","","",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"eq","","",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"fdflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",32,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",32,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",32,{"inputs":[{"name":"fdflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",32,{"inputs":[{"name":"fdflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",32,{"inputs":[{"name":"fdflag"},{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",32,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",32,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",32,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",32,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"from_iter","","",32,{"inputs":[{"name":"fdflag"},{"name":"t"}],"output":{"name":"fdflag"}}],[6,"MQd","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"FD_CLOEXEC","","",null,null],[11,"eq","","",30,{"inputs":[{"name":"mqattr"},{"name":"mqattr"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"mqattr"},{"name":"mqattr"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"mqattr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"mqattr"}],"output":{"name":"mqattr"}}],[11,"new","","",30,{"inputs":[{"name":"mqattr"},{"name":"c_long"},{"name":"c_long"},{"name":"c_long"},{"name":"c_long"}],"output":{"name":"mqattr"}}],[0,"sched","nix","",null,null],[3,"CpuSet","nix::sched","",null,null],[5,"sched_setaffinity","","",null,{"inputs":[{"name":"isize"},{"name":"cpuset"}],"output":{"name":"result"}}],[5,"clone","","",null,null],[5,"unshare","","",null,{"inputs":[{"name":"cloneflags"}],"output":{"name":"result"}}],[6,"CloneFlags","","",null,null],[6,"CloneCb","","",null,null],[6,"CpuMask","","",null,null],[7,"CLONE_VM","","",null,null],[7,"CLONE_FS","","",null,null],[7,"CLONE_FILES","","",null,null],[7,"CLONE_SIGHAND","","",null,null],[7,"CLONE_PTRACE","","",null,null],[7,"CLONE_VFORK","","",null,null],[7,"CLONE_PARENT","","",null,null],[7,"CLONE_THREAD","","",null,null],[7,"CLONE_NEWNS","","",null,null],[7,"CLONE_SYSVSEM","","",null,null],[7,"CLONE_SETTLS","","",null,null],[7,"CLONE_PARENT_SETTID","","",null,null],[7,"CLONE_CHILD_CLEARTID","","",null,null],[7,"CLONE_DETACHED","","",null,null],[7,"CLONE_UNTRACED","","",null,null],[7,"CLONE_CHILD_SETTID","","",null,null],[7,"CLONE_NEWUTS","","",null,null],[7,"CLONE_NEWIPC","","",null,null],[7,"CLONE_NEWUSER","","",null,null],[7,"CLONE_NEWPID","","",null,null],[7,"CLONE_NEWNET","","",null,null],[7,"CLONE_IO","","",null,null],[11,"clone","","",33,{"inputs":[{"name":"cpuset"}],"output":{"name":"cpuset"}}],[11,"new","","",33,{"inputs":[{"name":"cpuset"}],"output":{"name":"cpuset"}}],[11,"set","","",33,{"inputs":[{"name":"cpuset"},{"name":"usize"}],"output":null}],[11,"unset","","",33,{"inputs":[{"name":"cpuset"},{"name":"usize"}],"output":null}],[0,"sys","nix","",null,null],[0,"epoll","nix::sys","",null,null],[3,"EpollEventKind","nix::sys::epoll","",null,null],[3,"EpollEvent","","",null,null],[12,"events","","",34,null],[12,"data","","",34,null],[4,"EpollOp","","",null,null],[13,"EpollCtlAdd","","",35,null],[13,"EpollCtlDel","","",35,null],[13,"EpollCtlMod","","",35,null],[5,"epoll_create","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"epoll_ctl","","",null,{"inputs":[{"name":"rawfd"},{"name":"epollop"},{"name":"rawfd"},{"name":"epollevent"}],"output":{"name":"result"}}],[5,"epoll_wait","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"EPOLLET","","",null,null],[11,"hash","","",36,null],[11,"cmp","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"option"}}],[11,"lt","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"le","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"gt","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"ge","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"eq","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",36,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"all","","Returns the set containing all flags.",36,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",36,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",36,{"inputs":[{"name":"epolleventkind"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",36,{"inputs":[{"name":"epolleventkind"},{"name":"u32"}],"output":{"name":"epolleventkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",36,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",36,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"sub","","Returns the set difference of the two sets of flags.",36,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"not","","Returns the complement of this set of flags.",36,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"from_iter","","",36,{"inputs":[{"name":"epolleventkind"},{"name":"t"}],"output":{"name":"epolleventkind"}}],[11,"clone","","",35,{"inputs":[{"name":"epollop"}],"output":{"name":"epollop"}}],[11,"clone","","",34,{"inputs":[{"name":"epollevent"}],"output":{"name":"epollevent"}}],[0,"memfd","nix::sys","",null,null],[3,"MemFdCreateFlag","nix::sys::memfd","",null,null],[5,"memfd_create","","",null,{"inputs":[{"name":"cstr"},{"name":"memfdcreateflag"}],"output":{"name":"result"}}],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[11,"hash","","",37,null],[11,"cmp","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"option"}}],[11,"lt","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"le","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"gt","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"ge","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"eq","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",37,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"all","","Returns the set containing all flags.",37,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",37,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"c_uint"}],"output":{"name":"memfdcreateflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",37,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",37,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"not","","Returns the complement of this set of flags.",37,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"from_iter","","",37,{"inputs":[{"name":"memfdcreateflag"},{"name":"t"}],"output":{"name":"memfdcreateflag"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls",null,null],[0,"libc","nix::sys::ioctl","",null,null],[0,"types","nix::sys::ioctl::libc","",null,null],[0,"common","nix::sys::ioctl::libc::types","",null,null],[0,"c95","nix::sys::ioctl::libc::types::common","",null,null],[4,"c_void","nix::sys::ioctl::libc::types::common::c95","Type used to construct void pointers for use with C.",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[0,"c99","nix::sys::ioctl::libc::types::common","",null,null],[6,"int8_t","nix::sys::ioctl::libc::types::common::c99","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[0,"posix88","nix::sys::ioctl::libc::types::common","",null,null],[4,"DIR","nix::sys::ioctl::libc::types::common::posix88","",null,null],[4,"dirent_t","","",null,null],[0,"os","nix::sys::ioctl::libc::types","",null,null],[0,"common","nix::sys::ioctl::libc::types::os","",null,null],[0,"posix01","nix::sys::ioctl::libc::types::os::common","",null,null],[6,"pthread_t","nix::sys::ioctl::libc::types::os::common::posix01","",null,null],[6,"rlim_t","","",null,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",0,null],[12,"gl_pathv","","",0,null],[12,"gl_offs","","",0,null],[12,"__unused1","","",0,null],[12,"__unused2","","",0,null],[12,"__unused3","","",0,null],[12,"__unused4","","",0,null],[12,"__unused5","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[4,"timezone","","",null,null],[6,"sighandler_t","","",null,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[0,"bsd43","nix::sys::ioctl::libc::types::os::common","",null,null],[3,"rusage","nix::sys::ioctl::libc::types::os::common::bsd43","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[0,"bsd44","nix::sys::ioctl::libc::types::os::common","",null,null],[6,"socklen_t","nix::sys::ioctl::libc::types::os::common::bsd44","",null,null],[6,"sa_family_t","","",null,null],[6,"in_port_t","","",null,null],[6,"in_addr_t","","",null,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",5,null],[12,"sa_data","","",5,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",6,null],[12,"__ss_align","","",6,null],[12,"__ss_pad2","","",6,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",7,null],[12,"sin_port","","",7,null],[12,"sin_addr","","",7,null],[12,"sin_zero","","",7,null],[3,"in_addr","","",null,null],[12,"s_addr","","",8,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",9,null],[12,"sin6_port","","",9,null],[12,"sin6_flowinfo","","",9,null],[12,"sin6_addr","","",9,null],[12,"sin6_scope_id","","",9,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",10,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",11,null],[12,"imr_interface","","",11,null],[3,"ip6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",12,null],[12,"ipv6mr_interface","","",12,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",13,null],[12,"ai_family","","",13,null],[12,"ai_socktype","","",13,null],[12,"ai_protocol","","",13,null],[12,"ai_addrlen","","",13,null],[12,"ai_addr","","",13,null],[12,"ai_canonname","","",13,null],[12,"ai_next","","",13,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",14,null],[12,"sun_path","","",14,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",15,null],[12,"ifa_name","","",15,null],[12,"ifa_flags","","",15,null],[12,"ifa_addr","","",15,null],[12,"ifa_netmask","","",15,null],[12,"ifa_ifu","","",15,null],[12,"ifa_data","","",15,null],[0,"arch","nix::sys::ioctl::libc::types::os","",null,null],[0,"c95","nix::sys::ioctl::libc::types::os::arch","",null,null],[6,"c_char","nix::sys::ioctl::libc::types::os::arch::c95","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"wchar_t","","",null,null],[0,"c99","nix::sys::ioctl::libc::types::os::arch","",null,null],[6,"c_longlong","nix::sys::ioctl::libc::types::os::arch::c99","",null,null],[6,"c_ulonglong","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[0,"posix88","nix::sys::ioctl::libc::types::os::arch","",null,null],[6,"off_t","nix::sys::ioctl::libc::types::os::arch::posix88","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"mode_t","","",null,null],[6,"ssize_t","","",null,null],[0,"posix01","nix::sys::ioctl::libc::types::os::arch","",null,null],[6,"nlink_t","nix::sys::ioctl::libc::types::os::arch::posix01","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",16,null],[12,"st_ino","","",16,null],[12,"st_nlink","","",16,null],[12,"st_mode","","",16,null],[12,"st_uid","","",16,null],[12,"st_gid","","",16,null],[12,"__pad0","","",16,null],[12,"st_rdev","","",16,null],[12,"st_size","","",16,null],[12,"st_blksize","","",16,null],[12,"st_blocks","","",16,null],[12,"st_atime","","",16,null],[12,"st_atime_nsec","","",16,null],[12,"st_mtime","","",16,null],[12,"st_mtime_nsec","","",16,null],[12,"st_ctime","","",16,null],[12,"st_ctime_nsec","","",16,null],[12,"__unused","","",16,null],[3,"utimbuf","","",null,null],[12,"actime","","",17,null],[12,"modtime","","",17,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",18,null],[0,"extra","nix::sys::ioctl::libc::types::os::arch","",null,null],[3,"sockaddr_ll","nix::sys::ioctl::libc::types::os::arch::extra","",null,null],[12,"sll_family","","",19,null],[12,"sll_protocol","","",19,null],[12,"sll_ifindex","","",19,null],[12,"sll_hatype","","",19,null],[12,"sll_pkttype","","",19,null],[12,"sll_halen","","",19,null],[12,"sll_addr","","",19,null],[0,"consts","nix::sys::ioctl::libc","",null,null],[0,"os","nix::sys::ioctl::libc::consts","",null,null],[0,"c95","nix::sys::ioctl::libc::consts::os","",null,null],[17,"EXIT_FAILURE","nix::sys::ioctl::libc::consts::os::c95","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[0,"posix88","nix::sys::ioctl::libc::consts::os","",null,null],[17,"O_RDONLY","nix::sys::ioctl::libc::consts::os::posix88","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EDOTDOT","","",null,null],[17,"EBADMSG","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"ERFKILL","","",null,null],[17,"EHWPOISON","","",null,null],[0,"posix01","nix::sys::ioctl::libc::consts::os","",null,null],[17,"F_DUPFD","nix::sys::ioctl::libc::consts::os::posix01","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIG_IGN","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[0,"posix08","nix::sys::ioctl::libc::consts::os","",null,null],[17,"O_CLOEXEC","nix::sys::ioctl::libc::consts::os::posix08","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[0,"bsd44","nix::sys::ioctl::libc::consts::os","",null,null],[17,"MADV_NORMAL","nix::sys::ioctl::libc::consts::os::bsd44","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[0,"extra","nix::sys::ioctl::libc::consts::os","",null,null],[17,"AF_PACKET","nix::sys::ioctl::libc::consts::os::extra","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"PATH_MAX","","",null,null],[0,"sysconf","nix::sys::ioctl::libc::consts::os","",null,null],[17,"_SC_ARG_MAX","nix::sys::ioctl::libc::consts::os::sysconf","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[0,"funcs","nix::sys::ioctl::libc","",null,null],[0,"c95","nix::sys::ioctl::libc::funcs","",null,null],[0,"ctype","nix::sys::ioctl::libc::funcs::c95","",null,null],[5,"isalnum","nix::sys::ioctl::libc::funcs::c95::ctype","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isalpha","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"iscntrl","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isdigit","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isgraph","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"islower","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isprint","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"ispunct","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isspace","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isupper","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isxdigit","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"tolower","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[5,"toupper","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[0,"stdio","nix::sys::ioctl::libc::funcs::c95","",null,null],[5,"fopen","nix::sys::ioctl::libc::funcs::c95::stdio","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[0,"stdlib","nix::sys::ioctl::libc::funcs::c95","",null,null],[5,"abs","nix::sys::ioctl::libc::funcs::c95::stdlib","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"labs","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[5,"atof","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","Exits the running program in a possibly dangerous manner.",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"rand","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"srand","","",null,null],[0,"string","nix::sys::ioctl::libc::funcs::c95","",null,null],[5,"strcpy","nix::sys::ioctl::libc::funcs::c95::string","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[0,"posix88","nix::sys::ioctl::libc::funcs","",null,null],[0,"stat_","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"chmod","nix::sys::ioctl::libc::funcs::posix88::stat_","",null,null],[5,"fchmod","","",null,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"i32"}}],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"mkfifo","","",null,null],[5,"stat","","",null,null],[0,"stdio","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"popen","nix::sys::ioctl::libc::funcs::posix88::stdio","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[0,"fcntl","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"open","nix::sys::ioctl::libc::funcs::posix88::fcntl","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[0,"dirent","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"opendir","nix::sys::ioctl::libc::funcs::posix88::dirent","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[0,"unistd","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"access","nix::sys::ioctl::libc::funcs::posix88::unistd","",null,null],[5,"alarm","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"dup","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"dup2","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"fpathconf","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i64"}}],[5,"getcwd","","",null,null],[5,"getegid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"getgid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"getuid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"getsid","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isatty","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"link","","",null,null],[5,"lseek","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i32"}],"output":{"name":"i64"}}],[5,"pathconf","","",null,null],[5,"pause","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"setpgid","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"setsid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"setuid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"sleep","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"usleep","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"nanosleep","","",null,null],[5,"sysconf","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i64"}}],[5,"tcgetpgrp","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[0,"signal","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"kill","nix::sys::ioctl::libc::funcs::posix88::signal","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[0,"mman","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"mlock","nix::sys::ioctl::libc::funcs::posix88::mman","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"munlockall","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"mprotect","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,null],[5,"shm_unlink","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[0,"net","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"if_nametoindex","nix::sys::ioctl::libc::funcs::posix88::net","",null,null],[0,"posix01","nix::sys::ioctl::libc::funcs","",null,null],[0,"stat_","nix::sys::ioctl::libc::funcs::posix01","",null,null],[5,"lstat","nix::sys::ioctl::libc::funcs::posix01::stat_","",null,null],[0,"unistd","nix::sys::ioctl::libc::funcs::posix01","",null,null],[5,"readlink","nix::sys::ioctl::libc::funcs::posix01::unistd","",null,null],[5,"fsync","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"fdatasync","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"putenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,{"inputs":[{"name":"i32"},{"name":"i64"}],"output":{"name":"i32"}}],[0,"signal","nix::sys::ioctl::libc::funcs::posix01","",null,null],[5,"signal","nix::sys::ioctl::libc::funcs::posix01::signal","",null,{"inputs":[{"name":"i32"},{"name":"u64"}],"output":{"name":"u64"}}],[0,"glob","nix::sys::ioctl::libc::funcs::posix01","",null,null],[5,"glob","nix::sys::ioctl::libc::funcs::posix01::glob","",null,null],[5,"globfree","","",null,null],[0,"mman","nix::sys::ioctl::libc::funcs::posix01","",null,null],[5,"posix_madvise","nix::sys::ioctl::libc::funcs::posix01::mman","",null,null],[0,"resource","nix::sys::ioctl::libc::funcs::posix01","",null,null],[5,"getrlimit","nix::sys::ioctl::libc::funcs::posix01::resource","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[0,"bsd43","nix::sys::ioctl::libc::funcs","",null,null],[5,"socket","nix::sys::ioctl::libc::funcs::bsd43","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"recv","","",null,null],[5,"send","","",null,null],[5,"recvfrom","","",null,null],[5,"sendto","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"shutdown","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[0,"bsd44","nix::sys::ioctl::libc::funcs","",null,null],[5,"getdtablesize","nix::sys::ioctl::libc::funcs::bsd44","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"ioctl","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"madvise","","",null,null],[5,"mincore","","",null,null],[5,"flock","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"ELIBACC","nix::sys::ioctl::libc","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"EBADSLT","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"STDOUT_FILENO","","",null,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",19,null],[12,"sll_protocol","","",19,null],[12,"sll_ifindex","","",19,null],[12,"sll_hatype","","",19,null],[12,"sll_pkttype","","",19,null],[12,"sll_halen","","",19,null],[12,"sll_addr","","",19,null],[6,"in_addr_t","","",null,null],[17,"ELIBSCN","","",null,null],[5,"system","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[5,"read","","",null,null],[17,"TCP_INFO","","",null,null],[5,"sysconf","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i64"}}],[17,"TMP_MAX","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"ENOCSI","","",null,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",10,null],[17,"ENFILE","","",null,null],[17,"_IONBF","","",null,null],[6,"intptr_t","","",null,null],[17,"S_IXGRP","","",null,null],[17,"ECANCELED","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"TCP_SYNCNT","","",null,null],[5,"strcspn","","",null,null],[5,"feof","","",null,null],[6,"useconds_t","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[5,"strncat","","",null,null],[5,"getsockname","","",null,null],[17,"BUFSIZ","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[5,"strtok","","",null,null],[17,"O_NOCTTY","","",null,null],[5,"recv","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[3,"in_addr","","",null,null],[12,"s_addr","","",8,null],[17,"ETIME","","",null,null],[5,"setenv","","",null,null],[17,"EBADF","","",null,null],[5,"perror","","",null,null],[5,"shm_unlink","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"MADV_REMOVE","","",null,null],[5,"getgid","","",null,{"inputs":[],"output":{"name":"u32"}}],[17,"RLIMIT_NLIMITS","","",null,null],[17,"_SC_THREADS","","",null,null],[6,"dev_t","","",null,null],[17,"EIO","","",null,null],[17,"ETIMEDOUT","","",null,null],[5,"ftell","","",null,null],[5,"pause","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"SHUT_WR","","",null,null],[5,"atoi","","",null,null],[5,"getegid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"lstat","","",null,null],[6,"uintptr_t","","",null,null],[17,"LOCK_NB","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"F_LOCK","","",null,null],[17,"EDOM","","",null,null],[5,"tolower","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[5,"getgroups","","",null,null],[17,"EBUSY","","",null,null],[5,"memchr","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"SOL_SOCKET","","",null,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",18,null],[17,"SIGHUP","","",null,null],[5,"free","","",null,null],[6,"intmax_t","","",null,null],[17,"EFBIG","","",null,null],[5,"getrlimit","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"EL3HLT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"EBADR","","",null,null],[17,"MS_SYNC","","",null,null],[5,"fork","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"RLIMIT_NPROC","","",null,null],[17,"EUNATCH","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"X_OK","","",null,null],[17,"S_IRWXO","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[5,"strcmp","","",null,null],[17,"MAP_FILE","","",null,null],[5,"freeifaddrs","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"S_IRUSR","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[5,"pwrite","","",null,null],[17,"AF_INET","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"SIGPIPE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"S_IRWXG","","",null,null],[17,"SIGINT","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"ESTRPIPE","","",null,null],[5,"strtol","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[5,"unlink","","",null,null],[17,"PROT_EXEC","","",null,null],[5,"strxfrm","","",null,null],[17,"MAP_TYPE","","",null,null],[5,"fdatasync","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[5,"fputs","","",null,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[17,"EPFNOSUPPORT","","",null,null],[17,"SHUT_RDWR","","",null,null],[6,"c_ulong","","",null,null],[17,"F_ULOCK","","",null,null],[17,"LOCK_SH","","",null,null],[17,"EADV","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"EUSERS","","",null,null],[6,"size_t","","",null,null],[5,"munlockall","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"closedir","","",null,null],[17,"F_SETFD","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"SIGQUIT","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"ENETRESET","","",null,null],[5,"strstr","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"SIGSEGV","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[5,"isatty","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isspace","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[6,"pthread_t","","",null,null],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"waitpid","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[5,"chdir","","",null,null],[17,"EFAULT","","",null,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",7,null],[12,"sin_port","","",7,null],[12,"sin_addr","","",7,null],[12,"sin_zero","","",7,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"R_OK","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"ELIBBAD","","",null,null],[17,"SO_SNDBUF","","",null,null],[5,"bind","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[5,"mkdir","","",null,null],[17,"EBADE","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ELIBMAX","","",null,null],[5,"getlogin","","",null,null],[17,"_IOLBF","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[5,"fgetc","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"F_OK","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[5,"fpathconf","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i64"}}],[5,"freopen","","",null,null],[17,"MAP_ANON","","",null,null],[17,"EXFULL","","",null,null],[5,"pclose","","",null,null],[5,"fstat","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[5,"setsockopt","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"ENOSTR","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"SIGABRT","","",null,null],[5,"nanosleep","","",null,null],[17,"EBADFD","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"SEEK_SET","","",null,null],[5,"utime","","",null,null],[17,"PATH_MAX","","",null,null],[5,"exit","","Exits the running program in a possibly dangerous manner.",null,null],[5,"fsync","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"SIGKILL","","",null,null],[17,"EPROTO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"EACCES","","",null,null],[17,"ERESTART","","",null,null],[5,"ftruncate","","",null,{"inputs":[{"name":"i32"},{"name":"i64"}],"output":{"name":"i32"}}],[17,"EBADRQC","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[5,"_exit","","",null,null],[17,"SOCK_STREAM","","",null,null],[5,"mlock","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"O_RDONLY","","",null,null],[17,"ESPIPE","","",null,null],[5,"calloc","","",null,null],[17,"S_IFBLK","","",null,null],[5,"strerror","","",null,null],[5,"chmod","","",null,null],[17,"SO_LINGER","","",null,null],[5,"strcat","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[6,"uid_t","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"F_SETFL","","",null,null],[5,"readdir_r","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[5,"fflush","","",null,null],[17,"_SC_2_VERSION","","",null,null],[4,"DIR","","",null,null],[5,"link","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[5,"ungetc","","",null,null],[5,"abs","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[6,"ptrdiff_t","","",null,null],[5,"strncpy","","",null,null],[5,"malloc","","",null,null],[17,"EISCONN","","",null,null],[5,"strncmp","","",null,null],[17,"S_IRGRP","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"AF_UNIX","","",null,null],[5,"isupper","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"O_RSYNC","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"S_IXUSR","","",null,null],[6,"ino_t","","",null,null],[5,"getpeername","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"ENOKEY","","",null,null],[5,"write","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"TCP_QUICKACK","","",null,null],[5,"fsetpos","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"ESTALE","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"S_IFMT","","",null,null],[5,"recvfrom","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[17,"ENOTCONN","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[5,"access","","",null,null],[17,"EMLINK","","",null,null],[5,"munlock","","",null,null],[6,"socklen_t","","",null,null],[6,"uint16_t","","",null,null],[5,"sleep","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[4,"c_void","","Type used to construct void pointers for use with C.",null,null],[17,"EWOULDBLOCK","","",null,null],[5,"getuid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"isprint","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"ENOEXEC","","",null,null],[5,"tmpfile","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"ENOSR","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"O_DSYNC","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"SEEK_END","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"SIGFPE","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"ENETDOWN","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"EMFILE","","",null,null],[5,"unsetenv","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[6,"c_long","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"ENOTSOCK","","",null,null],[5,"shutdown","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"ispunct","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"execve","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[5,"popen","","",null,null],[17,"ENOTTY","","",null,null],[5,"dup","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"remove","","",null,null],[5,"accept","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"MAP_STACK","","",null,null],[17,"SHUT_RD","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ELOOP","","",null,null],[17,"S_IWRITE","","",null,null],[17,"EKEYREJECTED","","",null,null],[4,"fpos_t","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"ECHRNG","","",null,null],[5,"getpid","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"EL3RST","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",6,null],[12,"__ss_align","","",6,null],[12,"__ss_pad2","","",6,null],[17,"EAGAIN","","",null,null],[5,"strlen","","",null,null],[6,"blksize_t","","",null,null],[17,"AF_INET6","","",null,null],[5,"getpgrp","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"MADV_RANDOM","","",null,null],[6,"int64_t","","",null,null],[5,"getenv","","",null,null],[5,"setgid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"setvbuf","","",null,null],[6,"uint8_t","","",null,null],[17,"EINVAL","","",null,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",13,null],[12,"ai_family","","",13,null],[12,"ai_socktype","","",13,null],[12,"ai_protocol","","",13,null],[12,"ai_addrlen","","",13,null],[12,"ai_addr","","",13,null],[12,"ai_canonname","","",13,null],[12,"ai_next","","",13,null],[17,"ENODATA","","",null,null],[5,"getopt","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"_SC_VERSION","","",null,null],[5,"strrchr","","",null,null],[5,"fread","","",null,null],[17,"IPPROTO_TCP","","",null,null],[5,"getsid","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"EAFNOSUPPORT","","",null,null],[4,"timezone","","",null,null],[5,"srand","","",null,null],[3,"ip6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",12,null],[12,"ipv6mr_interface","","",12,null],[17,"O_WRONLY","","",null,null],[17,"S_IWUSR","","",null,null],[5,"fclose","","",null,null],[6,"in_port_t","","",null,null],[5,"creat","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"LOCK_EX","","",null,null],[17,"ENOTNAM","","",null,null],[17,"_IOFBF","","",null,null],[5,"labs","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[17,"F_TLOCK","","",null,null],[17,"EDQUOT","","",null,null],[5,"open","","",null,null],[6,"blkcnt_t","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"EREMOTE","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[4,"dirent_t","","",null,null],[5,"setbuf","","",null,null],[17,"S_IEXEC","","",null,null],[5,"lseek","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i32"}],"output":{"name":"i64"}}],[17,"F_TEST","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODEV","","",null,null],[5,"realloc","","",null,null],[5,"execvp","","",null,null],[5,"pread","","",null,null],[5,"getrusage","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"EROFS","","",null,null],[17,"ENONET","","",null,null],[17,"EPERM","","",null,null],[17,"ENXIO","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"SO_TYPE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"ESRMNT","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[6,"int32_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",16,null],[12,"st_ino","","",16,null],[12,"st_nlink","","",16,null],[12,"st_mode","","",16,null],[12,"st_uid","","",16,null],[12,"st_gid","","",16,null],[12,"__pad0","","",16,null],[12,"st_rdev","","",16,null],[12,"st_size","","",16,null],[12,"st_blksize","","",16,null],[12,"st_blocks","","",16,null],[12,"st_atime","","",16,null],[12,"st_atime_nsec","","",16,null],[12,"st_mtime","","",16,null],[12,"st_mtime_nsec","","",16,null],[12,"st_ctime","","",16,null],[12,"st_ctime_nsec","","",16,null],[12,"__unused","","",16,null],[5,"stat","","",null,null],[17,"S_IFREG","","",null,null],[5,"fchmod","","",null,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"i32"}}],[17,"TCP_CORK","","",null,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",14,null],[12,"sun_path","","",14,null],[17,"EIDRM","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"ELNRNG","","",null,null],[17,"PROT_READ","","",null,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",5,null],[12,"sa_data","","",5,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[6,"c_uint","","",null,null],[5,"fileno","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[5,"rewind","","",null,null],[17,"ECHILD","","",null,null],[5,"rename","","",null,null],[4,"FILE","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[5,"toupper","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_FSYNC","","",null,null],[5,"isgraph","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"fseek","","",null,null],[17,"S_IFLNK","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"RAND_MAX","","",null,null],[17,"LOCK_UN","","",null,null],[5,"iscntrl","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"telldir","","",null,null],[17,"S_IWOTH","","",null,null],[5,"mlockall","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"O_SYNC","","",null,null],[17,"W_OK","","",null,null],[5,"strchr","","",null,null],[5,"chown","","",null,null],[17,"EPIPE","","",null,null],[17,"IPPROTO_IP","","",null,null],[5,"close","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"mmap","","",null,null],[17,"RLIM_INFINITY","","",null,null],[6,"uint32_t","","",null,null],[5,"strtoul","","",null,null],[17,"MAP_SHARED","","",null,null],[5,"opendir","","",null,null],[17,"EUCLEAN","","",null,null],[17,"O_APPEND","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",11,null],[12,"imr_interface","","",11,null],[5,"isdigit","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"GLOB_ABORTED","","",null,null],[17,"F_GETFL","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[6,"clock_t","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[5,"getcwd","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[6,"sa_family_t","","",null,null],[5,"mkfifo","","",null,null],[6,"sighandler_t","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"PROT_NONE","","",null,null],[6,"c_uchar","","",null,null],[17,"RLIMIT_STACK","","",null,null],[5,"send","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",9,null],[12,"sin6_port","","",9,null],[12,"sin6_flowinfo","","",9,null],[12,"sin6_addr","","",9,null],[12,"sin6_scope_id","","",9,null],[17,"S_IRWXU","","",null,null],[6,"c_float","","",null,null],[17,"SIGILL","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"EOF","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[5,"isxdigit","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"RLIMIT_SIGPENDING","","",null,null],[5,"execv","","",null,null],[17,"S_IXOTH","","",null,null],[17,"TCP_MD5SIG","","",null,null],[5,"wcslen","","",null,null],[5,"if_nametoindex","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"L_tmpnam","","",null,null],[5,"getifaddrs","","",null,null],[5,"strcpy","","",null,null],[17,"ENOMEDIUM","","",null,null],[5,"pipe","","",null,null],[17,"RUSAGE_SELF","","",null,null],[5,"strcoll","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[5,"putenv","","",null,null],[5,"fwrite","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[6,"nlink_t","","",null,null],[5,"fopen","","",null,null],[17,"PROT_WRITE","","",null,null],[5,"ferror","","",null,null],[6,"c_longlong","","",null,null],[17,"ENOMEM","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MAP_NORESERVE","","",null,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",0,null],[12,"gl_pathv","","",0,null],[12,"gl_offs","","",0,null],[12,"__unused1","","",0,null],[12,"__unused2","","",0,null],[12,"__unused3","","",0,null],[12,"__unused4","","",0,null],[12,"__unused5","","",0,null],[17,"EEXIST","","",null,null],[5,"atexit","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"ENOTDIR","","",null,null],[6,"c_char","","",null,null],[5,"strspn","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EXDEV","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[5,"ttyname","","",null,null],[17,"EREMOTEIO","","",null,null],[5,"setsid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"wait","","",null,null],[6,"mode_t","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"SIGTERM","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[6,"int16_t","","",null,null],[17,"EL2HLT","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"ERANGE","","",null,null],[6,"c_double","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"S_IFCHR","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[5,"mprotect","","",null,null],[5,"isalnum","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"TCP_NODELAY","","",null,null],[6,"int8_t","","",null,null],[5,"shm_open","","",null,null],[17,"F_DUPFD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"ENOBUFS","","",null,null],[6,"c_int","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[6,"wchar_t","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"EDOTDOT","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[5,"connect","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[5,"usleep","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[17,"ERFKILL","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[6,"off_t","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"SO_DONTROUTE","","",null,null],[3,"utimbuf","","",null,null],[12,"actime","","",17,null],[12,"modtime","","",17,null],[17,"ENOPKG","","",null,null],[6,"c_ulonglong","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[5,"rewinddir","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"SIGTRAP","","",null,null],[17,"IP_TTL","","",null,null],[5,"fputc","","",null,null],[5,"strtod","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[6,"ssize_t","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"SIGALRM","","",null,null],[17,"O_RDWR","","",null,null],[17,"RLIMIT_CPU","","",null,null],[5,"socket","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"MAP_LOCKED","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"E2BIG","","",null,null],[17,"EISNAM","","",null,null],[5,"dup2","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[5,"rand","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"GLOB_APPEND","","",null,null],[17,"S_IWGRP","","",null,null],[5,"puts","","",null,null],[17,"EKEYREVOKED","","",null,null],[6,"c_short","","",null,null],[5,"atof","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"O_TRUNC","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"ENOSPC","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"ECOMM","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"S_IROTH","","",null,null],[5,"fgetpos","","",null,null],[6,"gid_t","","",null,null],[5,"pathconf","","",null,null],[17,"EISDIR","","",null,null],[5,"getppid","","",null,{"inputs":[],"output":{"name":"i32"}}],[6,"uintmax_t","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"ESRCH","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MS_INVALIDATE","","",null,null],[5,"setpgid","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"ETXTBSY","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"EDEADLK","","",null,null],[5,"islower","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"AF_PACKET","","",null,null],[17,"S_IFIFO","","",null,null],[6,"c_schar","","",null,null],[5,"sendto","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"O_CREAT","","",null,null],[17,"MAP_FIXED","","",null,null],[5,"readlink","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"ENOMSG","","",null,null],[5,"rmdir","","",null,null],[5,"seekdir","","",null,null],[17,"EBFONT","","",null,null],[17,"ENETUNREACH","","",null,null],[6,"suseconds_t","","",null,null],[17,"IPPROTO_RAW","","",null,null],[5,"fdopen","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"_SC_TIMERS","","",null,null],[5,"strpbrk","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[5,"alarm","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[17,"O_EXCL","","",null,null],[6,"c_ushort","","",null,null],[6,"rlim_t","","",null,null],[5,"listen","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"memcmp","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"EBADMSG","","",null,null],[5,"msync","","",null,null],[5,"isalpha","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"setuid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"tcgetpgrp","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"RLIMIT_RSS","","",null,null],[17,"ENOENT","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"EINTR","","",null,null],[17,"SO_REUSEADDR","","",null,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[17,"EALREADY","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"F_GETFD","","",null,null],[17,"ENAVAIL","","",null,null],[6,"uint64_t","","",null,null],[5,"setrlimit","","",null,null],[6,"pid_t","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[6,"time_t","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"S_IFDIR","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"ENOANO","","",null,null],[5,"munmap","","",null,null],[17,"ENOTUNIQ","","",null,null],[5,"fgets","","",null,null],[17,"S_IREAD","","",null,null],[5,"symlink","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"EREMCHG","","",null,null],[5,"fcntl","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",15,null],[12,"ifa_name","","",15,null],[12,"ifa_flags","","",15,null],[12,"ifa_addr","","",15,null],[12,"ifa_netmask","","",15,null],[12,"ifa_ifu","","",15,null],[12,"ifa_data","","",15,null],[5,"ioc_dir","nix::sys::ioctl","Extracts the \"direction\" (read/write/none) from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[5,"ioc_type","","Extracts the type from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_nr","","Extracts the ioctl number from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_size","","Extracts the size from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[17,"NRBITS","","",null,null],[17,"TYPEBITS","","",null,null],[17,"NONE","","",null,null],[17,"READ","","",null,null],[17,"WRITE","","",null,null],[17,"SIZEBITS","","",null,null],[17,"DIRBITS","","",null,null],[17,"NRSHIFT","","",null,null],[17,"TYPESHIFT","","",null,null],[17,"SIZESHIFT","","",null,null],[17,"DIRSHIFT","","",null,null],[17,"NRMASK","","",null,null],[17,"TYPEMASK","","",null,null],[17,"SIZEMASK","","",null,null],[17,"DIRMASK","","",null,null],[17,"IN","","",null,null],[17,"OUT","","",null,null],[17,"INOUT","","",null,null],[17,"SIZE_MASK","","",null,null],[0,"signal","nix::sys","",null,null],[17,"SIGHUP","nix::sys::signal","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[5,"sigaction","","",null,{"inputs":[{"name":"signum"},{"name":"sigaction"}],"output":{"name":"result"}}],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",null,{"inputs":[{"name":"howflag"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"kill","","",null,{"inputs":[{"name":"pid_t"},{"name":"signum"}],"output":{"name":"result"}}],[0,"signal","","",null,null],[3,"SockFlag","nix::sys::signal::signal","",null,null],[3,"HowFlag","","",null,null],[3,"siginfo","","",null,null],[12,"si_signo","","",38,null],[12,"si_errno","","",38,null],[12,"si_code","","",38,null],[12,"pid","","",38,null],[12,"uid","","",38,null],[12,"status","","",38,null],[3,"sigaction","","",null,null],[12,"sa_handler","","",39,null],[12,"sa_mask","","",39,null],[12,"sa_flags","","",39,null],[3,"sigset_t","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGUNUSED","","",null,null],[11,"hash","","",40,null],[11,"cmp","","",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"sockflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",40,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",40,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",40,{"inputs":[{"name":"sockflag"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",40,{"inputs":[{"name":"sockflag"},{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",40,{"inputs":[{"name":"sockflag"},{"name":"c_ulong"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",40,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",40,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",40,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",40,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"from_iter","","",40,{"inputs":[{"name":"sockflag"},{"name":"t"}],"output":{"name":"sockflag"}}],[11,"hash","","",41,null],[11,"cmp","","",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"eq","","",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"howflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",41,{"inputs":[{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"all","","Returns the set containing all flags.",41,{"inputs":[{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",41,{"inputs":[{"name":"howflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",41,{"inputs":[{"name":"howflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",41,{"inputs":[{"name":"howflag"},{"name":"c_int"}],"output":{"name":"howflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",41,{"inputs":[{"name":"howflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",41,{"inputs":[{"name":"howflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",41,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"not","","Returns the complement of this set of flags.",41,{"inputs":[{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"from_iter","","",41,{"inputs":[{"name":"howflag"},{"name":"t"}],"output":{"name":"howflag"}}],[11,"clone","","",38,{"inputs":[{"name":"siginfo"}],"output":{"name":"siginfo"}}],[11,"clone","","",42,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[6,"SigNum","nix::sys::signal","",null,null],[17,"SIGEMT","","",null,null],[11,"clone","","",43,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset"}}],[11,"all","","",43,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset"}}],[11,"empty","","",43,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset"}}],[11,"add","","",43,{"inputs":[{"name":"sigset"},{"name":"signum"}],"output":{"name":"result"}}],[11,"remove","","",43,{"inputs":[{"name":"sigset"},{"name":"signum"}],"output":{"name":"result"}}],[11,"contains","","",43,{"inputs":[{"name":"sigset"},{"name":"signum"}],"output":{"name":"result"}}],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",43,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",43,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",43,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",43,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",43,{"inputs":[{"name":"sigset"},{"name":"howflag"}],"output":{"name":"result"}}],[11,"as_ref","","",43,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset_t"}}],[11,"new","","",44,null],[0,"signalfd","nix::sys","Interface for the `signalfd` syscall.",null,null],[3,"SfdFlags","nix::sys::signalfd","",null,null],[3,"SignalFd","","A helper struct for creating, reading and closing a `signalfd` instance.",null,null],[3,"siginfo","","",null,null],[12,"ssi_signo","","",45,null],[12,"ssi_errno","","",45,null],[12,"ssi_code","","",45,null],[12,"ssi_pid","","",45,null],[12,"ssi_uid","","",45,null],[12,"ssi_fd","","",45,null],[12,"ssi_tid","","",45,null],[12,"ssi_band","","",45,null],[12,"ssi_overrun","","",45,null],[12,"ssi_trapno","","",45,null],[12,"ssi_status","","",45,null],[12,"ssi_int","","",45,null],[12,"ssi_ptr","","",45,null],[12,"ssi_utime","","",45,null],[12,"ssi_stime","","",45,null],[12,"ssi_addr","","",45,null],[5,"signalfd","","Creates a new file descriptor for reading signals.",null,{"inputs":[{"name":"rawfd"},{"name":"sigset"},{"name":"sfdflags"}],"output":{"name":"result"}}],[17,"SFD_NONBLOCK","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"CREATE_NEW_FD","","",null,null],[17,"SIGINFO_SIZE","","",null,null],[17,"SIGINFO_PADDING","","",null,null],[11,"hash","","",46,null],[11,"cmp","","",46,{"inputs":[{"name":"sfdflags"},{"name":"sfdflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",46,{"inputs":[{"name":"sfdflags"},{"name":"sfdflags"}],"output":{"name":"option"}}],[11,"lt","","",46,{"inputs":[{"name":"sfdflags"},{"name":"sfdflags"}],"output":{"name":"bool"}}],[11,"le","","",46,{"inputs":[{"name":"sfdflags"},{"name":"sfdflags"}],"output":{"name":"bool"}}],[11,"gt","","",46,{"inputs":[{"name":"sfdflags"},{"name":"sfdflags"}],"output":{"name":"bool"}}],[11,"ge","","",46,{"inputs":[{"name":"sfdflags"},{"name":"sfdflags"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"sfdflags"}],"output":{"name":"sfdflags"}}],[11,"eq","","",46,{"inputs":[{"name":"sfdflags"},{"name":"sfdflags"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"sfdflags"},{"name":"sfdflags"}],"output":{"name":"bool"}}],[11,"fmt","","",46,{"inputs":[{"name":"sfdflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",46,{"inputs":[{"name":"sfdflags"}],"output":{"name":"sfdflags"}}],[11,"all","","Returns the set containing all flags.",46,{"inputs":[{"name":"sfdflags"}],"output":{"name":"sfdflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",46,{"inputs":[{"name":"sfdflags"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",46,{"inputs":[{"name":"sfdflags"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",46,{"inputs":[{"name":"sfdflags"},{"name":"c_int"}],"output":{"name":"sfdflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",46,{"inputs":[{"name":"sfdflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",46,{"inputs":[{"name":"sfdflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",46,{"inputs":[{"name":"sfdflags"},{"name":"sfdflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",46,{"inputs":[{"name":"sfdflags"},{"name":"sfdflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",46,{"inputs":[{"name":"sfdflags"},{"name":"sfdflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",46,{"inputs":[{"name":"sfdflags"},{"name":"sfdflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",46,{"inputs":[{"name":"sfdflags"},{"name":"sfdflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",46,{"inputs":[{"name":"sfdflags"},{"name":"sfdflags"}],"output":{"name":"sfdflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",46,{"inputs":[{"name":"sfdflags"},{"name":"sfdflags"}],"output":{"name":"sfdflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",46,{"inputs":[{"name":"sfdflags"},{"name":"sfdflags"}],"output":{"name":"sfdflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",46,{"inputs":[{"name":"sfdflags"},{"name":"sfdflags"}],"output":{"name":"sfdflags"}}],[11,"not","","Returns the complement of this set of flags.",46,{"inputs":[{"name":"sfdflags"}],"output":{"name":"sfdflags"}}],[11,"from_iter","","",46,{"inputs":[{"name":"sfdflags"},{"name":"t"}],"output":{"name":"sfdflags"}}],[11,"fmt","","",47,{"inputs":[{"name":"signalfd"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",47,{"inputs":[{"name":"signalfd"},{"name":"sigset"}],"output":{"name":"result"}}],[11,"with_flags","","",47,{"inputs":[{"name":"signalfd"},{"name":"sigset"},{"name":"sfdflags"}],"output":{"name":"result"}}],[11,"set_mask","","",47,{"inputs":[{"name":"signalfd"},{"name":"sigset"}],"output":{"name":"result"}}],[11,"read_signal","","",47,{"inputs":[{"name":"signalfd"}],"output":{"name":"result"}}],[11,"drop","","",47,{"inputs":[{"name":"signalfd"}],"output":null}],[11,"as_raw_fd","","",47,{"inputs":[{"name":"signalfd"}],"output":{"name":"rawfd"}}],[11,"next","","",47,{"inputs":[{"name":"signalfd"}],"output":{"name":"option"}}],[11,"eq","","",45,{"inputs":[{"name":"siginfo"},{"name":"siginfo"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"siginfo"},{"name":"siginfo"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"siginfo"}],"output":{"name":"siginfo"}}],[11,"fmt","","",45,{"inputs":[{"name":"siginfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",45,{"inputs":[{"name":"siginfo"}],"output":{"name":"signal_siginfo"}}],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"in_addr","nix::sys::socket","",null,null],[12,"s_addr","","",8,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",10,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",5,null],[12,"sa_data","","",5,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",7,null],[12,"sin_port","","",7,null],[12,"sin_addr","","",7,null],[12,"sin_zero","","",7,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",9,null],[12,"sin6_port","","",9,null],[12,"sin6_flowinfo","","",9,null],[12,"sin6_addr","","",9,null],[12,"sin6_scope_id","","",9,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",14,null],[12,"sun_path","","",14,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",6,null],[12,"__ss_align","","",6,null],[12,"__ss_pad2","","",6,null],[3,"UnixAddr","","",null,null],[3,"Ipv4Addr","","",null,null],[3,"Ipv6Addr","","",null,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",48,null],[12,"imr_interface","","",48,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",49,null],[12,"ipv6mr_interface","","",49,null],[3,"SockFlag","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",50,null],[12,"l_linger","","",50,null],[4,"AddressFamily","","",null,null],[13,"Unix","","",51,null],[13,"Inet","","",51,null],[13,"Inet6","","",51,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",52,null],[13,"Unix","","",52,null],[4,"InetAddr","","",null,null],[13,"V4","","",53,null],[13,"V6","","",53,null],[4,"IpAddr","","",null,null],[13,"V4","","",54,null],[13,"V6","","",54,null],[4,"SockType","","",null,null],[13,"Stream","","",55,null],[13,"Datagram","","",55,null],[13,"SeqPacket","","",55,null],[13,"Raw","","",55,null],[13,"Rdm","","",55,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an\nargument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",56,null],[13,"Tcp","","",56,null],[13,"Ip","","",56,null],[13,"Ipv6","","",56,null],[13,"Udp","","",56,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",57,null],[13,"Write","","Further  transmissions will be disallowed.",57,null],[13,"Both","","Further receptions and transmissions will be disallowed.",57,null],[5,"socket","","Create an endpoint for communication",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"c_int"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[5,"bind","","Bind a name to a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of\nbytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns\nthe number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"}],"output":{"name":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"},{"name":"val"}],"output":{"name":"result"}}],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"sockaddr_storage_to_addr","","",null,{"inputs":[{"name":"sockaddr_storage"},{"name":"usize"}],"output":{"name":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"inputs":[{"name":"rawfd"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"hash","","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"addressfamily"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"addressfamily"}],"output":{"name":"addressfamily"}}],[11,"from_std","","",53,{"inputs":[{"name":"inetaddr"},{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",53,{"inputs":[{"name":"inetaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",53,{"inputs":[{"name":"inetaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",53,{"inputs":[{"name":"inetaddr"}],"output":{"name":"u16"}}],[11,"to_std","","",53,{"inputs":[{"name":"inetaddr"}],"output":{"name":"socketaddr"}}],[11,"to_str","","",53,{"inputs":[{"name":"inetaddr"}],"output":{"name":"string"}}],[11,"eq","","",53,{"inputs":[{"name":"inetaddr"},{"name":"inetaddr"}],"output":{"name":"bool"}}],[11,"hash","","",53,{"inputs":[{"name":"inetaddr"},{"name":"h"}],"output":null}],[11,"clone","","",53,{"inputs":[{"name":"inetaddr"}],"output":{"name":"inetaddr"}}],[11,"fmt","","",53,{"inputs":[{"name":"inetaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",54,{"inputs":[{"name":"ipaddr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",54,{"inputs":[{"name":"ipaddr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",54,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",58,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",58,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",58,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"octets","","",58,null],[11,"to_std","","",58,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",58,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",58,{"inputs":[{"name":"ipv4addr"},{"name":"h"}],"output":null}],[11,"clone","","",58,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"fmt","","",58,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"new","","",59,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",59,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",59,null],[11,"to_std","","",59,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",59,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",60,{"inputs":[{"name":"unixaddr"},{"name":"p"}],"output":{"name":"result"}}],[11,"path","","",60,{"inputs":[{"name":"unixaddr"}],"output":{"name":"path"}}],[11,"eq","","",60,{"inputs":[{"name":"unixaddr"},{"name":"unixaddr"}],"output":{"name":"bool"}}],[11,"hash","","",60,{"inputs":[{"name":"unixaddr"},{"name":"h"}],"output":null}],[11,"clone","","",60,{"inputs":[{"name":"unixaddr"}],"output":{"name":"unixaddr"}}],[11,"fmt","","",60,{"inputs":[{"name":"unixaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_inet","","",52,{"inputs":[{"name":"sockaddr"},{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",52,{"inputs":[{"name":"sockaddr"},{"name":"p"}],"output":{"name":"result"}}],[11,"family","","",52,{"inputs":[{"name":"sockaddr"}],"output":{"name":"addressfamily"}}],[11,"to_str","","",52,{"inputs":[{"name":"sockaddr"}],"output":{"name":"string"}}],[11,"as_ffi_pair","","",52,null],[11,"eq","","",52,{"inputs":[{"name":"sockaddr"},{"name":"sockaddr"}],"output":{"name":"bool"}}],[11,"hash","","",52,{"inputs":[{"name":"sockaddr"},{"name":"h"}],"output":null}],[11,"clone","","",52,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"fmt","","",52,{"inputs":[{"name":"sockaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"fmt","","",48,{"inputs":[{"name":"ip_mreq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",48,{"inputs":[{"name":"ip_mreq"},{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",49,{"inputs":[{"name":"ipv6_mreq"},{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"TcpKeepIdle","","",null,null],[11,"fmt","","",61,{"inputs":[{"name":"reuseaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"reuseaddr"}],"output":{"name":"reuseaddr"}}],[11,"set","","",61,{"inputs":[{"name":"reuseaddr"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",61,{"inputs":[{"name":"reuseaddr"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"reuseport"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"reuseport"}],"output":{"name":"reuseport"}}],[11,"set","","",62,{"inputs":[{"name":"reuseport"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",62,{"inputs":[{"name":"reuseport"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"tcpnodelay"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"tcpnodelay"}],"output":{"name":"tcpnodelay"}}],[11,"set","","",63,{"inputs":[{"name":"tcpnodelay"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",63,{"inputs":[{"name":"tcpnodelay"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"linger"}],"output":{"name":"linger"}}],[11,"set","","",64,{"inputs":[{"name":"linger"},{"name":"rawfd"},{"name":"linger"}],"output":{"name":"result"}}],[11,"get","","",64,{"inputs":[{"name":"linger"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"ipaddmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"ipaddmembership"}],"output":{"name":"ipaddmembership"}}],[11,"set","","",65,{"inputs":[{"name":"ipaddmembership"},{"name":"rawfd"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"ipdropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"ipdropmembership"}],"output":{"name":"ipdropmembership"}}],[11,"set","","",66,{"inputs":[{"name":"ipdropmembership"},{"name":"rawfd"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"ipv6addmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"ipv6addmembership"}],"output":{"name":"ipv6addmembership"}}],[11,"set","","",67,{"inputs":[{"name":"ipv6addmembership"},{"name":"rawfd"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"ipv6dropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"ipv6dropmembership"}],"output":{"name":"ipv6dropmembership"}}],[11,"set","","",68,{"inputs":[{"name":"ipv6dropmembership"},{"name":"rawfd"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"ipmulticastttl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"ipmulticastttl"}],"output":{"name":"ipmulticastttl"}}],[11,"set","","",69,{"inputs":[{"name":"ipmulticastttl"},{"name":"rawfd"},{"name":"u8"}],"output":{"name":"result"}}],[11,"get","","",69,{"inputs":[{"name":"ipmulticastttl"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"ipmulticastloop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"ipmulticastloop"}],"output":{"name":"ipmulticastloop"}}],[11,"set","","",70,{"inputs":[{"name":"ipmulticastloop"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",70,{"inputs":[{"name":"ipmulticastloop"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"receivetimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"receivetimeout"}],"output":{"name":"receivetimeout"}}],[11,"set","","",71,{"inputs":[{"name":"receivetimeout"},{"name":"rawfd"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",71,{"inputs":[{"name":"receivetimeout"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"sendtimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"sendtimeout"}],"output":{"name":"sendtimeout"}}],[11,"set","","",72,{"inputs":[{"name":"sendtimeout"},{"name":"rawfd"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",72,{"inputs":[{"name":"sendtimeout"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"broadcast"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"broadcast"}],"output":{"name":"broadcast"}}],[11,"set","","",73,{"inputs":[{"name":"broadcast"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",73,{"inputs":[{"name":"broadcast"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"oobinline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"oobinline"}],"output":{"name":"oobinline"}}],[11,"set","","",74,{"inputs":[{"name":"oobinline"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",74,{"inputs":[{"name":"oobinline"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"socketerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"socketerror"}],"output":{"name":"socketerror"}}],[11,"get","","",75,{"inputs":[{"name":"socketerror"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"keepalive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"keepalive"}],"output":{"name":"keepalive"}}],[11,"set","","",76,{"inputs":[{"name":"keepalive"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",76,{"inputs":[{"name":"keepalive"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"tcpkeepidle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"tcpkeepidle"}],"output":{"name":"tcpkeepidle"}}],[11,"set","","",77,{"inputs":[{"name":"tcpkeepidle"},{"name":"rawfd"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get","","",77,{"inputs":[{"name":"tcpkeepidle"},{"name":"rawfd"}],"output":{"name":"result"}}],[6,"IpMulticastTtl","nix::sys::socket","",null,null],[6,"InAddrT","","",null,null],[6,"SockMessageFlags","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[8,"GetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `getsockopt`",null,null],[16,"Val","","",78,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `setsockopt`",null,null],[16,"Val","","",79,null],[11,"fmt","","",55,{"inputs":[{"name":"socktype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"socktype"}],"output":{"name":"socktype"}}],[11,"hash","","",80,null],[11,"cmp","","",80,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",80,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",80,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",80,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",80,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",80,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",80,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"fmt","","",80,{"inputs":[{"name":"sockflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",80,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",80,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",80,{"inputs":[{"name":"sockflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",80,{"inputs":[{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",80,{"inputs":[{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",80,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",80,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",80,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",80,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",80,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",80,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",80,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",80,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",80,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",80,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",80,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",80,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"from_iter","","",80,{"inputs":[{"name":"sockflag"},{"name":"t"}],"output":{"name":"sockflag"}}],[11,"fmt","","",50,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"linger"}],"output":{"name":"linger"}}],[11,"fmt","","",57,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",16,null],[12,"st_ino","","",16,null],[12,"st_nlink","","",16,null],[12,"st_mode","","",16,null],[12,"st_uid","","",16,null],[12,"st_gid","","",16,null],[12,"__pad0","","",16,null],[12,"st_rdev","","",16,null],[12,"st_size","","",16,null],[12,"st_blksize","","",16,null],[12,"st_blocks","","",16,null],[12,"st_atime","","",16,null],[12,"st_atime_nsec","","",16,null],[12,"st_mtime","","",16,null],[12,"st_mtime_nsec","","",16,null],[12,"st_ctime","","",16,null],[12,"st_ctime_nsec","","",16,null],[12,"__unused","","",16,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"inputs":[{"name":"p"},{"name":"sflag"},{"name":"mode"},{"name":"dev_t"}],"output":{"name":"result"}}],[5,"mkdev","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"dev_t"}}],[5,"umask","","",null,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[5,"stat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"lstat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fstat","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[17,"S_IFREG","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[11,"hash","","",81,null],[11,"cmp","","",81,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"option"}}],[11,"lt","","",81,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"le","","",81,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"gt","","",81,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ge","","",81,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"eq","","",81,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"fmt","","",81,{"inputs":[{"name":"sflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",81,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",81,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",81,{"inputs":[{"name":"sflag"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",81,{"inputs":[{"name":"sflag"},{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",81,{"inputs":[{"name":"sflag"},{"name":"mode_t"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",81,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",81,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",81,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",81,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",81,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",81,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",81,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",81,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",81,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",81,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",81,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"not","","Returns the complement of this set of flags.",81,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"from_iter","","",81,{"inputs":[{"name":"sflag"},{"name":"t"}],"output":{"name":"sflag"}}],[11,"hash","","",82,null],[11,"cmp","","",82,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",82,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"option"}}],[11,"lt","","",82,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"le","","",82,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"gt","","",82,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ge","","",82,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"eq","","",82,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"mode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",82,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",82,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",82,{"inputs":[{"name":"mode"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",82,{"inputs":[{"name":"mode"},{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",82,{"inputs":[{"name":"mode"},{"name":"mode_t"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",82,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",82,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",82,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",82,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",82,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",82,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",82,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",82,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",82,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",82,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",82,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"not","","Returns the complement of this set of flags.",82,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"from_iter","","",82,{"inputs":[{"name":"mode"},{"name":"t"}],"output":{"name":"mode"}}],[0,"syscall","nix::sys","Indirect system call",null,null],[5,"syscall","nix::sys::syscall","",null,null],[6,"Syscall","","",null,null],[7,"SYSPIVOTROOT","","",null,null],[7,"MEMFD_CREATE","","",null,null],[0,"termios","nix::sys","",null,null],[3,"Termios","nix::sys::termios","",null,null],[12,"c_iflag","","",83,null],[12,"c_oflag","","",83,null],[12,"c_cflag","","",83,null],[12,"c_lflag","","",83,null],[12,"c_line","","",83,null],[12,"c_cc","","",83,null],[12,"c_ispeed","","",83,null],[12,"c_ospeed","","",83,null],[3,"InputFlags","","",null,null],[3,"OutputFlags","","",null,null],[3,"ControlFlags","","",null,null],[3,"LocalFlags","","",null,null],[4,"SetArg","","",null,null],[13,"TCSANOW","","",84,null],[13,"TCSADRAIN","","",84,null],[13,"TCSAFLUSH","","",84,null],[4,"FlushArg","","",null,null],[13,"TCIFLUSH","","",85,null],[13,"TCOFLUSH","","",85,null],[13,"TCIOFLUSH","","",85,null],[4,"FlowArg","","",null,null],[13,"TCOOFF","","",86,null],[13,"TCOON","","",86,null],[13,"TCIOFF","","",86,null],[13,"TCION","","",86,null],[5,"cfgetispeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfgetospeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfsetispeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"cfsetospeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"tcgetattr","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcsetattr","","",null,{"inputs":[{"name":"rawfd"},{"name":"setarg"},{"name":"termios"}],"output":{"name":"result"}}],[5,"tcdrain","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcflow","","",null,{"inputs":[{"name":"rawfd"},{"name":"flowarg"}],"output":{"name":"result"}}],[5,"tcflush","","",null,{"inputs":[{"name":"rawfd"},{"name":"flusharg"}],"output":{"name":"result"}}],[5,"tcsendbreak","","",null,{"inputs":[{"name":"rawfd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"hash","","",87,null],[11,"cmp","","",87,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"option"}}],[11,"lt","","",87,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"le","","",87,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"gt","","",87,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ge","","",87,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"eq","","",87,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"fmt","","",87,{"inputs":[{"name":"inputflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",87,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",87,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",87,{"inputs":[{"name":"inputflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",87,{"inputs":[{"name":"inputflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",87,{"inputs":[{"name":"inputflags"},{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",87,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",87,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",87,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",87,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",87,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",87,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",87,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",87,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",87,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",87,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",87,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"not","","Returns the complement of this set of flags.",87,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"from_iter","","",87,{"inputs":[{"name":"inputflags"},{"name":"t"}],"output":{"name":"inputflags"}}],[11,"hash","","",88,null],[11,"cmp","","",88,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",88,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"option"}}],[11,"lt","","",88,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"le","","",88,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"gt","","",88,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ge","","",88,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"eq","","",88,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"fmt","","",88,{"inputs":[{"name":"outputflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",88,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",88,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",88,{"inputs":[{"name":"outputflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",88,{"inputs":[{"name":"outputflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",88,{"inputs":[{"name":"outputflags"},{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",88,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",88,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",88,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",88,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",88,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",88,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",88,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",88,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",88,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",88,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",88,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"not","","Returns the complement of this set of flags.",88,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"from_iter","","",88,{"inputs":[{"name":"outputflags"},{"name":"t"}],"output":{"name":"outputflags"}}],[11,"hash","","",89,null],[11,"cmp","","",89,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"option"}}],[11,"lt","","",89,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"le","","",89,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"gt","","",89,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ge","","",89,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"eq","","",89,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"fmt","","",89,{"inputs":[{"name":"controlflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",89,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",89,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",89,{"inputs":[{"name":"controlflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",89,{"inputs":[{"name":"controlflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",89,{"inputs":[{"name":"controlflags"},{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",89,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",89,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",89,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",89,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",89,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",89,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",89,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",89,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",89,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",89,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",89,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"not","","Returns the complement of this set of flags.",89,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"from_iter","","",89,{"inputs":[{"name":"controlflags"},{"name":"t"}],"output":{"name":"controlflags"}}],[11,"hash","","",90,null],[11,"cmp","","",90,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",90,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"option"}}],[11,"lt","","",90,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"le","","",90,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"gt","","",90,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ge","","",90,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"eq","","",90,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"fmt","","",90,{"inputs":[{"name":"localflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",90,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",90,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",90,{"inputs":[{"name":"localflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",90,{"inputs":[{"name":"localflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",90,{"inputs":[{"name":"localflags"},{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",90,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",90,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",90,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",90,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",90,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",90,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",90,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",90,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",90,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",90,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",90,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"not","","Returns the complement of this set of flags.",90,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"from_iter","","",90,{"inputs":[{"name":"localflags"},{"name":"t"}],"output":{"name":"localflags"}}],[11,"clone","","",84,{"inputs":[{"name":"setarg"}],"output":{"name":"setarg"}}],[11,"clone","","",85,{"inputs":[{"name":"flusharg"}],"output":{"name":"flusharg"}}],[11,"clone","","",86,{"inputs":[{"name":"flowarg"}],"output":{"name":"flowarg"}}],[6,"tcflag_t","","",null,null],[6,"cc_t","","",null,null],[6,"speed_t","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"NCCS","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[0,"utsname","nix::sys","",null,null],[3,"UtsName","nix::sys::utsname","",null,null],[5,"uname","","",null,{"inputs":[],"output":{"name":"utsname"}}],[11,"clone","","",91,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"sysname","","",91,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"nodename","","",91,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"release","","",91,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"version","","",91,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"machine","","",91,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","",null,null],[13,"Exited","","",92,null],[13,"Signaled","","",92,null],[13,"Stopped","","",92,null],[13,"Continued","","",92,null],[13,"StillAlive","","",92,null],[5,"waitpid","","",null,{"inputs":[{"name":"pid_t"},{"name":"option"}],"output":{"name":"result"}}],[5,"wait","","",null,{"inputs":[],"output":{"name":"result"}}],[17,"WNOHANG","","",null,null],[11,"hash","","",93,null],[11,"cmp","","",93,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",93,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"option"}}],[11,"lt","","",93,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"le","","",93,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"gt","","",93,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ge","","",93,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"eq","","",93,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"fmt","","",93,{"inputs":[{"name":"waitpidflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",93,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",93,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",93,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",93,{"inputs":[{"name":"waitpidflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",93,{"inputs":[{"name":"waitpidflag"},{"name":"c_int"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",93,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",93,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",93,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",93,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",93,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",93,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",93,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",93,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",93,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",93,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",93,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"not","","Returns the complement of this set of flags.",93,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"from_iter","","",93,{"inputs":[{"name":"waitpidflag"},{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"fmt","","",92,{"inputs":[{"name":"waitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"waitstatus"}],"output":{"name":"waitstatus"}}],[11,"eq","","",92,{"inputs":[{"name":"waitstatus"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"waitstatus"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[0,"mman","nix::sys","",null,null],[5,"mlock","nix::sys::mman","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically\na higher-level abstraction will hide the unsafe interactions with the mmap'd region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"shm_unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[6,"MmapFlag","","",null,null],[6,"MmapProt","","",null,null],[6,"MmapAdvise","","",null,null],[6,"MmapSync","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MAP_FAILED","","",null,null],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"pwrite","","",null,null],[5,"pread","","",null,null],[11,"as_slice","","",94,null],[11,"from_slice","","",94,null],[11,"from_mut_slice","","",94,null],[0,"time","nix::sys","",null,null],[3,"TimeVal","nix::sys::time","",null,null],[12,"tv_sec","","",95,null],[12,"tv_usec","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",95,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",95,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"option"}}],[11,"lt","","",95,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"le","","",95,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"gt","","",95,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ge","","",95,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"eq","","",95,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"zero","","",95,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"hours","","",95,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",95,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",95,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",95,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",95,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",95,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_minutes","","",95,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_seconds","","",95,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","",95,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_microseconds","","",95,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"neg","","",95,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"add","","",95,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"sub","","",95,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"mul","","",95,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"div","","",95,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"fmt","","",95,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ptrace","nix::sys","",null,null],[5,"ptrace","nix::sys::ptrace","",null,null],[0,"ptrace","","",null,null],[6,"PtraceRequest","nix::sys::ptrace::ptrace","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[0,"select","nix::sys","",null,null],[3,"FdSet","nix::sys::select","",null,null],[5,"select","","",null,{"inputs":[{"name":"c_int"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"timeval"}],"output":{"name":"result"}}],[17,"FD_SETSIZE","","",null,null],[11,"new","","",96,{"inputs":[{"name":"fdset"}],"output":{"name":"fdset"}}],[11,"insert","","",96,{"inputs":[{"name":"fdset"},{"name":"rawfd"}],"output":null}],[11,"remove","","",96,{"inputs":[{"name":"fdset"},{"name":"rawfd"}],"output":null}],[11,"contains","","",96,{"inputs":[{"name":"fdset"},{"name":"rawfd"}],"output":{"name":"bool"}}],[0,"quota","nix::sys","",null,null],[5,"quotactl_on","nix::sys::quota","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"quotafmt"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_off","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_sync","","",null,{"inputs":[{"name":"quotatype"},{"name":"option"}],"output":{"name":"result"}}],[5,"quotactl_get","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[5,"quotactl_set","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[0,"quota","","",null,null],[3,"QuotaCmd","nix::sys::quota::quota","",null,null],[3,"QuotaValidFlags","","",null,null],[3,"Dqblk","","",null,null],[12,"bhardlimit","","",97,null],[12,"bsoftlimit","","",97,null],[12,"curspace","","",97,null],[12,"ihardlimit","","",97,null],[12,"isoftlimit","","",97,null],[12,"curinodes","","",97,null],[12,"btime","","",97,null],[12,"itime","","",97,null],[12,"valid","","",97,null],[6,"QuotaSubCmd","","",null,null],[6,"QuotaType","","",null,null],[6,"QuotaFmt","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[11,"as_int","","",98,{"inputs":[{"name":"quotacmd"}],"output":{"name":"c_int"}}],[11,"hash","","",99,null],[11,"cmp","","",99,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",99,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"option"}}],[11,"lt","","",99,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"le","","",99,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"gt","","",99,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"ge","","",99,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"clone","","",99,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"eq","","",99,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"default","","",99,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"fmt","","",99,{"inputs":[{"name":"quotavalidflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",99,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"all","","Returns the set containing all flags.",99,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",99,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",99,{"inputs":[{"name":"quotavalidflags"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",99,{"inputs":[{"name":"quotavalidflags"},{"name":"u32"}],"output":{"name":"quotavalidflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",99,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",99,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",99,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",99,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",99,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",99,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",99,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",99,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",99,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",99,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",99,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"not","","Returns the complement of this set of flags.",99,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"from_iter","","",99,{"inputs":[{"name":"quotavalidflags"},{"name":"t"}],"output":{"name":"quotavalidflags"}}],[11,"clone","","",97,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"fmt","","",97,{"inputs":[{"name":"dqblk"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",97,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[0,"statfs","nix::sys","",null,null],[5,"statfs","nix::sys::statfs","",null,{"inputs":[{"name":"p"},{"name":"statfs"}],"output":{"name":"result"}}],[5,"fstatfs","","",null,{"inputs":[{"name":"t"},{"name":"statfs"}],"output":{"name":"result"}}],[0,"vfs","","",null,null],[3,"Statfs","nix::sys::statfs::vfs","",null,null],[12,"f_type","","",100,null],[12,"f_bsize","","",100,null],[12,"f_blocks","","",100,null],[12,"f_bfree","","",100,null],[12,"f_bavail","","",100,null],[12,"f_files","","",100,null],[12,"f_ffree","","",100,null],[12,"f_fsid","","",100,null],[12,"f_namelen","","",100,null],[12,"f_frsize","","",100,null],[12,"f_spare","","",100,null],[0,"hwdep","","",null,null],[6,"FsType","nix::sys::statfs::vfs::hwdep","",null,null],[6,"BlockSize","","",null,null],[6,"NameLen","","",null,null],[6,"FragmentSize","","",null,null],[6,"SwordType","","",null,null],[17,"ADFS_SUPER_MAGIC","nix::sys::statfs::vfs","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"BEFS_SUPER_MAGIC","","",null,null],[17,"BFS_MAGIC","","",null,null],[17,"CIFS_MAGIC_NUMBER","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"COH_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"DEVFS_SUPER_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT_SUPER_MAGIC","","",null,null],[17,"EXT2_OLD_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HFS_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"JFS_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"NTFS_SB_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"ROMFS_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"SYSV2_SUPER_MAGIC","","",null,null],[17,"SYSV4_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"UDF_SUPER_MAGIC","","",null,null],[17,"UFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VXFS_SUPER_MAGIC","","",null,null],[17,"XENIX_SUPER_MAGIC","","",null,null],[17,"XFS_SUPER_MAGIC","","",null,null],[17,"_XIAFS_SUPER_MAGIC","","",null,null],[11,"clone","","",100,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"fmt","","",100,{"inputs":[{"name":"statfs"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"statvfs","nix::sys","",null,null],[5,"statvfs","nix::sys::statvfs","",null,{"inputs":[{"name":"p"},{"name":"statvfs"}],"output":{"name":"result"}}],[5,"fstatvfs","","",null,{"inputs":[{"name":"t"},{"name":"statvfs"}],"output":{"name":"result"}}],[0,"vfs","","",null,null],[3,"FsFlags","nix::sys::statvfs::vfs","",null,null],[3,"Statvfs","","",null,null],[12,"f_bsize","","",101,null],[12,"f_frsize","","",101,null],[12,"f_blocks","","",101,null],[12,"f_bfree","","",101,null],[12,"f_bavail","","",101,null],[12,"f_files","","",101,null],[12,"f_ffree","","",101,null],[12,"f_favail","","",101,null],[12,"f_fsid","","",101,null],[12,"f_flag","","",101,null],[12,"f_namemax","","",101,null],[17,"RDONLY","","",null,null],[17,"NOSUID","","",null,null],[17,"NODEV","","",null,null],[17,"NOEXEC","","",null,null],[17,"SYNCHRONOUS","","",null,null],[17,"MANDLOCK","","",null,null],[17,"WRITE","","",null,null],[17,"APPEND","","",null,null],[17,"IMMUTABLE","","",null,null],[17,"NOATIME","","",null,null],[17,"NODIRATIME","","",null,null],[17,"RELATIME","","",null,null],[11,"hash","","",102,null],[11,"cmp","","",102,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",102,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"option"}}],[11,"lt","","",102,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"le","","",102,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"gt","","",102,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ge","","",102,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"eq","","",102,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"default","","",102,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"fmt","","",102,{"inputs":[{"name":"fsflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",102,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",102,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",102,{"inputs":[{"name":"fsflags"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",102,{"inputs":[{"name":"fsflags"},{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",102,{"inputs":[{"name":"fsflags"},{"name":"c_ulong"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",102,{"inputs":[{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",102,{"inputs":[{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",102,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",102,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",102,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",102,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",102,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",102,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",102,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",102,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",102,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"not","","Returns the complement of this set of flags.",102,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"from_iter","","",102,{"inputs":[{"name":"fsflags"},{"name":"t"}],"output":{"name":"fsflags"}}],[11,"clone","","",101,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"fmt","","",101,{"inputs":[{"name":"statvfs"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"unistd","nix","Standard symbolic constants and types",null,null],[4,"Fork","nix::unistd","",null,null],[13,"Parent","","",103,null],[13,"Child","","",103,null],[5,"pivot_root","","",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"result"}}],[5,"fork","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"dup","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup2","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup3","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"oflag"}],"output":{"name":"result"}}],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"sethostname","","",null,null],[5,"gethostname","","",null,null],[5,"close","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"read","","",null,null],[5,"write","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"pipe2","","",null,{"inputs":[{"name":"oflag"}],"output":{"name":"result"}}],[5,"ftruncate","","",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"}],"output":{"name":"result"}}],[5,"isatty","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chroot","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"fork"}],"output":{"name":"fork"}}],[11,"is_child","","",103,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[11,"is_parent","","",103,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[6,"Result","nix","",null,null],[8,"NixPath","","",null,null],[10,"len","","",104,{"inputs":[{"name":"nixpath"}],"output":{"name":"usize"}}],[10,"with_nix_path","","",104,{"inputs":[{"name":"nixpath"},{"name":"f"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_errno","","",20,{"inputs":[{"name":"error"},{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",20,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"invalid_argument","","",20,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"errno","","",20,{"inputs":[{"name":"error"}],"output":{"name":"errno"}}],[11,"len","std::path","",105,{"inputs":[{"name":"path"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",105,{"inputs":[{"name":"path"},{"name":"f"}],"output":{"name":"result"}}],[11,"len","","",106,{"inputs":[{"name":"pathbuf"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",106,{"inputs":[{"name":"pathbuf"},{"name":"f"}],"output":{"name":"result"}}],[14,"ioc!","nix","Encode an ioctl command.",null,null],[14,"io!","","Encode an ioctl command that has no associated data.",null,null],[14,"ior!","","Encode an ioctl command that reads.",null,null],[14,"iow!","","Encode an ioctl command that writes.",null,null],[14,"iorw!","","Encode an ioctl command that both reads and writes.",null,null],[14,"convert_ioctl_res!","","Convert raw ioctl return value to a Nix result",null,null],[14,"ioctl!","","Declare a wrapper function around an ioctl.",null,null]],"paths":[[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"FileStat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"],[4,"Error"],[4,"Errno"],[3,"flock"],[4,"FcntlArg"],[4,"FlockArg"],[3,"OFlag"],[3,"FdFlag"],[3,"SealFlag"],[3,"MsFlags"],[3,"MntFlags"],[3,"MqAttr"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"CpuSet"],[3,"EpollEvent"],[4,"EpollOp"],[3,"EpollEventKind"],[3,"MemFdCreateFlag"],[3,"siginfo"],[3,"sigaction"],[3,"SockFlag"],[3,"HowFlag"],[3,"sigset_t"],[3,"SigSet"],[3,"SigAction"],[3,"siginfo"],[3,"SfdFlags"],[3,"SignalFd"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"linger"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"SockLevel"],[4,"Shutdown"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"UnixAddr"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"TcpKeepIdle"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[3,"UtsName"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"Dqblk"],[3,"QuotaCmd"],[3,"QuotaValidFlags"],[3,"Statfs"],[3,"Statvfs"],[3,"FsFlags"],[4,"Fork"],[8,"NixPath"],[3,"Path"],[3,"PathBuf"]]};
searchIndex['context'] = {"items":[[0,"","context","",null,null],[0,"context","","",null,null],[3,"Context","context::context","",null,null],[6,"InitFn","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"context"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","",0,{"inputs":[{"name":"context"}],"output":{"name":"context"}}],[11,"new","","Create a new context that will resume execution by running start",0,null],[11,"init_with","","",0,null],[11,"swap","","Switch contexts\nSuspend the current execution context and resume another by\nsaving the registers values of the executing thread to a Context\nthen loading the registers from a previously saved Context.",0,{"inputs":[{"name":"context"},{"name":"context"},{"name":"context"}],"output":null}],[11,"save","","Save the current context.",0,{"inputs":[{"name":"context"},{"name":"context"}],"output":null}],[11,"load","","Load the context and switch. This function will never return.",0,{"inputs":[{"name":"context"},{"name":"context"}],"output":null}],[0,"stack","context","",null,null],[3,"Stack","context::stack","A task's stack. The name \"Stack\" is a vestige of segmented stacks.",null,null],[3,"StackPool","","",null,null],[11,"fmt","","",1,{"inputs":[{"name":"stack"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Allocate a new stack of `size`. If size = 0, this will fail. Use\n`dummy_stack` if you want a zero-sized stack.",1,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stack"}}],[11,"dummy_stack","","Create a 0-length stack which starts (and ends) at 0.",1,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"guard","","",1,null],[11,"start","","Point to the low end of the allocated stack",1,null],[11,"end","","Point one usize beyond the high end of the allocated stack",1,null],[11,"fmt","","",2,{"inputs":[{"name":"stackpool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",2,{"inputs":[{"name":"stackpool"}],"output":{"name":"stackpool"}}],[11,"take_stack","","",2,{"inputs":[{"name":"stackpool"},{"name":"usize"}],"output":{"name":"stack"}}],[11,"give_stack","","",2,{"inputs":[{"name":"stackpool"},{"name":"stack"}],"output":null}]],"paths":[[3,"Context"],[3,"Stack"],[3,"StackPool"]]};
searchIndex['winapi'] = {"items":[],"paths":[]};
searchIndex['memmap'] = {"items":[[0,"","memmap","A cross-platform Rust API for memory maps.",null,null],[3,"MmapOptions","","",null,null],[12,"stack","","Indicates that the memory map should be suitable for a stack.",0,null],[3,"Mmap","","A memory-mapped buffer.",null,null],[3,"MmapView","","A view of a memory map.",null,null],[3,"MmapViewSync","","A thread-safe view of a memory map.",null,null],[4,"Protection","","Memory map protection.",null,null],[13,"Read","","A read-only memory map. Writes to the memory map will result in a panic.",1,null],[13,"ReadWrite","","A read-write memory map. Writes to the memory map will be reflected in the file after a\ncall to `Mmap::flush` or after the `Mmap` is dropped.",1,null],[13,"ReadCopy","","A read, copy-on-write memory map. Writes to the memory map will not be carried through to\nthe underlying file. It is unspecified whether changes made to the file after the memory map\nis created will be visible.",1,null],[11,"eq","","",1,{"inputs":[{"name":"protection"},{"name":"protection"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"protection"},{"name":"protection"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"protection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"protection"}],"output":{"name":"protection"}}],[11,"write","","Returns `true` if the `Protection` is writable.",1,{"inputs":[{"name":"protection"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"mmapoptions"},{"name":"mmapoptions"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"mmapoptions"},{"name":"mmapoptions"}],"output":{"name":"bool"}}],[11,"default","","",0,{"inputs":[{"name":"mmapoptions"}],"output":{"name":"mmapoptions"}}],[11,"fmt","","",0,{"inputs":[{"name":"mmapoptions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"mmapoptions"}],"output":{"name":"mmapoptions"}}],[11,"open","","Opens a file-backed memory map.",2,{"inputs":[{"name":"mmap"},{"name":"file"},{"name":"protection"}],"output":{"name":"result"}}],[11,"open_path","","Opens a file-backed memory map.",2,{"inputs":[{"name":"mmap"},{"name":"p"},{"name":"protection"}],"output":{"name":"result"}}],[11,"open_with_offset","","Opens a file-backed memory map with the specified offset and length.",2,{"inputs":[{"name":"mmap"},{"name":"file"},{"name":"protection"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"anonymous","","Opens an anonymous memory map.",2,{"inputs":[{"name":"mmap"},{"name":"usize"},{"name":"protection"}],"output":{"name":"result"}}],[11,"anonymous_with_options","","Opens an anonymous memory map with the provided options.",2,{"inputs":[{"name":"mmap"},{"name":"usize"},{"name":"protection"},{"name":"mmapoptions"}],"output":{"name":"result"}}],[11,"flush","","Flushes outstanding memory map modifications to disk.",2,{"inputs":[{"name":"mmap"}],"output":{"name":"result"}}],[11,"flush_async","","Asynchronously flushes outstanding memory map modifications to disk.",2,{"inputs":[{"name":"mmap"}],"output":{"name":"result"}}],[11,"flush_range","","Flushes outstanding memory map modifications in the range to disk.",2,{"inputs":[{"name":"mmap"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"flush_async_range","","Asynchronously flushes outstanding memory map modifications in the range to disk.",2,{"inputs":[{"name":"mmap"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"len","","Returns the length of the memory map.",2,{"inputs":[{"name":"mmap"}],"output":{"name":"usize"}}],[11,"ptr","","Returns a pointer to the mapped memory.",2,null],[11,"mut_ptr","","Returns a pointer to the mapped memory.",2,null],[11,"as_slice","","Returns the memory mapped file as an immutable slice.",2,null],[11,"as_mut_slice","","Returns the memory mapped file as a mutable slice.",2,null],[11,"into_view","","Creates a splittable mmap view from the mmap.",2,{"inputs":[{"name":"mmap"}],"output":{"name":"mmapview"}}],[11,"into_view_sync","","Creates a thread-safe splittable mmap view from the mmap.",2,{"inputs":[{"name":"mmap"}],"output":{"name":"mmapviewsync"}}],[11,"split_at","","Split the view into disjoint pieces at the specified offset.",3,{"inputs":[{"name":"mmapview"},{"name":"usize"}],"output":{"name":"result"}}],[11,"restrict","","Restricts the range of the view to the provided offset and length.",3,{"inputs":[{"name":"mmapview"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"flush","","Flushes outstanding view modifications to disk.",3,{"inputs":[{"name":"mmapview"}],"output":{"name":"result"}}],[11,"flush_async","","Asynchronously flushes outstanding memory map view modifications to disk.",3,{"inputs":[{"name":"mmapview"}],"output":{"name":"result"}}],[11,"len","","Returns the length of the memory map view.",3,{"inputs":[{"name":"mmapview"}],"output":{"name":"usize"}}],[11,"ptr","","Returns a pointer to the mapped mapped.",3,null],[11,"mut_ptr","","Returns a pointer to the mapped memory.",3,null],[11,"as_slice","","Returns the memory mapped file as an immutable slice.",3,null],[11,"as_mut_slice","","Returns the memory mapped file as a mutable slice.",3,null],[11,"split_at","","Split the view into disjoint pieces at the specified offset.",4,{"inputs":[{"name":"mmapviewsync"},{"name":"usize"}],"output":{"name":"result"}}],[11,"restrict","","Restricts the range of this view to the provided offset and length.",4,{"inputs":[{"name":"mmapviewsync"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"flush","","Flushes outstanding view modifications to disk.",4,{"inputs":[{"name":"mmapviewsync"}],"output":{"name":"result"}}],[11,"flush_async","","Asynchronously flushes outstanding memory map view modifications to disk.",4,{"inputs":[{"name":"mmapviewsync"}],"output":{"name":"result"}}],[11,"len","","Returns the length of the memory map view.",4,{"inputs":[{"name":"mmapviewsync"}],"output":{"name":"usize"}}],[11,"ptr","","Returns a pointer to the mapped mapped.",4,null],[11,"mut_ptr","","Returns a pointer to the mapped memory.",4,null],[11,"as_slice","","Returns the memory mapped file as an immutable slice.",4,null],[11,"as_mut_slice","","Returns the memory mapped file as a mutable slice.",4,null]],"paths":[[3,"MmapOptions"],[4,"Protection"],[3,"Mmap"],[3,"MmapView"],[3,"MmapViewSync"]]};
searchIndex['clock_ticks'] = {"items":[[0,"","clock_ticks","",null,null],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}]],"paths":[]};
searchIndex['time'] = {"items":[[0,"","time","Simple time handling.",null,null],[3,"Duration","","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"neg","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",0,{"inputs":[{"name":"timespec"},{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",5,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",5,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",5,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",6,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",6,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"fmt","","",6,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",6,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",6,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex['libc'] = {"items":[[0,"","libc","Crate docs",null,null],[3,"utimbuf","","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",9,null],[12,"dli_fbase","","",9,null],[12,"dli_sname","","",9,null],[12,"dli_saddr","","",9,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",10,null],[12,"sa_data","","",10,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",11,null],[12,"sin_port","","",11,null],[12,"sin_addr","","",11,null],[12,"sin_zero","","",11,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",12,null],[12,"sin6_port","","",12,null],[12,"sin6_flowinfo","","",12,null],[12,"sin6_addr","","",12,null],[12,"sin6_scope_id","","",12,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",13,null],[12,"sun_path","","",13,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",14,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",15,null],[12,"ai_family","","",15,null],[12,"ai_socktype","","",15,null],[12,"ai_protocol","","",15,null],[12,"ai_addrlen","","",15,null],[12,"ai_addr","","",15,null],[12,"ai_canonname","","",15,null],[12,"ai_next","","",15,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",16,null],[12,"sll_protocol","","",16,null],[12,"sll_ifindex","","",16,null],[12,"sll_hatype","","",16,null],[12,"sll_pkttype","","",16,null],[12,"sll_halen","","",16,null],[12,"sll_addr","","",16,null],[3,"fd_set","","",null,null],[3,"dirent","","",null,null],[12,"d_ino","","",17,null],[12,"d_off","","",17,null],[12,"d_reclen","","",17,null],[12,"d_type","","",17,null],[12,"d_name","","",17,null],[3,"dirent64","","",null,null],[12,"d_ino","","",18,null],[12,"d_off","","",18,null],[12,"d_reclen","","",18,null],[12,"d_type","","",18,null],[12,"d_name","","",18,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",19,null],[12,"rlim_max","","",19,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",20,null],[12,"gl_pathv","","",20,null],[12,"gl_offs","","",20,null],[12,"gl_flags","","",20,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",21,null],[12,"ifa_name","","",21,null],[12,"ifa_flags","","",21,null],[12,"ifa_addr","","",21,null],[12,"ifa_netmask","","",21,null],[12,"ifa_ifu","","",21,null],[12,"ifa_data","","",21,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",22,null],[12,"pw_passwd","","",22,null],[12,"pw_uid","","",22,null],[12,"pw_gid","","",22,null],[12,"pw_gecos","","",22,null],[12,"pw_dir","","",22,null],[12,"pw_shell","","",22,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",23,null],[12,"gl_pathv","","",23,null],[12,"gl_offs","","",23,null],[12,"gl_flags","","",23,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",24,null],[12,"sa_mask","","",24,null],[12,"sa_flags","","",24,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",25,null],[12,"ss_flags","","",25,null],[12,"ss_size","","",25,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",26,null],[12,"si_errno","","",26,null],[12,"si_code","","",26,null],[12,"_pad","","",26,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",27,null],[12,"st_ino","","",27,null],[12,"st_nlink","","",27,null],[12,"st_mode","","",27,null],[12,"st_uid","","",27,null],[12,"st_gid","","",27,null],[12,"st_rdev","","",27,null],[12,"st_size","","",27,null],[12,"st_blksize","","",27,null],[12,"st_blocks","","",27,null],[12,"st_atime","","",27,null],[12,"st_atime_nsec","","",27,null],[12,"st_mtime","","",27,null],[12,"st_mtime_nsec","","",27,null],[12,"st_ctime","","",27,null],[12,"st_ctime_nsec","","",27,null],[3,"stat64","","",null,null],[12,"st_dev","","",28,null],[12,"st_ino","","",28,null],[12,"st_nlink","","",28,null],[12,"st_mode","","",28,null],[12,"st_uid","","",28,null],[12,"st_gid","","",28,null],[12,"st_rdev","","",28,null],[12,"st_size","","",28,null],[12,"st_blksize","","",28,null],[12,"st_blocks","","",28,null],[12,"st_atime","","",28,null],[12,"st_atime_nsec","","",28,null],[12,"st_mtime","","",28,null],[12,"st_mtime_nsec","","",28,null],[12,"st_ctime","","",28,null],[12,"st_ctime_nsec","","",28,null],[3,"pthread_attr_t","","",null,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"putenv","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"usleep","","",null,null],[5,"recvfrom","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"mkfifo","","",null,null],[5,"getpwuid_r","","",null,null],[5,"posix_memalign","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"select","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"shm_open","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fstat64","","",null,null],[5,"stat64","","",null,null],[5,"open64","","",null,null],[5,"creat64","","",null,null],[5,"lseek64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"mmap64","","",null,null],[5,"lstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"readdir64_r","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"getnameinfo","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",29,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",29,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",29,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",29,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",29,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",29,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",29,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",29,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",29,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",29,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",29,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",29,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",29,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",29,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",29,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",29,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",29,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",29,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",29,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",29,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",29,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",29,null],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",29,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",29,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",30,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::flt2dec::decoder","",31,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",32,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",33,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",33,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",33,null],[11,"clone","","",34,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",34,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",34,null],[11,"fmt","","",35,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",36,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",36,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",37,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",38,null],[11,"eq","","",39,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",40,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",40,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",41,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",42,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",42,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",42,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",42,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",42,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",42,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",42,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",42,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",42,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",42,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",42,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",42,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",42,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",42,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",42,null],[11,"eq","","",42,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",42,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",42,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",42,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",42,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",43,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",43,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",43,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",43,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",43,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",43,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",43,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",43,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",43,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",43,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",43,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",43,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",43,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",43,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",43,null],[11,"eq","","",43,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",43,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",43,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",43,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",44,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",44,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",44,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",44,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",45,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",46,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",46,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",47,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",48,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",48,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",48,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",48,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",48,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",48,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",48,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",48,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",49,null],[11,"get","","Dereferences the content.",49,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",49,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",50,null],[11,"clone","","",50,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",51,null],[11,"eq","","",51,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",51,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",51,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",51,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",52,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",52,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",53,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",54,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",55,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",56,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",56,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",56,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",57,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",57,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",57,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",57,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",57,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",57,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",57,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",58,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",59,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",60,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",61,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",62,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",63,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",59,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",59,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",59,null],[11,"swap","","Stores a value into the bool, returning the old value.",59,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",59,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",59,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",59,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",59,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",59,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",60,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",60,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",60,null],[11,"swap","","Stores a value into the isize, returning the old value.",60,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",60,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",60,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",60,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",60,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",60,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",60,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",61,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",61,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",61,null],[11,"swap","","Stores a value into the usize, returning the old value.",61,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",61,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",61,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",61,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",61,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",61,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",61,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",62,null],[11,"load","","Loads a value from the pointer.",62,null],[11,"store","","Stores a value into the pointer.",62,null],[11,"swap","","Stores a value into the pointer, returning the old value.",62,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",62,null],[11,"fmt","","",61,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",64,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",64,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",64,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",64,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",64,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",64,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",64,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",66,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",66,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",66,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",66,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",66,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",66,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",66,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",66,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",66,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",67,null],[11,"clone","","",67,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",68,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",68,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",68,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",68,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",69,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",69,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",70,null],[11,"deref","","",69,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",69,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",71,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",71,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",71,null],[11,"clone","core::char","",72,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",73,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",72,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"clone","","",74,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",75,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",74,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"clone","core::iter","",76,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",76,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",77,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",77,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next_back","","",77,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",78,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",78,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"clone","","",79,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",80,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",79,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",79,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",79,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",79,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",81,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",81,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"next_back","","",81,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",82,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",82,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next_back","","",82,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",83,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",83,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",84,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",84,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",85,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",85,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"nth","","",85,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",85,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",85,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",86,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",86,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",86,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",86,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",86,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",86,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",86,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",87,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"clone","","",88,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",88,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"clone","","",89,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",89,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",89,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",89,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",89,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"clone","","",90,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",90,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",90,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"clone","","",91,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",91,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"clone","","",92,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",92,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next_back","","",92,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",93,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",93,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",93,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",93,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",93,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",93,null],[11,"next_back","","",93,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",94,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",94,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next_back","","",94,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",95,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",54,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",53,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",95,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"clone","","",96,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",96,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",95,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next","core::ops","",53,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",54,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",97,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",97,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",98,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",98,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",98,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",98,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",99,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",99,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next_back","","",99,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",99,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",29,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",29,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",29,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",29,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",100,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",100,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",101,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",102,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",103,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",29,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",104,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",105,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",106,null],[11,"fmt","","",106,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",106,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",106,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",106,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",106,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",106,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",106,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",106,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",106,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",106,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",106,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",106,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",106,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",106,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",106,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",106,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",106,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",106,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",106,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",106,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",106,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",107,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next_back","","",107,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",107,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",108,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next_back","","",108,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",109,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"next_back","","",109,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",106,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::simd","",110,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",111,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",112,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",113,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",114,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",115,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",116,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",117,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",118,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",119,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"add","","",114,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"add","","",115,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"add","","",116,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"add","","",117,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"add","","",110,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"add","","",111,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"add","","",112,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"add","","",113,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"add","","",118,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"add","","",119,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",114,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"sub","","",115,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"sub","","",116,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"sub","","",117,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"sub","","",110,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"sub","","",111,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"sub","","",112,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"sub","","",113,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"sub","","",118,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",119,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",114,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"mul","","",115,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"mul","","",116,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"mul","","",117,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"mul","","",110,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"mul","","",111,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"mul","","",112,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"mul","","",113,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"mul","","",118,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",119,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",118,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",119,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"shl","","",114,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shl","","",115,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shl","","",116,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shl","","",117,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shl","","",110,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shl","","",111,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shl","","",112,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shl","","",113,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"shr","","",114,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shr","","",115,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shr","","",116,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shr","","",117,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shr","","",110,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shr","","",111,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shr","","",112,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shr","","",113,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitand","","",114,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitand","","",115,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitand","","",116,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitand","","",117,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitand","","",110,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitand","","",111,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitand","","",112,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitand","","",113,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitor","","",114,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitor","","",115,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitor","","",116,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitor","","",117,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitor","","",110,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitor","","",111,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitor","","",112,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitor","","",113,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitxor","","",114,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitxor","","",115,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitxor","","",116,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitxor","","",117,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitxor","","",110,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitxor","","",111,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitxor","","",112,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitxor","","",113,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",120,null],[11,"next","","",120,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"count","","",120,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",120,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",120,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",120,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",120,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",121,null],[11,"next","","",121,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"count","","",121,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",121,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",121,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",121,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",122,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",122,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next_back","","",122,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",122,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",123,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",123,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"next_back","","",123,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",124,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next","","",125,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"next","","",126,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"next","","",127,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"next","","",128,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"clone","","",129,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",129,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"count","","",129,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",129,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",129,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",129,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",130,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",130,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"count","","",130,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",130,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",130,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",130,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",131,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"count","","",131,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",131,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",131,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",131,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",132,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",132,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",133,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",134,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",133,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",133,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",133,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",135,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",135,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",135,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",135,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",135,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",135,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",135,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",135,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",136,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",136,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",136,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",136,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",136,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",136,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",136,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",136,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",137,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",137,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",137,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",137,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",137,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",137,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",137,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",137,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",138,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",138,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",139,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",140,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",138,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",138,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",138,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",138,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",138,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",141,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",142,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",142,null],[11,"matching","","",142,null],[11,"use_early_reject","","",143,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",143,null],[11,"matching","","",143,null],[11,"eq","core::str","",144,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",144,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",145,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",145,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",145,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",146,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",146,null],[11,"next_back","","",146,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",146,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",147,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",147,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",147,null],[11,"next_back","","",147,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",147,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",148,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",148,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",148,null],[11,"count","","",148,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",148,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",148,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",148,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",148,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",149,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",150,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",150,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",151,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",151,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",150,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",151,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",152,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",152,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",153,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",153,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",152,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",153,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",154,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",155,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",155,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",156,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",156,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",157,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",158,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",158,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",159,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",159,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",158,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",159,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",160,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",161,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",161,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",162,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",162,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",161,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",162,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",163,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",163,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",163,null],[11,"next_back","","",163,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",164,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",165,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",165,null],[11,"call_mut","","",165,null],[11,"call_once","","",165,null],[11,"next","","",164,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",164,null],[11,"next_back","","",164,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",166,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",167,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",167,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",167,null],[11,"finish","","",167,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",167,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",167,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"eq","core::fmt::num","",168,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",168,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",169,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",169,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",170,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",170,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",171,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",172,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",172,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",173,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",173,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",174,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",175,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",176,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",176,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",177,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",177,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",177,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",178,null],[11,"entry","","Adds a new entry to the set output.",179,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",179,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",179,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",180,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",180,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",180,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",181,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",181,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",181,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",182,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",183,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",184,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",184,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",185,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",186,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",187,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",187,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",188,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",189,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",190,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",190,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",190,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",191,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",191,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",191,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",191,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",191,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",191,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",191,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",191,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",191,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",191,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",191,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",191,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",191,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",191,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",191,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",191,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",191,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",191,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",191,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",191,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",191,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",187,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",51,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",64,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",192,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",192,null],[11,"clone","libc","",23,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",27,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",28,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",193,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",194,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",24,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",25,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",26,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",17,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",18,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",19,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",20,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",21,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",195,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",196,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",197,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",198,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",22,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",10,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",11,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",12,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",15,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",199,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"rlim_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"WNOHANG","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"Dl_info"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"glob64_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"stat"],[3,"stat64"],[4,"Option"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fd_set"]]};
searchIndex['fs2'] = {"items":[[0,"","fs2","",null,null],[5,"lock_contended_error","","Returns the error that a call to a try lock method on a contended file will return.",null,{"inputs":[],"output":{"name":"error"}}],[8,"FileExt","","Extension trait for `File` providing duplication and locking methods.",null,null],[10,"duplicate","","Returns a duplicate instance of the file.",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[10,"lock_shared","","Locks the file for shared usage, blocking if the file is currently locked exclusively.",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[10,"lock_exclusive","","Locks the file for exclusive usage, blocking if the file is currently locked.",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[10,"try_lock_shared","","Locks the file for shared usage, or returns a an error if the file is currently locked\n(see `lock_contended_error`).",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[10,"try_lock_exclusive","","Locks the file for shared usage, or returns a an error if the file is currently locked\n(see `lock_contended_error`).",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[10,"unlock","","Unlocks the file.",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[11,"duplicate","std::fs","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"lock_shared","","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"lock_exclusive","","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"try_lock_shared","","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"try_lock_exclusive","","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"unlock","","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}]],"paths":[[8,"FileExt"],[3,"File"]]};
searchIndex['kernel32'] = {"items":[],"paths":[]};
searchIndex['bytes'] = {"items":[[0,"","bytes","",null,null],[3,"ByteBuf","","A `Buf` backed by a contiguous region of memory.",null,null],[3,"MutByteBuf","","",null,null],[3,"RingBuf","","Buf backed by a continous chunk of memory. Maintains a read cursor and a\nwrite cursor. When reads and writes reach the end of the allocated buffer,\nwraps around to the start.",null,null],[3,"ROByteBuf","","Same as `ByteBuf` but cannot be flipped to a `MutByteBuf`.",null,null],[3,"SliceBuf","","",null,null],[3,"MutSliceBuf","","",null,null],[3,"Take","","",null,null],[3,"Bytes","","A specialized `ByteStr` box.",null,null],[3,"Rope","","An immutable sequence of bytes formed by concatenation of other `ByteStr`\nvalues, without copying the data in the pieces. The concatenation is\nrepresented as a tree whose leaf nodes are each a `Bytes` value.",null,null],[3,"RopeBuf","","",null,null],[3,"SeqByteStr","","",null,null],[3,"SmallByteStr","","",null,null],[3,"SmallByteStrBuf","","",null,null],[4,"BufError","","",null,null],[13,"Underflow","","",0,null],[13,"Overflow","","",0,null],[0,"alloc","","",null,null],[3,"Heap","bytes::alloc","",null,null],[3,"MemRef","","",null,null],[3,"Mem","","Memory allocated by an Allocator must be prefixed with Mem",null,null],[5,"heap","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"memref"}}],[11,"allocate","","",1,{"inputs":[{"name":"heap"},{"name":"usize"}],"output":{"name":"memref"}}],[11,"deallocate","","",1,null],[11,"allocate","","",1,{"inputs":[{"name":"heap"},{"name":"usize"}],"output":{"name":"memref"}}],[11,"deallocate","","",1,null],[8,"Allocator","","Allocates memory to be used by Bufs or Bytes. Allows allocating memory\nusing alternate stratgies than the default Rust heap allocator. Also does\nnot require that allocations are continuous in memory.",null,null],[10,"allocate","","Allocate memory. May or may not be contiguous.",2,{"inputs":[{"name":"allocator"},{"name":"usize"}],"output":{"name":"memref"}}],[10,"deallocate","","Deallocate a chunk of memory",2,null],[11,"new","","",3,null],[11,"none","","",3,{"inputs":[{"name":"memref"}],"output":{"name":"memref"}}],[11,"is_none","","",3,{"inputs":[{"name":"memref"}],"output":{"name":"bool"}}],[11,"ptr","","",3,null],[11,"bytes","","",3,null],[11,"bytes_mut","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"memref"}],"output":{"name":"memref"}}],[11,"drop","","",3,{"inputs":[{"name":"memref"}],"output":null}],[11,"new","","",4,null],[11,"from_slice","bytes","Create a new `ByteBuf` by copying the contents of the given slice.",5,null],[11,"mut_with_capacity","","",5,{"inputs":[{"name":"bytebuf"},{"name":"usize"}],"output":{"name":"mutbytebuf"}}],[11,"none","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytebuf"}}],[11,"from_mem_ref","","",5,{"inputs":[{"name":"bytebuf"},{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bytebuf"}}],[11,"capacity","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"usize"}}],[11,"flip","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"mutbytebuf"}}],[11,"resume","","Flips the buffer back to mutable, resetting the write position\nto the byte after the previous write.",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"mutbytebuf"}}],[11,"read_slice","","",5,null],[11,"to_seq_byte_str","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"seqbytestr"}}],[11,"to_bytes","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytes"}}],[11,"mark","","Marks the current read location.",5,{"inputs":[{"name":"bytebuf"}],"output":null}],[11,"reset","","Resets the read position to the previously marked position.",5,{"inputs":[{"name":"bytebuf"}],"output":null}],[11,"remaining","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",5,null],[11,"advance","","",5,{"inputs":[{"name":"bytebuf"},{"name":"usize"}],"output":null}],[11,"read_slice","","",5,null],[11,"from_mem_ref","","",6,{"inputs":[{"name":"robytebuf"},{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"robytebuf"}}],[11,"to_seq_byte_str","","",6,{"inputs":[{"name":"robytebuf"}],"output":{"name":"seqbytestr"}}],[11,"to_bytes","","",6,{"inputs":[{"name":"robytebuf"}],"output":{"name":"bytes"}}],[11,"mark","","Marks the current read location.",6,{"inputs":[{"name":"robytebuf"}],"output":null}],[11,"reset","","Resets the read position to the previously marked position.",6,{"inputs":[{"name":"robytebuf"}],"output":null}],[11,"remaining","","",6,{"inputs":[{"name":"robytebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",6,null],[11,"advance","","",6,{"inputs":[{"name":"robytebuf"},{"name":"usize"}],"output":null}],[11,"read_slice","","",6,null],[11,"capacity","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"usize"}}],[11,"flip","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"bytebuf"}}],[11,"clear","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":null}],[11,"write_slice","","",7,null],[11,"bytes","","",7,null],[11,"remaining","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"usize"}}],[11,"advance","","",7,{"inputs":[{"name":"mutbytebuf"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",7,null],[11,"new","","Allocates a new `RingBuf` with the specified capacity.",8,{"inputs":[{"name":"ringbuf"},{"name":"usize"}],"output":{"name":"ringbuf"}}],[11,"is_full","","Returns `true` if the buf cannot accept any further writes.",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns `true` if the buf cannot accept any further reads.",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"bool"}}],[11,"capacity","","Returns the number of bytes that the buf can hold.",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"mark","","Marks the current read location.",8,{"inputs":[{"name":"ringbuf"}],"output":null}],[11,"reset","","Resets the read position to the previously marked position.",8,{"inputs":[{"name":"ringbuf"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"ringbuf"}}],[11,"fmt","","",8,{"inputs":[{"name":"ringbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"remaining","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"bytes","","",8,null],[11,"advance","","",8,{"inputs":[{"name":"ringbuf"},{"name":"usize"}],"output":null}],[11,"remaining","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"advance","","",8,{"inputs":[{"name":"ringbuf"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",8,null],[11,"read","","",8,null],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"result"}}],[11,"wrap","","",9,null],[11,"remaining","","",9,{"inputs":[{"name":"slicebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",9,null],[11,"advance","","",9,{"inputs":[{"name":"slicebuf"},{"name":"usize"}],"output":null}],[11,"wrap","","",10,null],[11,"remaining","","",10,{"inputs":[{"name":"mutslicebuf"}],"output":{"name":"usize"}}],[11,"advance","","",10,{"inputs":[{"name":"mutslicebuf"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",10,null],[11,"fmt","","",11,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",11,{"inputs":[{"name":"take"},{"name":"t"},{"name":"usize"}],"output":{"name":"take"}}],[11,"into_inner","","",11,{"inputs":[{"name":"take"}],"output":{"name":"t"}}],[11,"get_ref","","",11,{"inputs":[{"name":"take"}],"output":{"name":"t"}}],[11,"get_mut","","",11,{"inputs":[{"name":"take"}],"output":{"name":"t"}}],[11,"limit","","",11,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"set_limit","","",11,{"inputs":[{"name":"take"},{"name":"usize"}],"output":null}],[11,"remaining","","",11,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"bytes","","",11,null],[11,"advance","","",11,{"inputs":[{"name":"take"},{"name":"usize"}],"output":null}],[11,"read","","",11,null],[11,"remaining","","",11,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"mut_bytes","","",11,null],[11,"advance","","",11,{"inputs":[{"name":"take"},{"name":"usize"}],"output":null}],[11,"remaining","alloc::boxed","",12,{"inputs":[{"name":"box"}],"output":{"name":"usize"}}],[11,"bytes","","",12,null],[11,"advance","","",12,{"inputs":[{"name":"box"},{"name":"usize"}],"output":null}],[11,"read_slice","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"remaining","std::io::cursor","",13,{"inputs":[{"name":"cursor"}],"output":{"name":"usize"}}],[11,"bytes","","",13,null],[11,"advance","","",13,{"inputs":[{"name":"cursor"},{"name":"usize"}],"output":null}],[11,"remaining","collections::vec","",14,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"advance","","",14,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",14,null],[11,"remaining","std::io::cursor","",13,{"inputs":[{"name":"cursor"}],"output":{"name":"usize"}}],[11,"bytes","","",13,null],[11,"advance","","",13,{"inputs":[{"name":"cursor"},{"name":"usize"}],"output":null}],[11,"read","bytes","",5,null],[11,"read","","",6,null],[11,"read","","",15,null],[11,"read","alloc::boxed","",12,null],[11,"write","bytes","",7,null],[11,"flush","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"result"}}],[11,"from_slice","","",16,null],[11,"of","","",16,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"empty","","",16,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"downcast_ref","","If the underlying `ByteStr` is of type `B`, returns a reference to it\notherwise None.",16,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"try_unwrap","","If the underlying `ByteStr` is of type `B`, returns the unwraped value,\notherwise, returns the original `Bytes` as `Err`.",16,{"inputs":[{"name":"bytes"}],"output":{"name":"result"}}],[11,"buf","","",16,{"inputs":[{"name":"bytes"}],"output":{"name":"box"}}],[11,"concat","","",16,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",16,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"slice","","",16,{"inputs":[{"name":"bytes"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_at","","",16,null],[11,"to_bytes","","",16,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"index","","",16,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"fmt","","",16,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"drop","","",16,{"inputs":[{"name":"bytes"}],"output":null}],[11,"from_slice","","",17,null],[11,"of","","Returns a Rope consisting of the supplied Bytes as a single segment.",17,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"rope"}}],[11,"len","","",17,{"inputs":[{"name":"rope"}],"output":{"name":"usize"}}],[11,"is_empty","","",17,{"inputs":[{"name":"rope"}],"output":{"name":"bool"}}],[11,"buf","","",17,{"inputs":[{"name":"rope"}],"output":{"name":"ropebuf"}}],[11,"concat","","",17,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",17,{"inputs":[{"name":"rope"}],"output":{"name":"usize"}}],[11,"slice","","",17,{"inputs":[{"name":"rope"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",17,{"inputs":[{"name":"rope"}],"output":{"name":"bytes"}}],[11,"index","","",17,{"inputs":[{"name":"rope"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",17,{"inputs":[{"name":"rope"}],"output":{"name":"rope"}}],[11,"remaining","","",15,{"inputs":[{"name":"ropebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",15,null],[11,"advance","","",15,{"inputs":[{"name":"ropebuf"},{"name":"usize"}],"output":null}],[11,"from_slice","","Create a new `SeqByteStr` from a byte slice.",18,null],[11,"from_mem_ref","","Creates a new `SeqByteStr` from a `MemRef`, an offset, and a length.",18,{"inputs":[{"name":"seqbytestr"},{"name":"memref"},{"name":"u32"},{"name":"u32"}],"output":{"name":"seqbytestr"}}],[11,"buf","","",18,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"robytebuf"}}],[11,"concat","","",18,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",18,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"usize"}}],[11,"slice","","",18,{"inputs":[{"name":"seqbytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",18,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"bytes"}}],[11,"index","","",18,{"inputs":[{"name":"seqbytestr"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",18,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"seqbytestr"}}],[11,"clone","","",19,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestr"}}],[11,"zero","","",19,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestr"}}],[11,"from_slice","","",19,null],[11,"as_slice","","",19,null],[11,"buf","","",19,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestrbuf"}}],[11,"concat","","",19,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",19,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"usize"}}],[11,"slice","","",19,{"inputs":[{"name":"smallbytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",19,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"bytes"}}],[11,"index","","",19,{"inputs":[{"name":"smallbytestr"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",20,{"inputs":[{"name":"smallbytestrbuf"}],"output":{"name":"smallbytestrbuf"}}],[11,"remaining","","",20,{"inputs":[{"name":"smallbytestrbuf"}],"output":{"name":"usize"}}],[11,"bytes","","",20,null],[11,"advance","","",20,{"inputs":[{"name":"smallbytestrbuf"},{"name":"usize"}],"output":null}],[11,"eq","","",18,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bool"}}],[0,"traits","","All traits are re-exported here to allow glob imports.",null,null],[8,"Buf","bytes::traits","A trait for values that provide sequential read access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",21,{"inputs":[{"name":"buf"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current Buf position and of length\nbetween 0 and `Buf::remaining()`.",21,null],[10,"advance","","Advance the internal cursor of the Buf",21,{"inputs":[{"name":"buf"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true if there are any more bytes to consume",21,{"inputs":[{"name":"buf"}],"output":{"name":"bool"}}],[11,"read_slice","","Read bytes from the `Buf` into the given slice and advance the cursor by\nthe number of bytes read.\nReturns the number of bytes read.",21,null],[11,"read_byte","","Read a single byte from the `Buf`",21,{"inputs":[{"name":"buf"}],"output":{"name":"option"}}],[8,"BufExt","","An extension trait providing extra functions applicable to all `Buf` values.",null,null],[10,"read","","Read bytes from this Buf into the given sink and advance the cursor by\nthe number of bytes read.",22,{"inputs":[{"name":"bufext"},{"name":"s"}],"output":{"name":"result"}}],[8,"MutBuf","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be written to the MutBuf",23,{"inputs":[{"name":"mutbuf"}],"output":{"name":"usize"}}],[10,"advance","","Advance the internal cursor of the MutBuf",23,{"inputs":[{"name":"mutbuf"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true iff there is any more space for bytes to be written",23,{"inputs":[{"name":"mutbuf"}],"output":{"name":"bool"}}],[10,"mut_bytes","","Returns a mutable slice starting at the current MutBuf position and of\nlength between 0 and `MutBuf::remaining()`.",23,null],[11,"write_slice","","Write bytes from the given slice into the `MutBuf` and advance the\ncursor by the number of bytes written.\nReturns the number of bytes written.",23,null],[11,"write_byte","","Write a single byte to the `MuBuf`",23,{"inputs":[{"name":"mutbuf"},{"name":"u8"}],"output":{"name":"bool"}}],[8,"MutBufExt","","An extension trait providing extra functions applicable to all `MutBuf` values.",null,null],[10,"write","","Write bytes from the given source into the current `MutBuf` and advance\nthe cursor by the number of bytes written.",24,{"inputs":[{"name":"mutbufext"},{"name":"s"}],"output":{"name":"result"}}],[8,"ByteStr","","An immutable sequence of bytes. Operations will not mutate the original\nvalue. Since only immutable access is permitted, operations do not require\ncopying (though, sometimes copying will happen as an optimization).",null,null],[16,"Buf","","",25,null],[10,"buf","","Returns a read-only `Buf` for accessing the byte contents of the\n`ByteStr`.",25,{"inputs":[{"name":"bytestr"}],"output":{"name":"buf"}}],[10,"concat","","Returns a new `Bytes` value representing the concatenation of `self`\nwith the given `Bytes`.",25,{"inputs":[{"name":"bytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[10,"len","","Returns the number of bytes in the ByteStr",25,{"inputs":[{"name":"bytestr"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the length of the `ByteStr` is 0",25,{"inputs":[{"name":"bytestr"}],"output":{"name":"bool"}}],[10,"slice","","Returns a new ByteStr value containing the byte range between `begin`\n(inclusive) and `end` (exclusive)",25,{"inputs":[{"name":"bytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_from","","Returns a new ByteStr value containing the byte range starting from\n`begin` (inclusive) to the end of the byte str.",25,{"inputs":[{"name":"bytestr"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_to","","Returns a new ByteStr value containing the byte range from the start up\nto `end` (exclusive).",25,{"inputs":[{"name":"bytestr"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_at","","Divides the value into two `Bytes` at the given index.",25,null],[8,"ToBytes","","",null,null],[10,"to_bytes","","Consumes the value and returns a `Bytes` instance containing\nidentical bytes",26,{"inputs":[{"name":"tobytes"}],"output":{"name":"bytes"}}],[8,"Buf","bytes","A trait for values that provide sequential read access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",21,{"inputs":[{"name":"buf"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current Buf position and of length\nbetween 0 and `Buf::remaining()`.",21,null],[10,"advance","","Advance the internal cursor of the Buf",21,{"inputs":[{"name":"buf"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true if there are any more bytes to consume",21,{"inputs":[{"name":"buf"}],"output":{"name":"bool"}}],[11,"read_slice","","Read bytes from the `Buf` into the given slice and advance the cursor by\nthe number of bytes read.\nReturns the number of bytes read.",21,null],[11,"read_byte","","Read a single byte from the `Buf`",21,{"inputs":[{"name":"buf"}],"output":{"name":"option"}}],[8,"BufExt","","An extension trait providing extra functions applicable to all `Buf` values.",null,null],[10,"read","","Read bytes from this Buf into the given sink and advance the cursor by\nthe number of bytes read.",22,{"inputs":[{"name":"bufext"},{"name":"s"}],"output":{"name":"result"}}],[8,"MutBuf","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be written to the MutBuf",23,{"inputs":[{"name":"mutbuf"}],"output":{"name":"usize"}}],[10,"advance","","Advance the internal cursor of the MutBuf",23,{"inputs":[{"name":"mutbuf"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true iff there is any more space for bytes to be written",23,{"inputs":[{"name":"mutbuf"}],"output":{"name":"bool"}}],[10,"mut_bytes","","Returns a mutable slice starting at the current MutBuf position and of\nlength between 0 and `MutBuf::remaining()`.",23,null],[11,"write_slice","","Write bytes from the given slice into the `MutBuf` and advance the\ncursor by the number of bytes written.\nReturns the number of bytes written.",23,null],[11,"write_byte","","Write a single byte to the `MuBuf`",23,{"inputs":[{"name":"mutbuf"},{"name":"u8"}],"output":{"name":"bool"}}],[8,"MutBufExt","","An extension trait providing extra functions applicable to all `MutBuf` values.",null,null],[10,"write","","Write bytes from the given source into the current `MutBuf` and advance\nthe cursor by the number of bytes written.",24,{"inputs":[{"name":"mutbufext"},{"name":"s"}],"output":{"name":"result"}}],[8,"Source","","A value that writes bytes from itself into a `MutBuf`.",null,null],[16,"Error","","",27,null],[10,"fill","","",27,{"inputs":[{"name":"source"},{"name":"b"}],"output":{"name":"result"}}],[8,"Sink","","A value that reads bytes from a Buf into itself",null,null],[16,"Error","","",28,null],[10,"sink","","",28,{"inputs":[{"name":"sink"},{"name":"b"}],"output":{"name":"result"}}],[8,"ByteStr","","An immutable sequence of bytes. Operations will not mutate the original\nvalue. Since only immutable access is permitted, operations do not require\ncopying (though, sometimes copying will happen as an optimization).",null,null],[16,"Buf","","",25,null],[10,"buf","","Returns a read-only `Buf` for accessing the byte contents of the\n`ByteStr`.",25,{"inputs":[{"name":"bytestr"}],"output":{"name":"buf"}}],[10,"concat","","Returns a new `Bytes` value representing the concatenation of `self`\nwith the given `Bytes`.",25,{"inputs":[{"name":"bytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[10,"len","","Returns the number of bytes in the ByteStr",25,{"inputs":[{"name":"bytestr"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the length of the `ByteStr` is 0",25,{"inputs":[{"name":"bytestr"}],"output":{"name":"bool"}}],[10,"slice","","Returns a new ByteStr value containing the byte range between `begin`\n(inclusive) and `end` (exclusive)",25,{"inputs":[{"name":"bytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_from","","Returns a new ByteStr value containing the byte range starting from\n`begin` (inclusive) to the end of the byte str.",25,{"inputs":[{"name":"bytestr"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_to","","Returns a new ByteStr value containing the byte range from the start up\nto `end` (exclusive).",25,{"inputs":[{"name":"bytestr"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_at","","Divides the value into two `Bytes` at the given index.",25,null],[8,"ToBytes","","",null,null],[10,"to_bytes","","Consumes the value and returns a `Bytes` instance containing\nidentical bytes",26,{"inputs":[{"name":"tobytes"}],"output":{"name":"bytes"}}],[11,"fmt","","",0,{"inputs":[{"name":"buferror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"buferror"}],"output":{"name":"buferror"}}],[11,"has_remaining","bytes::traits","Returns true if there are any more bytes to consume",21,{"inputs":[{"name":"buf"}],"output":{"name":"bool"}}],[11,"read_slice","","Read bytes from the `Buf` into the given slice and advance the cursor by\nthe number of bytes read.\nReturns the number of bytes read.",21,null],[11,"read_byte","","Read a single byte from the `Buf`",21,{"inputs":[{"name":"buf"}],"output":{"name":"option"}}],[11,"has_remaining","","Returns true iff there is any more space for bytes to be written",23,{"inputs":[{"name":"mutbuf"}],"output":{"name":"bool"}}],[11,"write_slice","","Write bytes from the given slice into the `MutBuf` and advance the\ncursor by the number of bytes written.\nReturns the number of bytes written.",23,null],[11,"write_byte","","Write a single byte to the `MuBuf`",23,{"inputs":[{"name":"mutbuf"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if the length of the `ByteStr` is 0",25,{"inputs":[{"name":"bytestr"}],"output":{"name":"bool"}}],[11,"slice_from","","Returns a new ByteStr value containing the byte range starting from\n`begin` (inclusive) to the end of the byte str.",25,{"inputs":[{"name":"bytestr"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_to","","Returns a new ByteStr value containing the byte range from the start up\nto `end` (exclusive).",25,{"inputs":[{"name":"bytestr"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_at","","Divides the value into two `Bytes` at the given index.",25,null]],"paths":[[4,"BufError"],[3,"Heap"],[8,"Allocator"],[3,"MemRef"],[3,"Mem"],[3,"ByteBuf"],[3,"ROByteBuf"],[3,"MutByteBuf"],[3,"RingBuf"],[3,"SliceBuf"],[3,"MutSliceBuf"],[3,"Take"],[3,"Box"],[3,"Cursor"],[3,"Vec"],[3,"RopeBuf"],[3,"Bytes"],[3,"Rope"],[3,"SeqByteStr"],[3,"SmallByteStr"],[3,"SmallByteStrBuf"],[8,"Buf"],[8,"BufExt"],[8,"MutBuf"],[8,"MutBufExt"],[8,"ByteStr"],[8,"ToBytes"],[8,"Source"],[8,"Sink"]]};
searchIndex['bit_vec'] = {"items":[[0,"","bit_vec","Collections implemented with bit vectors.",null,null],[3,"BitVec","","The bitvector type.",null,null],[3,"Iter","","An iterator for `BitVec`.",null,null],[3,"IntoIter","","",null,null],[3,"Blocks","","An iterator over the blocks of a `BitVec`.",null,null],[8,"BitBlock","","Abstracts over a pile of bits (basically unsigned primitives)",null,null],[10,"bits","","How many bits it has",0,{"inputs":[{"name":"bitblock"}],"output":{"name":"usize"}}],[11,"bytes","","How many bytes it has",0,{"inputs":[{"name":"bitblock"}],"output":{"name":"usize"}}],[10,"from_byte","","Convert a byte into this type (lowest-order bits set)",0,{"inputs":[{"name":"bitblock"},{"name":"u8"}],"output":{"name":"self"}}],[10,"count_ones","","Count the number of 1's in the bitwise repr",0,{"inputs":[{"name":"bitblock"}],"output":{"name":"usize"}}],[10,"zero","","Get `0`",0,{"inputs":[{"name":"bitblock"}],"output":{"name":"self"}}],[10,"one","","Get `1`",0,{"inputs":[{"name":"bitblock"}],"output":{"name":"self"}}],[11,"index","","",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"new","","Creates an empty `BitVec`.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"self"}}],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element\nto `bit`.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0.",1,null],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index\nis `f(index)`.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"blocks","","Iterator over the underlying blocks of data",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"blocks"}}],[11,"storage","","Exposes the raw block storage of this BitVec",1,null],[11,"storage_mut","","Exposes the raw block storage of this BitVec",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"vec"}}],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set","","Sets the value of a bit at an index `i`.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"set_all","","Sets all bits to 1.",1,{"inputs":[{"name":"bitvec"}],"output":null}],[11,"negate","","Flips all bits.",1,{"inputs":[{"name":"bitvec"}],"output":null}],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"difference","","Calculates the difference between two bitvectors.",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"all","","Returns `true` if all bits are 1.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the elements of the vector in order.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"iter"}}],[11,"none","","Returns `true` if all bits are 0.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"any","","Returns `true` if any bit is 1.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`BitVec` becomes the high-order bit of the first byte. If the\nsize of the `BitVec` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"vec"}}],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s.\nBoth the `BitVec` and slice must have the same length.",1,null],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given\n`BitVec`. The collection may reserve more space to avoid frequent reallocations.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the\ngiven `BitVec`. Does nothing if the capacity is already sufficient.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":null}],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"usize"}}],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"option"}}],[11,"push","","Pushes a `bool` onto the end.",1,{"inputs":[{"name":"bitvec"},{"name":"bool"}],"output":null}],[11,"len","","Returns the total number of bits in this vector",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"usize"}}],[11,"set_len","","Sets the number of bits that this BitVec considers initialized.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":null}],[11,"is_empty","","Returns true if there are no bits in this vector",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this vector.",1,{"inputs":[{"name":"bitvec"}],"output":null}],[11,"default","","",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"self"}}],[11,"from_iter","","",1,{"inputs":[{"name":"bitvec"},{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",1,{"inputs":[{"name":"bitvec"},{"name":"i"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"self"}}],[11,"clone_from","","",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"bitvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,{"inputs":[{"name":"bitvec"},{"name":"h"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"intoiter"}}],[11,"clone","","",4,{"inputs":[{"name":"blocks"}],"output":{"name":"blocks"}}],[11,"next","","",4,{"inputs":[{"name":"blocks"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"blocks"}],"output":{"name":"option"}}]],"paths":[[8,"BitBlock"],[3,"BitVec"],[3,"Iter"],[3,"IntoIter"],[3,"Blocks"]]};
searchIndex['log'] = {"items":[[0,"","log","A lightweight logging facade.",null,null],[3,"LogRecord","","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"loglevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"new","alloc::boxed","Allocates memory on the heap and then moves `x` into it.",8,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",8,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",8,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",10,null],[11,"make_place","","",10,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",10,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",8,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",9,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",10,null],[11,"default","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",8,null],[11,"clone","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",8,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",8,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",8,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"fmt","alloc::arc","",11,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Arc<T>`.",12,{"inputs":[{"name":"arc"},{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"clone","","Makes a clone of the `Arc<T>`.",12,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"deref","","",12,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"make_unique","","",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"t"}}],[11,"make_mut","","Make a mutable reference into the given `Arc<T>` by cloning the inner\ndata if the `Arc<T>` doesn't have one strong reference and no weak\nreferences.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc<T>` has\none strong reference and no weak references.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Arc<T>`.",12,null],[11,"upgrade","","Upgrades a weak reference to a strong reference.",11,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"clone","","Makes a clone of the `Weak<T>`.",11,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak<T>`.",11,null],[11,"eq","","Equality for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"fmt","","",12,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"hash","","",12,null],[11,"borrow","","",12,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"as_ref","","",12,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",13,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_unique","","",13,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",13,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",13,null],[11,"clone","","Makes a clone of the `Rc<T>`.",13,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",13,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",14,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",14,null],[11,"clone","","Makes a clone of the `Weak<T>`.",14,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",14,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",13,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",13,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"new","alloc::raw_vec","Creates the biggest possible RawVec without allocating. If T has positive\nsize, then this makes a RawVec with capacity 0. If T has 0 size, then it\nit makes a RawVec with capacity `usize::MAX`. Useful for implementing\ndelayed allocation.",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"rawvec"}}],[11,"with_capacity","","Creates a RawVec with exactly the capacity and alignment requirements\nfor a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0\nor T is zero-sized. Note that if `T` is zero-sized this means you will *not*\nget a RawVec with the requested capacity!",15,{"inputs":[{"name":"rawvec"},{"name":"usize"}],"output":{"name":"rawvec"}}],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer and capacity.",15,null],[11,"from_box","","Converts a `Box<[T]>` into a `RawVec<T>`.",15,{"inputs":[{"name":"rawvec"},{"name":"box"}],"output":{"name":"rawvec"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is\nheap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must\nbe careful.",15,null],[11,"cap","","Gets the capacity of the allocation.",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"usize"}}],[11,"double","","Doubles the size of the type's backing allocation. This is common enough\nto want to do that it's easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",15,null],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already,\nwill reallocate the minimum possible amount of memory necessary.\nGenerally this will be exactly the amount of memory necessary,\nbut in principle the allocator is free to give back more than\nwe asked for.",15,null],[11,"reserve","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already have\nenough capacity, will reallocate enough space plus comfortable slack\nspace to get amortized `O(1)` behavior. Will limit this behavior\nif it would needlessly cause itself to panic.",15,null],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount\nis 0, actually completely deallocates.",15,null],[11,"into_box","","Converts the entire buffer into `Box<[T]>`.",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"box"}}],[11,"unsafe_no_drop_flag_needs_drop","","This is a stupid name in the hopes that someone will find this in the\nnot too distant future and remove it with the rest of\n#[unsafe_no_drop_flag]",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"bool"}}],[11,"drop","","Frees the memory owned by the RawVec *without* trying to Drop its contents.",15,null],[14,"log!","log","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"Box"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[3,"RawVec"]]};
searchIndex['num_cpus'] = {"items":[[0,"","num_cpus","Replaces the deprecated functionality of std::os::num_cpus.",null,null],[5,"get","","Returns the number of CPUs of the current machine.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex['slab'] = {"items":[[0,"","slab","",null,null],[3,"Slab","","A preallocated chunk of memory for storing objects of the same type.",null,null],[3,"SlabIter","","",null,null],[3,"SlabMutIter","","",null,null],[8,"Index","","Slab can be indexed by any type implementing `Index` trait.",null,null],[10,"from_usize","","Return a `usize` representation of the index",0,{"inputs":[{"name":"index"},{"name":"usize"}],"output":{"name":"self"}}],[10,"as_usize","","Returns an `Index` based on the `usize` representation",0,{"inputs":[{"name":"index"}],"output":{"name":"usize"}}],[11,"new","","",1,{"inputs":[{"name":"slab"},{"name":"usize"}],"output":{"name":"slab"}}],[11,"new_starting_at","","",1,{"inputs":[{"name":"slab"},{"name":"i"},{"name":"usize"}],"output":{"name":"slab"}}],[11,"count","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"usize"}}],[11,"is_empty","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"bool"}}],[11,"remaining","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"usize"}}],[11,"has_remaining","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"bool"}}],[11,"contains","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"bool"}}],[11,"get","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"option"}}],[11,"insert","","",1,{"inputs":[{"name":"slab"},{"name":"t"}],"output":{"name":"result"}}],[11,"insert_with","","Like `insert` but for objects that require newly allocated\nusize in their constructor.",1,{"inputs":[{"name":"slab"},{"name":"f"}],"output":{"name":"option"}}],[11,"remove","","Releases the given slot",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"option"}}],[11,"replace","","",1,{"inputs":[{"name":"slab"},{"name":"i"},{"name":"t"}],"output":{"name":"option"}}],[11,"replace_with","","Execute a function on the *value* in the slot and put the result of\nthe function back into the slot. If function returns None,\nslot is left empty on exit.",1,{"inputs":[{"name":"slab"},{"name":"i"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"slabiter"}}],[11,"iter_mut","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"slabmutiter"}}],[11,"index","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"t"}}],[11,"index_mut","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"t"}}],[11,"fmt","","",1,{"inputs":[{"name":"slab"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"slabiter"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"slabmutiter"}],"output":{"name":"option"}}]],"paths":[[8,"Index"],[3,"Slab"],[3,"SlabIter"],[3,"SlabMutIter"]]};
searchIndex['spin'] = {"items":[[0,"","spin","Synchronization primitives based on spinning",null,null],[3,"Mutex","","This type provides MUTual EXclusion based on spinning.",null,null],[3,"MutexGuard","","A guard to which the protected data can be accessed",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","A guard to which the protected data can be read",null,null],[3,"RwLockWriteGuard","","A guard to which the protected data can be written",null,null],[11,"new","","Creates a new spinlock wrapping the supplied data.",0,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Locks the spinlock and returns a guard.",0,{"inputs":[{"name":"mutex"}],"output":{"name":"mutexguard"}}],[11,"fmt","","",0,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"deref","","",1,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","The dropping of the MutexGuard will release the lock it was created from.",1,{"inputs":[{"name":"mutexguard"}],"output":null}],[11,"new","","Creates a new spinlock wrapping the supplied data.",2,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",2,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read","","Attempt to acquire this lock with shared read access.",2,{"inputs":[{"name":"rwlock"}],"output":{"name":"option"}}],[11,"write","","Lock this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",2,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",2,{"inputs":[{"name":"rwlock"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"deref","","",3,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",4,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",3,{"inputs":[{"name":"rwlockreadguard"}],"output":null}],[11,"drop","","",4,{"inputs":[{"name":"rwlockwriteguard"}],"output":null}]],"paths":[[3,"Mutex"],[3,"MutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"]]};
searchIndex['thread_scoped'] = {"items":[[0,"","thread_scoped","A stable version of `std::thread::scoped`",null,null],[3,"JoinGuard","","A RAII guard for that joins a scoped thread upon drop",null,null],[5,"scoped","","Spawns a new scoped thread",null,{"inputs":[{"name":"f"}],"output":{"name":"joinguard"}}],[8,"ScopedDetach","","Detaches a child thread from its guard",null,null],[10,"detach","","Detaches a child thread from its guard",0,{"inputs":[{"name":"scopeddetach"}],"output":null}],[11,"thread","","Provides the backing `Thread` object",1,{"inputs":[{"name":"joinguard"}],"output":{"name":"thread"}}],[11,"join","","Joins the guarded thread and returns its result",1,{"inputs":[{"name":"joinguard"}],"output":{"name":"t"}}],[11,"detach","","",1,{"inputs":[{"name":"joinguard"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"joinguard"}],"output":null}]],"paths":[[8,"ScopedDetach"],[3,"JoinGuard"]]};
searchIndex['bitflags'] = {"items":[[0,"","bitflags","A typesafe bitmask flag generator.",null,null],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
initSearch(searchIndex);
